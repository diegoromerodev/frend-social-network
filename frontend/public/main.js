/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},3704:(e,t)=>{!function(e){"use strict";t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,a="";for(n=0;n<o;n+=3)a+=e[r[n]>>2],a+=e[(3&r[n])<<4|r[n+1]>>4],a+=e[(15&r[n+1])<<2|r[n+2]>>6],a+=e[63&r[n+2]];return o%3==2?a=a.substring(0,a.length-1)+"=":o%3==1&&(a=a.substring(0,a.length-2)+"=="),a},t.decode=function(t){var n,r,o,a,i,l=.75*t.length,s=t.length,u=0;"="===t[t.length-1]&&(l--,"="===t[t.length-2]&&l--);var c=new ArrayBuffer(l),f=new Uint8Array(c);for(n=0;n<s;n+=4)r=e.indexOf(t[n]),o=e.indexOf(t[n+1]),a=e.indexOf(t[n+2]),i=e.indexOf(t[n+3]),f[u++]=r<<2|o>>4,f[u++]=(15&o)<<4|a>>2,f[u++]=(3&a)<<6|63&i;return c}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},8767:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}},1227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,n)=>{e.exports=function(e){function t(e){let n,o,a,i=null;function l(...e){if(!l.enabled)return;const r=l,o=Number(new Date),a=o-(n||o);r.diff=a,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";i++;const a=t.formatters[o];if("function"==typeof a){const t=e[i];n=a.call(r,t),e.splice(i,1),i--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return l.namespace=e,l.useColors=t.useColors(),l.color=t.selectColor(e),l.extend=r,l.destroy=t.destroy,Object.defineProperty(l,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(o!==t.namespaces&&(o=t.namespaces,a=t.enabled(e)),a),set:e=>{i=e}}),"function"==typeof t.init&&t.init(l),l}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},3549:e=>{e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(e,t,n)=>{const r=n(2192);e.exports=(e,t)=>new r(e,t),e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n(6496),e.exports.transports=n(3352),e.exports.parser=n(9743)},2192:(e,t,n)=>{const r=n(3352),o=n(8767),a=n(1227)("engine.io-client:socket"),i=n(9743),l=n(4187),s=n(1830),{installTimerFunctions:u}=n(6839);class c extends o{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=l(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=l(t.host).host),u(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=s.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){a('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=i.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return a("options: %j",n),new r[e](n)}open(){let e;if(this.opts.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emit("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return a("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){a("setting transport %s",e.name),this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){a('probing transport "%s"',e);let t=this.createTransport(e,{probe:1}),n=!1;c.priorWebsocketSuccess=!1;const r=()=>{n||(a('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(a('probe transport "%s" pong',e),this.upgrading=!0,this.emit("upgrading",t),!t)return;c.priorWebsocketSuccess="websocket"===t.name,a('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(a("changing transport and sending upgrade packet"),f(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emit("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{a('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emit("upgradeError",n)}})))};function o(){n||(n=!0,f(),t.close(),t=null)}const i=n=>{const r=new Error("probe error: "+n);r.transport=t.name,o(),a('probe transport "%s" failed because of error: %s',e,n),this.emit("upgradeError",r)};function l(){i("transport closed")}function s(){i("socket closed")}function u(e){t&&e.name!==t.name&&(a('"%s" works - aborting "%s"',e.name,t.name),o())}const f=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",l),this.removeListener("close",s),this.removeListener("upgrading",u)};t.once("open",r),t.once("error",i),t.once("close",l),this.once("close",s),this.once("upgrading",u),t.open()}onOpen(){if(a("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){a("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),a("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.removeListener("upgrade",t),this.removeListener("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){a("socket error %j",e),c.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(a('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingIntervalTimer),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}c.priorWebsocketSuccess=!1,c.protocol=i.protocol,e.exports=c},6496:(e,t,n)=>{const r=n(9743),o=n(8767),{installTimerFunctions:a}=n(6839),i=n(1227)("engine.io-client:transport");e.exports=class extends o{constructor(e){super(),a(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):i("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(e){const t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){this.emit("packet",e)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(e,t,n)=>{const r=n(2777),o=n(3416),a=n(9785),i=n(4442);t.polling=function(e){let t,n=!1,i=!1;const l=!1!==e.jsonp;if("undefined"!=typeof location){const t="https:"===location.protocol;let r=location.port;r||(r=t?443:80),n=e.hostname!==location.hostname||r!==e.port,i=e.secure!==t}if(e.xdomain=n,e.xscheme=i,t=new r(e),"open"in t&&!e.forceJSONP)return new o(e);if(!l)throw new Error("JSONP disabled");return new a(e)},t.websocket=i},9785:(e,t,n)=>{const r=n(9015),o=n(3549),a=/\n/g,i=/\\n/g;let l;e.exports=class extends r{constructor(e){super(e),this.query=this.query||{},l||(l=o.___eio=o.___eio||[]),this.index=l.length,l.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=e=>{this.onError("jsonp poll error",e)};const t=document.getElementsByTagName("script")[0];t?t.parentNode.insertBefore(e,t):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&this.setTimeoutFn((function(){const e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)}doWrite(e,t){let n;if(!this.form){const e=document.createElement("form"),t=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;e.className="socketio",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.target=n,e.method="POST",e.setAttribute("accept-charset","utf-8"),t.name="d",e.appendChild(t),document.body.appendChild(e),this.form=e,this.area=t}function r(){o(),t()}this.form.action=this.uri();const o=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(e){this.onError("jsonp polling iframe removal error",e)}try{const e='<iframe src="javascript:0" name="'+this.iframeId+'">';n=document.createElement(e)}catch(e){n=document.createElement("iframe"),n.name=this.iframeId,n.src="javascript:0"}n.id=this.iframeId,this.form.appendChild(n),this.iframe=n};o(),e=e.replace(i,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},3416:(e,t,n)=>{const r=n(2777),o=n(9015),a=n(8767),{pick:i,installTimerFunctions:l}=n(6839),s=n(3549),u=n(1227)("engine.io-client:polling-xhr");function c(){}const f=null!=new r({xdomain:!1}).responseType;class d extends a{constructor(e,t){super(),l(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=i(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new r(e);try{u("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),this.hasXDR()?(t.onload=()=>{this.onLoad()},t.onerror=()=>{this.onError(t.responseText)}):t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},u("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=d.requestsCount++,d.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete d.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function p(){for(let e in d.requests)d.requests.hasOwnProperty(e)&&d.requests[e].abort()}d.requestsCount=0,d.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",p):"function"==typeof addEventListener&&addEventListener("onpagehide"in s?"pagehide":"unload",p,!1)),e.exports=class extends o{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=f&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new d(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){u("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}},e.exports.Request=d},9015:(e,t,n)=>{const r=n(6496),o=n(1830),a=n(9743),i=n(2281),l=n(1227)("engine.io-client:polling");e.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{l("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(l("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){l("pre-pause polling complete"),--e||t()}))),this.writable||(l("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){l("pre-pause writing complete"),--e||t()})))}else t()}poll(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){l("polling got data %s",e),a.decodePayload(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{l("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(l("transport open - closing"),e()):(l("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,a.encodePayload(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}},866:(e,t,n)=>{const r=n(3549),o="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0);e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:o}},4442:(e,t,n)=>{const r=n(6496),o=n(9743),a=n(1830),i=n(2281),{pick:l}=n(6839),{WebSocket:s,usingBrowserWebSocket:u,defaultBinaryType:c,nextTick:f}=n(866),d=n(1227)("engine.io-client:websocket"),p="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class h extends r{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=p?{}:l(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=u&&!p?t?new s(e,t):new s(e):new s(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;o.encodePacket(n,this.supportsBinary,(e=>{const t={};!u&&(n.options&&(t.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u?this.ws.send(e):this.ws.send(e,t)}catch(e){d("websocket closed before onclose event")}r&&f((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||(e.b64=1),e=a.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}check(){return!(!s||"__initialize"in s&&this.name===h.prototype.name)}}e.exports=h},6839:(e,t,n)=>{const r=n(3549);e.exports.pick=(e,...t)=>t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{});const o=setTimeout,a=clearTimeout;e.exports.installTimerFunctions=(e,t)=>{t.useNativeTimers?(e.setTimeoutFn=o.bind(r),e.clearTimeoutFn=a.bind(r)):(e.setTimeoutFn=setTimeout.bind(r),e.clearTimeoutFn=clearTimeout.bind(r))}},2777:(e,t,n)=>{const r=n(8058),o=n(3549);e.exports=function(e){const t=e.xdomain,n=e.xscheme,a=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&a)return new XDomainRequest}catch(e){}if(!t)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},1712:e=>{const t=Object.create(null);t.open="0",t.close="1",t.ping="2",t.pong="3",t.message="4",t.upgrade="5",t.noop="6";const n=Object.create(null);Object.keys(t).forEach((e=>{n[t[e]]=e})),e.exports={PACKET_TYPES:t,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(e,t,n)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:o}=n(1712);let a;"function"==typeof ArrayBuffer&&(a=n(3704));const i=(e,t)=>{if(a){const n=a.decode(e);return l(n,t)}return{base64:!0,data:e}},l=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e;e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:l(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:i(e.substring(1),t)}:r[n]?e.length>1?{type:r[n],data:e.substring(1)}:{type:r[n]}:o}},2929:(e,t,n)=>{const{PACKET_TYPES:r}=n(1712),o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),a="function"==typeof ArrayBuffer,i=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=({type:e,data:t},n,l)=>{return o&&t instanceof Blob?n?l(t):i(t,l):a&&(t instanceof ArrayBuffer||(s=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(s):s&&s.buffer instanceof ArrayBuffer))?n?l(t):i(new Blob([t]),l):l(r[e]+(t||""));var s}},9743:(e,t,n)=>{const r=n(2929),o=n(4965),a=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:(e,t)=>{const n=e.length,o=new Array(n);let i=0;e.forEach(((e,l)=>{r(e,!1,(e=>{o[l]=e,++i===n&&t(o.join(a))}))}))},decodePacket:o,decodePayload:(e,t)=>{const n=e.split(a),r=[];for(let e=0;e<n.length;e++){const a=o(n[e],t);if(r.push(a),"error"===a.type)break}return r}}},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=s(t),m=s(n),y=0;y<i.length;++y){var v=i[y];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=d(n,v);try{u(t,v,g)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7824:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function a(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,i){i=i||{};var l,s,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var i=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return 6048e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}(e);if("number"===u&&isFinite(e))return i.long?(l=e,(s=Math.abs(l))>=o?a(l,s,o,"day"):s>=r?a(l,s,r,"hour"):s>=n?a(l,s,n,"minute"):s>=t?a(l,s,t,"second"):l+" ms"):function(e){var a=Math.abs(e);return a>=o?Math.round(e/o)+"d":a>=r?Math.round(e/r)+"h":a>=n?Math.round(e/n)+"m":a>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(s[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(s[l[f]]=i[l[f]])}}return s}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var a=n[r].split("=");t[decodeURIComponent(a[0])]=decodeURIComponent(a[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,a=e,i=e.indexOf("["),l=e.indexOf("]");-1!=i&&-1!=l&&(e=e.substring(0,i)+e.substring(i,l).replace(/:/g,";")+e.substring(l,e.length));for(var s,u,c=t.exec(e||""),f={},d=14;d--;)f[n[d]]=c[d]||"";return-1!=i&&-1!=l&&(f.source=a,f.host=f.host.substring(1,f.host.length-1).replace(/;/g,":"),f.authority=f.authority.replace("[","").replace("]","").replace(/;/g,":"),f.ipv6uri=!0),f.pathNames=(r=f.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),f.queryKey=(s=f.query,u={},s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),f}},4779:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,S="?"===b||"*"===b,C=n[2]||c,x=v||g;r.push({name:y||a++,prefix:m||"",delimiter:C,optional:S,repeat:E,partial:k,asterisk:!!w,pattern:x?u(x):w?".*":"[^"+s(C)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},s=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=s(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(d),!n[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)i+=s(u);else{var d=s(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),i+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=s(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function y(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,S=60106,C=60107,x=60108,_=60114,O=60109,P=60110,N=60112,A=60113,T=60120,j=60115,R=60116,M=60121,I=60128,L=60129,F=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;E=D("react.element"),S=D("react.portal"),C=D("react.fragment"),x=D("react.strict_mode"),_=D("react.profiler"),O=D("react.provider"),P=D("react.context"),N=D("react.forward_ref"),A=D("react.suspense"),T=D("react.suspense_list"),j=D("react.memo"),R=D("react.lazy"),M=D("react.block"),D("react.scope"),I=D("react.opaque.id"),L=D("react.debug_trace_mode"),F=D("react.offscreen"),z=D("react.legacy_hidden")}var B,U="function"==typeof Symbol&&Symbol.iterator;function q(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function $(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var W=!1;function V(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function H(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 22:return V(e.type._render,!1);case 1:return V(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case S:return"Portal";case _:return"Profiler";case x:return"StrictMode";case A:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return K(e.type);case M:return K(e._render);case R:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ye=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _e=null,Oe=null,Pe=null;function Ne(e){if(e=no(e)){if("function"!=typeof _e)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),_e(e.stateNode,e.type,t))}}function Ae(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Te(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function je(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Me(){}var Ie=je,Le=!1,Fe=!1;function ze(){null===Oe&&null===Pe||(Me(),Te())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Be=!1;if(f)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(me){Be=!1}function qe(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var $e=!1,We=null,Ve=!1,He=null,Ke={onError:function(e){$e=!0,We=e}};function Ye(e,t,n,r,o,a,i,l,s){$e=!1,We=null,qe.apply(Ke,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Qe(e)!==e)throw Error(i(188))}function Je(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ge(o),e;if(a===r)return Ge(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,st=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=to(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==st&&vt(st)&&(st=null),ut.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function kt(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==st&&wt(st,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)yt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},Ct={},xt={};function _t(e){if(Ct[e])return Ct[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return Ct[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=_t("animationend"),Pt=_t("animationiteration"),Nt=_t("animationstart"),At=_t("transitionend"),Tt=new Map,jt=new Map,Rt=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Nt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",At,"transitionEnd","waiting","waiting"];function Mt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),jt.set(r,t),Tt.set(r,o),u(o,[r])}}(0,a.unstable_now)();var It=8;function Lt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=It=15;else if(0!=(a=134217727&n)){var s=a&~i;0!==s?(r=Lt(s),o=It):0!=(l&=a)&&(r=Lt(l),o=It)}else 0!=(a=n&~i)?(r=Lt(a),o=It):0!==l&&(r=Lt(l),o=It);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Lt(t),o<=It)return t;It=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Dt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Dt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Bt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function qt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Vt|0)|0},Wt=Math.log,Vt=Math.LN2,Ht=a.unstable_UserBlockingPriority,Kt=a.unstable_runWithPriority,Yt=!0;function Qt(e,t,n,r){Le||Me();var o=Gt,a=Le;Le=!0;try{Re(o,e,t,n,r)}finally{(Le=a)||ze()}}function Xt(e,t,n,r){Kt(Ht,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Yt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Jt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return st=mt(st,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,mt(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Mr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=xe(r);if(null!==(o=to(o))){var a=Qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Mr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),yn=ln(mn),vn=ln(o({},mn,{dataTransfer:0})),gn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=ln(wn),En=ln(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function On(){return _n}var Pn=o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=ln(Pn),An=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),jn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=ln(Rn),In=[9,13,27,32],Ln=f&&"CompositionEvent"in window,Fn=null;f&&"documentMode"in document&&(Fn=document.documentMode);var zn=f&&"TextEvent"in window&&!Fn,Dn=f&&(!Ln||Fn&&8<Fn&&11>=Fn),Bn=String.fromCharCode(32),Un=!1;function qn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Kn(e,t,n,r){Ae(r),0<(t=Lr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Qn=null;function Xn(e){Pr(e,0)}function Gn(e){if(G(ro(e)))return e}function Jn(e,t){if("change"===e)return t}var Zn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Zn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Yn&&(Yn.detachEvent("onpropertychange",or),Qn=Yn=null)}function or(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];if(Kn(t,Qn,e,xe(e)),e=Xn,Le)e(t);else{Le=!0;try{je(e,t)}finally{Le=!1,ze()}}}}function ar(e,t,n){"focusin"===e?(rr(),Qn=n,(Yn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function lr(e,t){if("click"===e)return Gn(t)}function sr(e,t){if("input"===e||"change"===e)return Gn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function yr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=f&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,wr=null,kr=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;kr||null==gr||gr!==J(r)||(r="selectionStart"in(r=gr)&&yr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Lr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}Mt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Mt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Mt(Rt,2);for(var Sr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Cr=0;Cr<Sr.length;Cr++)jt.set(Sr[Cr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_r=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,s,u){if(Ye.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,Ve||(Ve=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Pr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Or(o,l,u),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Or(o,l,u),a=s}}}if(Ve)throw e=He,Ve=!1,He=null,e}function Nr(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Ar="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[Ar]||(e[Ar]=!0,l.forEach((function(t){_r.has(t)||jr(t,!1,e,null),jr(t,!0,e,null)})))}function jr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&_r.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Rr(a,e,o,t),i.add(l))}function Rr(e,t,n,r){var o=jt.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=to(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Ie(e,t,n)}finally{Fe=!1,ze()}}((function(){var r=a,o=xe(n),i=[];e:{var l=Tt.get(e);if(void 0!==l){var s=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Nn;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Ot:case Pt:case Nt:s=bn;break;case At:s=jn;break;case"scroll":s=hn;break;case"wheel":s=Mn;break;case"copy":case"cut":case"paste":s=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=An}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Ir(h,m,p))),f)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Zr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(f=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=yn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?l:ro(s),p=null==u?l:ro(u),(l=new c(m,h+"leave",s,n,o)).target=f,l.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",u,n,o)).target=p,c.relatedTarget=f,m=c),f=m,s&&u)e:{for(d=u,h=0,p=c=s;p;p=Fr(p))h++;for(p=0,m=d;m;m=Fr(m))p++;for(;0<h-p;)c=Fr(c),h--;for(;0<p-h;)d=Fr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Fr(c),d=Fr(d)}c=null}else c=null;null!==s&&zr(i,l,s,c,!1),null!==u&&null!==f&&zr(i,f,u,c,!0)}if("select"===(s=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var y=Jn;else if(Hn(l))if(Zn)y=sr;else{y=ir;var v=ar}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=lr);switch(y&&(y=y(e,r))?Kn(i,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?ro(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(gr=v,br=r,wr=null);break;case"focusout":wr=br=gr=null;break;case"mousedown":kr=!0;break;case"contextmenu":case"mouseup":case"dragend":kr=!1,Er(i,n,o);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":Er(i,n,o)}var g;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?qn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Wn=!0)),0<(v=Lr(r,b)).length&&(b=new En(b,e,null,n,o),i.push({event:b,listeners:v}),(g||null!==(g=$n(n)))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Un=!0,Bn);case"textInput":return(e=t.data)===Bn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Ln&&qn(e,t)?(e=nn(),tn=en=Zt=null,Wn=!1,e):null;switch(e){default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Lr(r,"onBeforeInput")).length&&(o=new En("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Pr(i,t)}))}function Ir(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Ir(e,a,o)),null!=(a=De(e,t))&&r.push(Ir(e,a,o))),e=e.return}return r}function Fr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=De(n,a))&&i.unshift(Ir(n,s,l)):o||null!=(s=De(n,a))&&i.push(Ir(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Br=null,Ur=null;function qr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function $r(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Yr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Xr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Xr,Jr="__reactProps$"+Xr,Zr="__reactContainer$"+Xr,eo="__reactEvents$"+Xr;function to(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Zr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Yr(e);null!==e;){if(n=e[Gr])return n;e=Yr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Gr]||e[Zr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Jr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],lo=-1;function so(e){return{current:e}}function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var fo={},po=so(fo),ho=so(!1),mo=fo;function yo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=e.childContextTypes}function go(){uo(ho),uo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(i(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,K(t)||"Unknown",a));return o({},n,r)}function ko(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(po),co(po,e)):uo(ho),co(ho,n)}var So=null,Co=null,xo=a.unstable_runWithPriority,_o=a.unstable_scheduleCallback,Oo=a.unstable_cancelCallback,Po=a.unstable_shouldYield,No=a.unstable_requestPaint,Ao=a.unstable_now,To=a.unstable_getCurrentPriorityLevel,jo=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,Mo=a.unstable_NormalPriority,Io=a.unstable_LowPriority,Lo=a.unstable_IdlePriority,Fo={},zo=void 0!==No?No:function(){},Do=null,Bo=null,Uo=!1,qo=Ao(),$o=1e4>qo?Ao:function(){return Ao()-qo};function Wo(){switch(To()){case jo:return 99;case Ro:return 98;case Mo:return 97;case Io:return 96;case Lo:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return jo;case 98:return Ro;case 97:return Mo;case 96:return Io;case 95:return Lo;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Ko(e,t,n){return e=Vo(e),_o(e,t,n)}function Yo(){if(null!==Bo){var e=Bo;Bo=null,Oo(e)}Qo()}function Qo(){if(!Uo&&null!==Do){Uo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),_o(jo,Yo),t}finally{Uo=!1}}}var Xo=k.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Jo=so(null),Zo=null,ea=null,ta=null;function na(){ta=ea=Zo=null}function ra(e){var t=Jo.current;uo(Jo),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Zo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Li=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Zo)throw Error(i(308));ea=t,Zo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var la=!1;function sa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ua(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function da(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pa(e,t,n,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?i=c:l.next=c,l=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==i){for(d=a.baseState,l=0,f=c=u=null;;){s=i.lane;var p=i.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(s=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=m.payload)?h.call(p,d,s):h))break e;d=o({},d,s);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(s=a.effects)?a.effects=[i]:s.push(i))}else p={eventTime:p,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,l|=s;if(null===(i=i.next)){if(null===(s=a.shared.pending))break;i=s.next,s.next=null,a.lastBaseUpdate=s,a.shared.pending=null}}null===f&&(u=d),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=f,zl|=l,e.lanes=l,e.memoizedState=d}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ma=(new r.Component).refs;function ya(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),fa(e,a),fs(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),fa(e,a),fs(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=us(),r=cs(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),fa(e,o),fs(e,r,n)}};function ga(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,a))}function ba(e,t,n){var r=!1,o=fo,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=vo(t)?mo:po.current,a=(r=null!=(r=t.contextTypes))?yo(e,o):fo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function ka(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,sa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=vo(t)?mo:po.current,o.context=yo(e,a)),pa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ya(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),pa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ea=Array.isArray;function Sa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ca(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=$s(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ks(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Sa(e,t,n),r.return=e,r):((r=Ws(n.type,n.key,n.props,null,e.mode,r)).ref=Sa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ys(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Vs(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ks(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Ws(t.type,t.key,t.props,null,e.mode,n)).ref=Sa(e,null,t),n.return=e,n;case S:return(t=Ys(t,e.mode,n)).return=e,t}if(Ea(t)||q(t))return(t=Vs(t,e.mode,n,null)).return=e,t;Ca(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===C?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(Ea(n)||q(n))return null!==o?null:f(e,t,n,r,null);Ca(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===C?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ea(r)||q(r))return f(t,e=e.get(n)||null,r,o,null);Ca(t,r)}return null}function m(o,i,l,s){for(var u=null,c=null,f=i,m=i=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],s);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?u=v:c.sibling=v,c=v,f=y}if(m===l.length)return n(o,f),u;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],s))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],s))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?u=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(o,e)})),u}function y(o,l,s,u){var c=q(s);if("function"!=typeof c)throw Error(i(150));if(null==(s=c.call(s)))throw Error(i(151));for(var f=c=null,m=l,y=l=0,v=null,g=s.next();null!==m&&!g.done;y++,g=s.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;y++,g=s.next())null!==(g=d(o,g.value,u))&&(l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=s.next())null!==(g=h(m,o,y,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=a(g,l,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,s){var u="object"==typeof a&&null!==a&&a.type===C&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case E:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(a.type===C){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}}else if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=Sa(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===C?((r=Vs(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Ws(a.type,a.key,a.props,null,e.mode,s)).ref=Sa(e,r,a),s.return=e,e=s)}return l(e);case S:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ys(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Ks(a,e.mode,s)).return=e,e=r),l(e);if(Ea(a))return m(e,r,a,s);if(q(a))return y(e,r,a,s);if(c&&Ca(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,K(e.type)||"Component"))}return n(e,r)}}var _a=xa(!0),Oa=xa(!1),Pa={},Na=so(Pa),Aa=so(Pa),Ta=so(Pa);function ja(e){if(e===Pa)throw Error(i(174));return e}function Ra(e,t){switch(co(Ta,t),co(Aa,e),co(Na,Pa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Na),co(Na,t)}function Ma(){uo(Na),uo(Aa),uo(Ta)}function Ia(e){ja(Ta.current);var t=ja(Na.current),n=pe(t,e.type);t!==n&&(co(Aa,e),co(Na,n))}function La(e){Aa.current===e&&(uo(Na),uo(Aa))}var Fa=so(0);function za(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Ba=null,Ua=!1;function qa(e,t){var n=Us(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function $a(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wa(e){if(Ua){var t=Ba;if(t){var n=t;if(!$a(e,t)){if(!(t=Kr(n.nextSibling))||!$a(e,t))return e.flags=-1025&e.flags|2,Ua=!1,void(Da=e);qa(Da,n)}Da=e,Ba=Kr(t.firstChild)}else e.flags=-1025&e.flags|2,Ua=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!Ua)return Va(e),Ua=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$r(t,e.memoizedProps))for(t=Ba;t;)qa(e,t),t=Kr(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ba=Kr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ba=null}}else Ba=Da?Kr(e.stateNode.nextSibling):null;return!0}function Ka(){Ba=Da=null,Ua=!1}var Ya=[];function Qa(){for(var e=0;e<Ya.length;e++)Ya[e]._workInProgressVersionPrimary=null;Ya.length=0}var Xa=k.ReactCurrentDispatcher,Ga=k.ReactCurrentBatchConfig,Ja=0,Za=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Ja=a,Za=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xa.current=null===e||null===e.memoizedState?ji:Ri,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Xa.current=Mi,e=n(r,o)}while(ri)}if(Xa.current=Ti,t=null!==ei&&null!==ei.next,Ja=0,ti=ei=Za=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Za.memoizedState=ti=e:ti=ti.next=e,ti}function si(){if(null===ei){var e=Za.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Za.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Za.memoizedState=ti=e:ti=ti.next=e}return ti}function ui(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=si(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=a=null,u=o;do{var c=u.lane;if((Ja&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=f,a=r):s=s.next=f,Za.lanes|=c,zl|=c}u=u.next}while(null!==u&&u!==o);null===s?a=r:s.next=l,ur(r,t.memoizedState)||(Li=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fi(e){var t=si(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ur(a,t.memoizedState)||(Li=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ja&e)===e)&&(t._workInProgressVersionPrimary=r,Ya.push(t))),e)return n(t._source);throw Ya.push(t),Error(i(350))}function pi(e,t,n,r){var o=Al;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),s=Xa.current,u=s.useState((function(){return di(o,t,n)})),c=u[1],f=u[0];u=ti;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var y=Za;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ur(l,e)){e=n(t._source),ur(f,e)||(c(e),e=cs(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var s=31-$t(i),u=1<<s;r[s]|=e,i&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cs(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:f}).dispatch=c=Ai.bind(null,Za,e),u.queue=e,u.baseQueue=null,f=di(o,t,n),u.memoizedState=u.baseState=f),f}function hi(e,t,n){return pi(si(),e,t,n)}function mi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:e}).dispatch=Ai.bind(null,Za,e),[t.memoizedState,e]}function yi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Za.updateQueue)?(t={lastEffect:null},Za.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vi(e){return e={current:e},li().memoizedState=e}function gi(){return si().memoizedState}function bi(e,t,n,r){var o=li();Za.flags|=e,o.memoizedState=yi(1|t,n,void 0,void 0===r?null:r)}function wi(e,t,n,r){var o=si();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void yi(t,n,a,r)}Za.flags|=e,o.memoizedState=yi(1|t,n,a,r)}function ki(e,t){return bi(516,4,e,t)}function Ei(e,t){return wi(516,4,e,t)}function Si(e,t){return wi(4,2,e,t)}function Ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,Ci.bind(null,t,e),n)}function _i(){}function Oi(e,t){var n=si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Pi(e,t){var n=si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ni(e,t){var n=Wo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Ga.transition;Ga.transition=1;try{e(!1),t()}finally{Ga.transition=n}}))}function Ai(e,t,n){var r=us(),o=cs(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Za||null!==i&&i===Za)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=i(l,n);if(a.eagerReducer=i,a.eagerState=s,ur(s,l))return}catch(e){}fs(e,o,r)}}var Ti={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},ji={readContext:ia,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:ki,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ai.bind(null,Za,e),[r.memoizedState,e]},useRef:vi,useState:mi,useDebugValue:_i,useDeferredValue:function(e){var t=mi(e),n=t[0],r=t[1];return ki((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=mi(!1),t=e[0];return vi(e=Ni.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ua){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(i(355))})),n=mi(t)[1];return 0==(2&Za.mode)&&(Za.flags|=516,yi(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return mi(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:Oi,useContext:ia,useEffect:Ei,useImperativeHandle:xi,useLayoutEffect:Si,useMemo:Pi,useReducer:ci,useRef:gi,useState:function(){return ci(ui)},useDebugValue:_i,useDeferredValue:function(e){var t=ci(ui),n=t[0],r=t[1];return Ei((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=ci(ui)[0];return[gi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return ci(ui)[0]},unstable_isNewReconciler:!1},Mi={readContext:ia,useCallback:Oi,useContext:ia,useEffect:Ei,useImperativeHandle:xi,useLayoutEffect:Si,useMemo:Pi,useReducer:fi,useRef:gi,useState:function(){return fi(ui)},useDebugValue:_i,useDeferredValue:function(e){var t=fi(ui),n=t[0],r=t[1];return Ei((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=fi(ui)[0];return[gi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return fi(ui)[0]},unstable_isNewReconciler:!1},Ii=k.ReactCurrentOwner,Li=!1;function Fi(e,t,n,r){t.child=null===e?Oa(t,null,n,r):_a(t,e.child,n,r)}function zi(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||Li?(t.flags|=1,Fi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||qs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ws(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Bi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?nl(e,t,a):(t.flags|=1,(e=$s(i,r)).ref=t.ref,e.return=t,t.child=e)}function Bi(e,t,n,r,o,a){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Li=!1,0==(a&o))return t.lanes=e.lanes,nl(e,t,a);0!=(16384&e.flags)&&(Li=!0)}return $i(e,t,n,r,a)}function Ui(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bs(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bs(0,e),null;t.memoizedState={baseLanes:0},bs(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bs(0,r);return Fi(e,t,o,n),t.child}function qi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function $i(e,t,n,r,o){var a=vo(n)?mo:po.current;return a=yo(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||Li?(t.flags|=1,Fi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Wi(e,t,n,r,o){if(vo(n)){var a=!0;ko(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),ka(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ia(u):yo(t,u=vo(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&wa(t,i,r,u),la=!1;var d=t.memoizedState;i.state=d,pa(t,r,i,o),s=t.memoizedState,l!==r||d!==s||ho.current||la?("function"==typeof c&&(ya(t,n,c,r),s=t.memoizedState),(l=la||ga(t,n,l,r,d,s,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ua(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Go(t.type,l),i.props=u,f=t.pendingProps,d=i.context,s="object"==typeof(s=n.contextType)&&null!==s?ia(s):yo(t,s=vo(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==s)&&wa(t,i,r,s),la=!1,d=t.memoizedState,i.state=d,pa(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||ho.current||la?("function"==typeof p&&(ya(t,n,p,r),h=t.memoizedState),(u=la||ga(t,n,u,r,d,h,s))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vi(e,t,n,r,a,o)}function Vi(e,t,n,r,o,a){qi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&Eo(t,n,!1),nl(e,t,a);r=t.stateNode,Ii.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=_a(t,e.child,null,a),t.child=_a(t,null,l,a)):Fi(e,t,l,a),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ra(e,t.containerInfo)}var Ki,Yi,Qi,Xi={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,o=t.pendingProps,a=Fa.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(Fa,1&a),null===e?(void 0!==o.fallback&&Wa(t),e=o.children,a=o.fallback,i?(e=Ji(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Xi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ji(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Xi,t.lanes=33554432,e):((n=Hs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=$s(i,l),null!==e?r=$s(e,r):(r=Vs(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Xi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=$s(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ji(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Hs(t,o,0,null),n=Vs(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Zi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function el(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Fi(e,t,r.children,n),0!=(2&(r=Fa.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,n);else if(19===e.tag)Zi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Fa,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===za(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===za(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=$s(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$s(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ua)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vo(t.type)&&go(),null;case 3:return Ma(),uo(ho),uo(po),Qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:La(t);var a=ja(Ta.current);if(n=t.type,null!==e&&null!=t.stateNode)Yi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=ja(Na.current),Ha(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Jr]=l,n){case"dialog":Nr("cancel",r),Nr("close",r);break;case"iframe":case"object":case"embed":Nr("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Nr(xr[e],r);break;case"source":Nr("error",r);break;case"img":case"image":case"link":Nr("error",r),Nr("load",r);break;case"details":Nr("toggle",r);break;case"input":ee(r,l),Nr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Nr("invalid",r);break;case"textarea":se(r,l),Nr("invalid",r)}for(var u in Se(n,l),e=null,l)l.hasOwnProperty(u)&&(a=l[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):s.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Nr("scroll",r));switch(n){case"input":X(r),re(r,l,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Gr]=t,e[Jr]=r,Ki(e,t),t.stateNode=e,u=Ce(n,r),n){case"dialog":Nr("cancel",e),Nr("close",e),a=r;break;case"iframe":case"object":case"embed":Nr("load",e),a=r;break;case"video":case"audio":for(a=0;a<xr.length;a++)Nr(xr[a],e);a=r;break;case"source":Nr("error",e),a=r;break;case"img":case"image":case"link":Nr("error",e),Nr("load",e),a=r;break;case"details":Nr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Nr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Nr("invalid",e);break;case"textarea":se(e,r),a=le(e,r),Nr("invalid",e);break;default:a=r}Se(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?ke(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Nr("scroll",e):null!=f&&w(e,l,f,u))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}qr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=ja(Ta.current),ja(Na.current),Ha(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return uo(Fa),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fa.current)?0===Il&&(Il=3):(0!==Il&&3!==Il||(Il=4),null===Al||0==(134217727&zl)&&0==(134217727&Dl)||ms(Al,jl))),(r||n)&&(t.flags|=4),null);case 4:return Ma(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(uo(Fa),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)rl(r,!1);else{if(0!==Il||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=za(e))){for(t.flags|=64,rl(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Fa,1&Fa.current|2),t.child}e=e.sibling}null!==r.tail&&$o()>$l&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=za(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ua)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>$l&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=Fa.current,co(Fa,l?1&t|2:1&t),n):null;case 23:case 24:return ws(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ma(),uo(ho),uo(po),Qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return La(e),null;case 13:return uo(Fa),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(Fa),null;case 4:return Ma(),null;case 10:return ra(e),null;case 23:case 24:return ws(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ki=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Yi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ja(Na.current);var i,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Se(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var u=a[f];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Nr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var sl="function"==typeof WeakMap?WeakMap:Map;function ul(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Kl||(Kl=!0,Yl=r),ll(0,t)},n}function cl(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fs(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo))}throw Error(i(163))}function hl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Ms(n,e),Rs(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&qr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(i(163))}function ml(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function yl(e,t){if(Co&&"function"==typeof Co.onCommitFiberUnmount)try{Co.onCommitFiberUnmount(So,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Ms(t,n);else{r=t;try{o()}catch(e){Fs(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Fs(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(gl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):kl(e,n,t)}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function kl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(kl(e,t,n),e=e.sibling;null!==e;)kl(e,t,n),e=e.sibling}function El(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(yl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(yl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function Sl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,o),t=Ce(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?ke(n,s):"dangerouslySetInnerHTML"===l?ye(n,s):"children"===l?ve(n,s):w(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&(ql=$o(),ml(t.child,!0)),void Cl(t);case 19:return void Cl(t);case 23:case 24:return void ml(t,null!==t.memoizedState)}throw Error(i(163))}function Cl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Ds.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function xl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var _l=Math.ceil,Ol=k.ReactCurrentDispatcher,Pl=k.ReactCurrentOwner,Nl=0,Al=null,Tl=null,jl=0,Rl=0,Ml=so(0),Il=0,Ll=null,Fl=0,zl=0,Dl=0,Bl=0,Ul=null,ql=0,$l=1/0;function Wl(){$l=$o()+500}var Vl,Hl=null,Kl=!1,Yl=null,Ql=null,Xl=!1,Gl=null,Jl=90,Zl=[],es=[],ts=null,ns=0,rs=null,os=-1,as=0,is=0,ls=null,ss=!1;function us(){return 0!=(48&Nl)?$o():-1!==os?os:os=$o()}function cs(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===as&&(as=Fl),0!==Xo.transition){0!==is&&(is=null!==Ul?Ul.pendingLanes:0),e=as;var t=4186112&~is;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Dt(0!=(4&Nl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),as)}function fs(e,t,n){if(50<ns)throw ns=0,rs=null,Error(i(185));if(null===(e=ds(e,t)))return null;qt(e,t,n),e===Al&&(Dl|=t,4===Il&&ms(e,jl));var r=Wo();1===t?0!=(8&Nl)&&0==(48&Nl)?ys(e):(ps(e,n),0===Nl&&(Wl(),Yo())):(0==(4&Nl)||98!==r&&99!==r||(null===ts?ts=new Set([e]):ts.add(e)),ps(e,n)),Ul=e}function ds(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ps(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-$t(l),u=1<<s,c=a[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Lt(u);var f=It;a[s]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Ft(e,e===Al?jl:0),t=It,0===r)null!==n&&(n!==Fo&&Oo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Fo&&Oo(n)}15===t?(n=ys.bind(null,e),null===Do?(Do=[n],Bo=_o(jo,Qo)):Do.push(n),n=Fo):14===t?n=Ko(99,ys.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Ko(n,hs.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hs(e){if(os=-1,is=as=0,0!=(48&Nl))throw Error(i(327));var t=e.callbackNode;if(js()&&e.callbackNode!==t)return null;var n=Ft(e,e===Al?jl:0);if(0===n)return null;var r=n,o=Nl;Nl|=16;var a=Ss();for(Al===e&&jl===r||(Wl(),ks(e,r));;)try{_s();break}catch(t){Es(e,t)}if(na(),Ol.current=a,Nl=o,null!==Tl?r=0:(Al=null,jl=0,r=Il),0!=(Fl&Dl))ks(e,0);else if(0!==r){if(2===r&&(Nl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=zt(e))&&(r=Cs(e,n))),1===r)throw t=Ll,ks(e,0),ms(e,n),ps(e,$o()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Ns(e);break;case 3:if(ms(e,n),(62914560&n)===n&&10<(r=ql+500-$o())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){us(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Ns.bind(null,e),r);break}Ns(e);break;case 4:if(ms(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=$o()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*_l(n/1960))-n)){e.timeoutHandle=Wr(Ns.bind(null,e),n);break}Ns(e);break;default:throw Error(i(329))}}return ps(e,$o()),e.callbackNode===t?hs.bind(null,e):null}function ms(e,t){for(t&=~Bl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function ys(e){if(0!=(48&Nl))throw Error(i(327));if(js(),e===Al&&0!=(e.expiredLanes&jl)){var t=jl,n=Cs(e,t);0!=(Fl&Dl)&&(n=Cs(e,t=Ft(e,t)))}else n=Cs(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Nl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=zt(e))&&(n=Cs(e,t))),1===n)throw n=Ll,ks(e,0),ms(e,t),ps(e,$o()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ns(e),ps(e,$o()),null}function vs(e,t){var n=Nl;Nl|=1;try{return e(t)}finally{0===(Nl=n)&&(Wl(),Yo())}}function gs(e,t){var n=Nl;Nl&=-2,Nl|=8;try{return e(t)}finally{0===(Nl=n)&&(Wl(),Yo())}}function bs(e,t){co(Ml,Rl),Rl|=t,Fl|=t}function ws(){Rl=Ml.current,uo(Ml)}function ks(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ma(),uo(ho),uo(po),Qa();break;case 5:La(r);break;case 4:Ma();break;case 13:case 19:uo(Fa);break;case 10:ra(r);break;case 23:case 24:ws()}n=n.return}Al=e,Tl=$s(e.current,null),jl=Rl=Fl=t,Il=0,Ll=null,Bl=Dl=zl=0}function Es(e,t){for(;;){var n=Tl;try{if(na(),Xa.current=Ti,ni){for(var r=Za.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Ja=0,ti=ei=Za=null,ri=!1,Pl.current=null,null===n||null===n.return){Il=1,Ll=t,Tl=null;break}e:{var a=e,i=n.return,l=n,s=t;if(t=jl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Fa.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(u),d.updateQueue=v}else y.add(u);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=ca(-1,1);g.tag=2,fa(l,g)}l.lanes|=1;break e}s=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new sl,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var w=zs.bind(null,a,u,l);u.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Il&&(Il=2),s=il(s,l),d=i;do{switch(d.tag){case 3:a=s,d.flags|=4096,t&=-t,d.lanes|=t,da(d,ul(0,a,t));break e;case 1:a=s;var k=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Ql||!Ql.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,da(d,cl(d,a,t));break e}}d=d.return}while(null!==d)}Ps(n)}catch(e){t=e,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function Ss(){var e=Ol.current;return Ol.current=Ti,null===e?Ti:e}function Cs(e,t){var n=Nl;Nl|=16;var r=Ss();for(Al===e&&jl===t||ks(e,t);;)try{xs();break}catch(t){Es(e,t)}if(na(),Nl=n,Ol.current=r,null!==Tl)throw Error(i(261));return Al=null,jl=0,Il}function xs(){for(;null!==Tl;)Os(Tl)}function _s(){for(;null!==Tl&&!Po();)Os(Tl)}function Os(e){var t=Vl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?Ps(e):Tl=t,Pl.current=null}function Ps(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Rl)))return void(Tl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(Tl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===Il&&(Il=5)}function Ns(e){var t=Wo();return Ho(99,As.bind(null,e,t)),null}function As(e,t){do{js()}while(null!==Gl);if(0!=(48&Nl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<a;){var u=31-$t(a),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,a&=~c}if(null!==ts&&0==(24&r)&&ts.has(e)&&ts.delete(e),e===Al&&(Tl=Al=null,jl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Nl,Nl|=32,Pl.current=null,Br=Yt,yr(l=mr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,m=0,y=l,v=null;t:for(;;){for(var g;y!==s||0!==a&&3!==y.nodeType||(d=f+a),y!==u||0!==c&&3!==y.nodeType||(p=f+c),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)v=y,y=g;for(;;){if(y===l)break t;if(v===s&&++h===a&&(d=f),v===u&&++m===c&&(p=f),null!==(g=y.nextSibling))break;v=(y=v).parentNode}y=g}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;Ur={focusedElem:l,selectionRange:s},Yt=!1,ls=null,ss=!1,Hl=r;do{try{Ts()}catch(e){if(null===Hl)throw Error(i(330));Fs(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);ls=null,Hl=r;do{try{for(l=e;null!==Hl;){var b=Hl.flags;if(16&b&&ve(Hl.stateNode,""),128&b){var w=Hl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl(Hl),Hl.flags&=-3;break;case 6:bl(Hl),Hl.flags&=-3,Sl(Hl.alternate,Hl);break;case 1024:Hl.flags&=-1025;break;case 1028:Hl.flags&=-1025,Sl(Hl.alternate,Hl);break;case 4:Sl(Hl.alternate,Hl);break;case 8:El(l,s=Hl);var E=s.alternate;vl(s),null!==E&&vl(E)}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Fs(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);if(k=Ur,w=mr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==l&&yr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),s=b.textContent.length,E=Math.min(l.start,s),l=void 0===l.end?E:Math.min(l.end,s),!k.extend&&E>l&&(s=l,l=E,E=s),s=pr(b,E),a=pr(b,l),s&&a&&(1!==k.rangeCount||k.anchorNode!==s.node||k.anchorOffset!==s.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(s.node,s.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!Br,Ur=Br=null,e.current=n,Hl=r;do{try{for(b=e;null!==Hl;){var S=Hl.flags;if(36&S&&hl(b,Hl.alternate,Hl),128&S){w=void 0;var C=Hl.ref;if(null!==C){var x=Hl.stateNode;Hl.tag,w=x,"function"==typeof C?C(w):C.current=w}}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Fs(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);Hl=null,zo(),Nl=o}else e.current=n;if(Xl)Xl=!1,Gl=e,Jl=t;else for(Hl=r;null!==Hl;)t=Hl.nextEffect,Hl.nextEffect=null,8&Hl.flags&&((S=Hl).sibling=null,S.stateNode=null),Hl=t;if(0===(r=e.pendingLanes)&&(Ql=null),1===r?e===rs?ns++:(ns=0,rs=e):ns=0,n=n.stateNode,Co&&"function"==typeof Co.onCommitFiberRoot)try{Co.onCommitFiberRoot(So,n,void 0,64==(64&n.current.flags))}catch(e){}if(ps(e,$o()),Kl)throw Kl=!1,e=Yl,Yl=null,e;return 0!=(8&Nl)||Yo(),null}function Ts(){for(;null!==Hl;){var e=Hl.alternate;ss||null===ls||(0!=(8&Hl.flags)?Ze(Hl,ls)&&(ss=!0):13===Hl.tag&&xl(e,Hl)&&Ze(Hl,ls)&&(ss=!0));var t=Hl.flags;0!=(256&t)&&pl(e,Hl),0==(512&t)||Xl||(Xl=!0,Ko(97,(function(){return js(),null}))),Hl=Hl.nextEffect}}function js(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,Is)}return!1}function Rs(e,t){Zl.push(t,e),Xl||(Xl=!0,Ko(97,(function(){return js(),null})))}function Ms(e,t){es.push(t,e),Xl||(Xl=!0,Ko(97,(function(){return js(),null})))}function Is(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&Nl))throw Error(i(331));var t=Nl;Nl|=32;var n=es;es=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Fs(a,e)}}for(n=Zl,Zl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===a)throw Error(i(330));Fs(a,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Nl=t,Yo(),!0}function Ls(e,t,n){fa(e,t=ul(0,t=il(n,t),1)),t=us(),null!==(e=ds(e,1))&&(qt(e,1,t),ps(e,t))}function Fs(e,t){if(3===e.tag)Ls(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ls(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){var o=cl(n,e=il(t,e),1);if(fa(n,o),o=us(),null!==(n=ds(n,1)))qt(n,1,o),ps(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=us(),e.pingedLanes|=e.suspendedLanes&n,Al===e&&(jl&n)===n&&(4===Il||3===Il&&(62914560&jl)===jl&&500>$o()-ql?ks(e,0):Bl|=n),ps(e,t)}function Ds(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===as&&(as=Fl),0===(t=Bt(62914560&~as))&&(t=4194304))),n=us(),null!==(e=ds(e,t))&&(qt(e,t,n),ps(e,n))}function Bs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Us(e,t,n,r){return new Bs(e,t,n,r)}function qs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $s(e,t){var n=e.alternate;return null===n?((n=Us(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ws(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)qs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return Vs(n.children,o,a,t);case L:l=8,o|=16;break;case x:l=8,o|=1;break;case _:return(e=Us(12,n,t,8|o)).elementType=_,e.type=_,e.lanes=a,e;case A:return(e=Us(13,n,t,o)).type=A,e.elementType=A,e.lanes=a,e;case T:return(e=Us(19,n,t,o)).elementType=T,e.lanes=a,e;case F:return Hs(n,o,a,t);case z:return(e=Us(24,n,t,o)).elementType=z,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case P:l=9;break e;case N:l=11;break e;case j:l=14;break e;case R:l=16,r=null;break e;case M:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Us(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Vs(e,t,n,r){return(e=Us(7,e,r,t)).lanes=n,e}function Hs(e,t,n,r){return(e=Us(23,e,r,t)).elementType=F,e.lanes=n,e}function Ks(e,t,n){return(e=Us(6,e,null,t)).lanes=n,e}function Ys(e,t,n){return(t=Us(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Xs(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gs(e,t,n,r){var o=t.current,a=us(),l=cs(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(vo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var u=n.type;if(vo(u)){n=wo(n,u,s);break e}}n=s}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fa(o,t),fs(o,l,a),l}function Js(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Zs(e,t),(e=e.alternate)&&Zs(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Qs(e,t,null!=n&&!0===n.hydrate),t=Us(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,sa(t),e[Zr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Js(i);l.call(e)}}Gs(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Js(i);s.call(e)}}gs((function(){Gs(t,i,e,o)}))}return Js(i)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(i(200));return Xs(e,t,null,n)}Vl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Li=!0;else{if(0==(n&r)){switch(Li=!1,t.tag){case 3:Hi(t),Ka();break;case 5:Ia(t);break;case 1:vo(t.type)&&ko(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Jo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(co(Fa,1&Fa.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Fa,1&Fa.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Fa,Fa.current),r)break;return null;case 23:case 24:return t.lanes=0,Ui(e,t,n)}return nl(e,t,n)}Li=0!=(16384&e.flags)}else Li=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=yo(t,po.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;ko(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,sa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ya(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternals=t,ka(t,r,e,n),t=Vi(null,t,r,!0,a,n)}else t.tag=0,Fi(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return qs(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===j)return 14}return 2}(o),e=Go(o,e),a){case 0:t=$i(null,t,o,e,n);break e;case 1:t=Wi(null,t,o,e,n);break e;case 11:t=zi(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Go(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,$i(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wi(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if(Hi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ua(e,t),pa(t,r,null,n),(r=t.memoizedState.element)===o)Ka(),t=nl(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Ba=Kr(t.stateNode.containerInfo.firstChild),Da=t,a=Ua=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ya.push(a);for(n=Oa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fi(e,t,r,n),Ka();t=t.child}return t;case 5:return Ia(t),null===e&&Wa(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,$r(r,o)?l=null:null!==a&&$r(r,a)&&(t.flags|=16),qi(e,t),Fi(e,t,l,n),t.child;case 6:return null===e&&Wa(t),null;case 13:return Gi(e,t,n);case 4:return Ra(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=_a(t,null,r,n):Fi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Fi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fi(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var s=t.type._context;if(co(Jo,s._currentValue),s._currentValue=a,null!==l)if(s=l.value,0==(a=ur(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!ho.current){t=nl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===s.tag&&((c=ca(-1,n&-n)).tag=2,fa(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),oa(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Fi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,Fi(e,t,r,n),t.child;case 14:return a=Go(o=t.type,t.pendingProps),Di(e,t,o,a=Go(o.type,a),r,n);case 15:return Bi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,vo(r)?(e=!0,ko(t)):e=!1,aa(t,n),ba(t,r,o),ka(t,r,o,n),Vi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Ui(e,t,n)}throw Error(i(156,t.tag))},tu.prototype.render=function(e){Gs(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gs(null,e,null,(function(){t[Zr]=null}))},et=function(e){13===e.tag&&(fs(e,4,us()),eu(e,4))},tt=function(e){13===e.tag&&(fs(e,67108864,us()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=us(),n=cs(e);fs(e,n,t),eu(e,n)}},rt=function(e,t){return t()},_e=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));G(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},je=vs,Re=function(e,t,n,r,o){var a=Nl;Nl|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(Nl=a)&&(Wl(),Yo())}},Me=function(){0==(49&Nl)&&(function(){if(null!==ts){var e=ts;ts=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ps(e,$o())}))}Yo()}(),js())},Ie=function(e,t){var n=Nl;Nl|=2;try{return e(t)}finally{0===(Nl=n)&&(Wl(),Yo())}};var au={Events:[no,ro,oo,Ae,Te,js,{current:!1}]},iu={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lu={bundleType:iu.bundleType,version:iu.version,rendererPackageName:iu.rendererPackageName,rendererConfig:iu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:iu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var su=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!su.isDisabled&&su.supportsFiber)try{So=su.inject(lu),Co=su}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=au,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Nl;if(0!=(48&n))return e(t);Nl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Nl=n,Yo()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(i(40));return!!e._reactRootContainer&&(gs((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Zr]=null}))})),!0)},t.unstable_batchedUpdates=vs,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},8228:function(e,t,n){var r;e.exports=(r=n(7294),function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(4)},function(e,t,n){e.exports=n(6)()},function(e,t){e.exports=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return decodeURIComponent(e.replace(new RegExp("^(?:.*[&\\?]"+encodeURIComponent(t).replace(/[\.\+\*]/g,"\\$&")+"(?:\\=([^&]*))?)?.*$","i"),"$1"))}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}Object.defineProperty(t,"__esModule",{value:!0});var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),s=r(n(2)),u=r(n(1)),c=r(n(5)),f=r(n(3)),d=function(e){function t(){var e,n,r;o(this,t);for(var l=arguments.length,s=Array(l),u=0;u<l;u++)s[u]=arguments[u];return n=r=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),r.state={isSdkLoaded:!1,isProcessing:!1},r.responseApi=function(e){window.FB.api("/me",{locale:r.props.language,fields:r.props.fields},(function(t){i(t,e),r.props.callback(t)}))},r.checkLoginState=function(e){r.setStateIfMounted({isProcessing:!1}),e.authResponse?r.responseApi(e.authResponse):r.props.onFailure?r.props.onFailure({status:e.status}):r.props.callback({status:e.status})},r.checkLoginAfterRefresh=function(e){"connected"===e.status?r.checkLoginState(e):window.FB.login((function(e){return r.checkLoginState(e)}),!0)},r.click=function(e){if(r.state.isSdkLoaded&&!r.state.isProcessing&&!r.props.isDisabled){r.setState({isProcessing:!0});var t=r.props,n=t.scope,o=t.appId,a=t.onClick,i=t.returnScopes,l=t.responseType,s=t.redirectUri,u=t.disableMobileRedirect,f=t.authType,d=t.state;if("function"!=typeof a||(a(e),!e.defaultPrevented)){var p={client_id:o,redirect_uri:s,state:d,return_scopes:i,scope:n,response_type:l,auth_type:f};if(r.props.isMobile&&!u)window.location.href="https://www.facebook.com/dialog/oauth"+(0,c.default)(p);else{if(!window.FB)return void(r.props.onFailure&&r.props.onFailure({status:"facebookNotLoaded"}));window.FB.login(r.checkLoginState,{scope:n,return_scopes:i,auth_type:p.auth_type})}}}},a(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"componentDidMount",value:function(){if(this._isMounted=!0,document.getElementById("facebook-jssdk"))this.sdkLoaded();else{this.setFbAsyncInit(),this.loadSdkAsynchronously();var e=document.getElementById("fb-root");e||((e=document.createElement("div")).id="fb-root",document.body.appendChild(e))}}},{key:"componentWillReceiveProps",value:function(e){this.state.isSdkLoaded&&e.autoLoad&&!this.props.autoLoad&&window.FB.getLoginStatus(this.checkLoginAfterRefresh)}},{key:"componentWillUnmount",value:function(){this._isMounted=!1}},{key:"setStateIfMounted",value:function(e){this._isMounted&&this.setState(e)}},{key:"setFbAsyncInit",value:function(){var e=this,t=this.props,n=t.appId,r=t.xfbml,o=t.cookie,a=t.version,i=t.autoLoad;window.fbAsyncInit=function(){window.FB.init({version:"v"+a,appId:n,xfbml:r,cookie:o}),e.setStateIfMounted({isSdkLoaded:!0}),(i||e.isRedirectedFromFb())&&window.FB.getLoginStatus(e.checkLoginAfterRefresh)}}},{key:"isRedirectedFromFb",value:function(){var e=window.location.search;return(0,f.default)(e,"code")||(0,f.default)(e,"granted_scopes")}},{key:"sdkLoaded",value:function(){this.setState({isSdkLoaded:!0})}},{key:"loadSdkAsynchronously",value:function(){var e=this.props.language;!function(t,n,r){var o=t.getElementsByTagName(n)[0],a=o,i=o;t.getElementById(r)||((i=t.createElement(n)).id=r,i.src="https://connect.facebook.net/"+e+"/sdk.js",a.parentNode.insertBefore(i,a))}(document,"script","facebook-jssdk")}},{key:"render",value:function(){if(!this.props.render)throw new Error("ReactFacebookLogin requires a render prop to render");var e={onClick:this.click,isDisabled:!!this.props.isDisabled,isProcessing:this.state.isProcessing,isSdkLoaded:this.state.isSdkLoaded};return this.props.render(e)}}]),t}(s.default.Component);d.propTypes={isDisabled:u.default.bool,callback:u.default.func.isRequired,appId:u.default.string.isRequired,xfbml:u.default.bool,cookie:u.default.bool,authType:u.default.string,scope:u.default.string,state:u.default.string,responseType:u.default.string,returnScopes:u.default.bool,redirectUri:u.default.string,autoLoad:u.default.bool,disableMobileRedirect:u.default.bool,isMobile:u.default.bool,fields:u.default.string,version:u.default.string,language:u.default.string,onClick:u.default.func,onFailure:u.default.func,render:u.default.func.isRequired},d.defaultProps={redirectUri:"undefined"!=typeof window?window.location.href:"/",scope:"public_profile,email",returnScopes:!1,xfbml:!1,cookie:!1,authType:"",fields:"name",version:"2.3",language:"en_US",disableMobileRedirect:!1,isMobile:function(){var e=!1;try{e=!!(window.navigator&&window.navigator.standalone||navigator.userAgent.match("CriOS")||navigator.userAgent.match(/mobile/i))}catch(e){}return e}(),onFailure:null,state:"facebookdirect",responseType:"code"},t.default=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}},function(e,t,n){"use strict";function r(){}var o=n(7);e.exports=function(){function e(e,t,n,r,a,i){if(i!==o){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}]))},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case d:case y:case m:case s:return e;default:return t}}case o:return t}}}function E(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return E(e)||k(e)===c},t.isConcurrentMode=E,t.isContextConsumer=function(e){return k(e)===u},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===y},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=k},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},8129:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.fill)&&void 0!==n?n:"#fff",c=null!==(o=e.stroke)&&void 0!==o?o:"transparent",f=e.fillOpacity,d=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:80,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:55}),{viewBox:"0 0 55 80"}),a.default.createElement("g",{transform:"matrix(1 0 0 -1 0 80)"},a.default.createElement("rect",r({width:10,height:20,rx:3},{fill:u,stroke:c,fillOpacity:f,strokeOpacity:d}),a.default.createElement("animate",{attributeName:"height",begin:"0s",dur:4.3/s+"s",values:"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:15,width:10,height:80,rx:3},{fill:u,stroke:c,fillOpacity:f,strokeOpacity:d}),a.default.createElement("animate",{attributeName:"height",begin:"0s",dur:2/s+"s",values:"80;55;33;5;75;23;73;33;12;14;60;80",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:30,width:10,height:50,rx:3},{fill:u,stroke:c,fillOpacity:f,strokeOpacity:d}),a.default.createElement("animate",{attributeName:"height",begin:"0s",dur:1.4/s+"s",values:"50;34;78;23;56;23;34;76;80;54;21;50",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:45,width:10,height:30,rx:3},{fill:u,stroke:c,fillOpacity:f,strokeOpacity:d}),a.default.createElement("animate",{attributeName:"height",begin:"0s",dur:2/s+"s",values:"30;45;13;80;56;72;45;76;34;23;67;30",calcMode:"linear",repeatCount:"indefinite"}))))}},7766:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=e.fill,u=null!==(n=e.stroke)&&void 0!==n?n:"#fff",c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:57,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:57}),{viewBox:"0 0 57 57"}),a.default.createElement("g",{transform:"translate(1 1)",strokeWidth:2,fill:"none",fillRule:"evenodd"},a.default.createElement("circle",r({cx:5,cy:50,r:5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"cy",begin:"0s",dur:2.2/l+"s",values:"50;5;50;50",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"cx",begin:"0s",dur:2.2/l+"s",values:"5;27;49;5",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:27,cy:5,r:5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"cy",begin:"0s",dur:2.2/l+"s",from:5,to:5,values:"5;50;50;5",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"cx",begin:"0s",dur:2.2/l+"s",from:27,to:27,values:"27;49;5;27",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:49,cy:50,r:5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"cy",begin:"0s",dur:2.2/l+"s",values:"50;50;5;50",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"cx",from:49,to:49,begin:"0s",dur:2.2/l+"s",values:"49;5;27;49",calcMode:"linear",repeatCount:"indefinite"}))))}},6143:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=null!==(n=e.fill)&&void 0!==n?n:"#fff",u=e.stroke,c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:140,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:135}),{viewBox:"0 0 135 140"}),a.default.createElement("rect",r({y:10,width:15,height:120,rx:6},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"height",begin:"0.5s",dur:1/l+"s",values:"120;110;100;90;80;70;60;50;40;140;120",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"y",begin:"0.5s",dur:1/l+"s",values:"10;15;20;25;30;35;40;45;50;0;10",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:30,y:10,width:15,height:120,rx:6},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"height",begin:"0.25s",dur:1/l+"s",values:"120;110;100;90;80;70;60;50;40;140;120",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"y",begin:"0.25s",dur:1/l+"s",values:"10;15;20;25;30;35;40;45;50;0;10",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:60,width:15,height:140,rx:6},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"height",begin:"0s",dur:1/l+"s",values:"120;110;100;90;80;70;60;50;40;140;120",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"y",begin:"0s",dur:1/l+"s",values:"10;15;20;25;30;35;40;45;50;0;10",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:90,y:10,width:15,height:120,rx:6},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"height",begin:"0.25s",dur:1/l+"s",values:"120;110;100;90;80;70;60;50;40;140;120",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"y",begin:"0.25s",dur:1/l+"s",values:"10;15;20;25;30;35;40;45;50;0;10",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("rect",r({x:120,y:10,width:15,height:120,rx:6},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"height",begin:"0.5s",dur:1/l+"s",values:"120;110;100;90;80;70;60;50;40;140;120",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"y",begin:"0.5s",dur:1/l+"s",values:"10;15;20;25;30;35;40;45;50;0;10",calcMode:"linear",repeatCount:"indefinite"})))}},9389:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=null!==(n=e.fill)&&void 0!==n?n:"#fff",u=e.stroke,c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:135,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:135}),{viewBox:"0 0 135 135"}),a.default.createElement("path",r({d:"M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z"},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 67 67",to:"-360 67 67",dur:2.5/l+"s",repeatCount:"indefinite"})),a.default.createElement("path",r({d:"M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z"},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 67 67",to:"360 67 67",dur:8/l+"s",repeatCount:"indefinite"})))}},9354:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=null!==(n=e.fill)&&void 0!==n?n:"#fff",u=e.stroke,c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:105,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:105}),{viewBox:"0 0 105 105"}),a.default.createElement("circle",r({cx:12.5,cy:12.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:12.5,cy:52.5,r:12.5,fillOpacity:.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"100ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:52.5,cy:12.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"300ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:52.5,cy:52.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"600ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:92.5,cy:12.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"800ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:92.5,cy:52.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"400ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:12.5,cy:92.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"700ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:52.5,cy:92.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"500ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:92.5,cy:92.5,r:12.5},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"200ms",dur:1/l+"s",values:"1;.2;1",calcMode:"linear",repeatCount:"indefinite"})))}},9892:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.fill)&&void 0!==n?n:"#fff",c=e.stroke,f=null!==(o=e.fillOpacity)&&void 0!==o?o:.5;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:64,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:140}),{viewBox:"0 0 140 64"}),a.default.createElement("path",r({d:"M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.717-6.002 11.47-7.65 17.305-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z",fillOpacity:f},{fill:u,stroke:c}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.4/s+"s",values:"0.5;1;0.5",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("path",r({d:"M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.592-2.32 17.307 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z",fillOpacity:f},{fill:u,stroke:c}),a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0.7s",dur:1.4/s+"s",values:"0.5;1;0.5",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("path",r({d:"M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z"},{fill:u,stroke:c})))}},4978:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.stroke)&&void 0!==n?n:"#fff",c=null!==(o=e.strokeWidth)&&void 0!==o?o:2,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:38,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:38}),{viewBox:"0 0 38 38",overflow:"visible"}),a.default.createElement("g",r({transform:"translate(1 1)",fill:"none",fillRule:"evenodd"},{stroke:u,strokeWidth:c,strokeOpacity:f}),a.default.createElement("circle",{strokeOpacity:.5,cx:18,cy:18,r:18}),a.default.createElement("path",{d:"M36 18c0-9.94-8.06-18-18-18"},a.default.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:1/s+"s",repeatCount:"indefinite"}))))}},4529:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.stroke)&&void 0!==n?n:"#fff",c=null!==(o=e.strokeWidth)&&void 0!==o?o:2,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:44,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:44}),{viewBox:"0 0 44 44"}),a.default.createElement("g",r({fill:"none",fillRule:"evenodd"},{stroke:u,strokeWidth:c,strokeOpacity:f}),a.default.createElement("circle",{cx:22,cy:22,r:1},a.default.createElement("animate",{attributeName:"r",begin:"0s",dur:1.8/s+"s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-opacity",begin:"0s",dur:1.8/s+"s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:22,cy:22,r:1},a.default.createElement("animate",{attributeName:"r",begin:"-0.9s",dur:1.8/s+"s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-opacity",begin:"-0.9s",dur:1.8/s+"s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"}))))}},6757:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.stroke)&&void 0!==n?n:"#fff",c=null!==(o=e.strokeWidth)&&void 0!==o?o:2,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:45,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:45}),{viewBox:"0 0 45 45"}),a.default.createElement("g",r({fill:"none",fillRule:"evenodd",transform:"translate(1 1)"},{stroke:u,strokeWidth:c,strokeOpacity:f}),a.default.createElement("circle",{cx:22,cy:22,r:6},a.default.createElement("animate",{attributeName:"r",begin:"1.5s",dur:3/s+"s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-opacity",begin:"1.5s",dur:3/s+"s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-width",begin:"1.5s",dur:3/s+"s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:22,cy:22,r:6},a.default.createElement("animate",{attributeName:"r",begin:"3s",dur:3/s+"s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-opacity",begin:"3s",dur:3/s+"s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"stroke-width",begin:"3s",dur:3/s+"s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:22,cy:22,r:8},a.default.createElement("animate",{attributeName:"r",begin:"0s",dur:1.5/s+"s",values:"6;1;2;3;4;5;6",calcMode:"linear",repeatCount:"indefinite"}))))}},8582:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=null!==(n=e.fill)&&void 0!==n?n:"#fff",u=e.stroke,c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:58,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:58}),{viewBox:"0 0 58 58"}),a.default.createElement("g",r({transform:"translate(2 1)",fillRule:"evenodd"},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("circle",{cx:42.601,cy:11.462,r:5},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"1;0;0;0;0;0;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:49.063,cy:27.063,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;1;0;0;0;0;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:42.601,cy:42.663,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;1;0;0;0;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:27,cy:49.125,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;0;1;0;0;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:11.399,cy:42.663,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;0;0;1;0;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:4.938,cy:27.063,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;0;0;0;1;0;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:11.399,cy:11.462,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;0;0;0;0;1;0",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:27,cy:5,r:5,fillOpacity:0},a.default.createElement("animate",{attributeName:"fill-opacity",begin:"0s",dur:1.3/l+"s",values:"0;0;0;0;0;0;0;1",calcMode:"linear",repeatCount:"indefinite"}))))}},151:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l,s=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),u=null!==(n=e.stroke)&&void 0!==n?n:"#fff",c=null!==(o=e.strokeWidth)&&void 0!==o?o:2,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(i=e.height)&&void 0!==i?i:38,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(l=e.width)&&void 0!==l?l:38}),{viewBox:"0 0 38 38"}),a.default.createElement("defs",null,a.default.createElement("linearGradient",{x1:"8.042%",y1:"0%",x2:"65.682%",y2:"23.865%",id:"prefix__a"},a.default.createElement("stop",{stopOpacity:0,offset:"0%"}),a.default.createElement("stop",{stopOpacity:.631,offset:"63.146%"}),a.default.createElement("stop",{offset:"100%"}))),a.default.createElement("g",{transform:"translate(1 1)",fill:"none",fillRule:"evenodd"},a.default.createElement("path",r({d:"M36 18c0-9.94-8.06-18-18-18"},{stroke:u,strokeWidth:c,strokeOpacity:f}),a.default.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:.9/s+"s",repeatCount:"indefinite"})),a.default.createElement("circle",{cx:36,cy:18,r:1},a.default.createElement("animateTransform",{attributeName:"transform",type:"rotate",from:"0 18 18",to:"360 18 18",dur:.9/s+"s",repeatCount:"indefinite"}))))}},1841:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(7294));t.default=function(e){var t,n,o,i,l=Number(String(null!==(t=e.speed)&&void 0!==t?t:1)),s=null!==(n=e.fill)&&void 0!==n?n:"#fff",u=e.stroke,c=e.fillOpacity,f=e.strokeOpacity;return a.default.createElement("svg",r({},r(r({},e),{className:e.className?"icon-loading "+e.className:"icon-loading",fill:void 0,fillOpacity:void 0,height:null!==(o=e.height)&&void 0!==o?o:30,speed:void 0,stroke:void 0,strokeOpacity:void 0,strokeWidth:void 0,width:null!==(i=e.width)&&void 0!==i?i:120}),{viewBox:"0 0 120 30"}),a.default.createElement("circle",r({cx:15,cy:15,r:15},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"r",from:15,to:15,begin:"0s",dur:.8/l+"s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"fill-opacity",from:1,to:1,begin:"0s",dur:.8/l+"s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:60,cy:15,r:9,fillOpacity:.3},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"r",from:9,to:9,begin:"0s",dur:.8/l+"s",values:"9;15;9",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"fill-opacity",from:.5,to:.5,begin:"0s",dur:.8/l+"s",values:".5;1;.5",calcMode:"linear",repeatCount:"indefinite"})),a.default.createElement("circle",r({cx:105,cy:15,r:15},{fill:s,stroke:u,fillOpacity:c,strokeOpacity:f}),a.default.createElement("animate",{attributeName:"r",from:15,to:15,begin:"0s",dur:.8/l+"s",values:"15;9;15",calcMode:"linear",repeatCount:"indefinite"}),a.default.createElement("animate",{attributeName:"fill-opacity",from:1,to:1,begin:"0s",dur:.8/l+"s",values:"1;.5;1",calcMode:"linear",repeatCount:"indefinite"})))}},4236:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ThreeDots=t.TailSpin=t.SpinningCircles=t.Rings=t.Puff=t.Oval=t.Hearts=t.Grid=t.Circles=t.Bars=t.BallTriangle=t.Audio=void 0;var o=r(n(8129)),a=r(n(7766)),i=r(n(6143)),l=r(n(9389)),s=r(n(9354)),u=r(n(9892)),c=r(n(4978)),f=r(n(4529)),d=r(n(6757)),p=r(n(8582)),h=r(n(151)),m=r(n(1841));t.Audio=o.default,t.BallTriangle=a.default,t.Bars=i.default,t.Circles=l.default,t.Grid=s.default,t.Hearts=u.default,t.Oval=c.default,t.Puff=f.default,t.Rings=d.default,t.SpinningCircles=p.default,t.TailSpin=h.default,t.ThreeDots=m.default;var y={Audio:t.Audio,BallTriangle:t.BallTriangle,Bars:t.Bars,Circles:t.Circles,Grid:t.Grid,Hearts:t.Hearts,Oval:t.Oval,Puff:t.Puff,Rings:t.Rings,SpinningCircles:t.SpinningCircles,TailSpin:t.TailSpin,ThreeDots:t.ThreeDots};t.default=y},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var b=g.prototype=new v;b.constructor=g,r(b,y.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case a:s=!0}}if(s)return i=i(s=e),e=""===r?"."+_(s,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),O(i,t,n,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+_(l=e[u],u);s+=O(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=O(l=l.value,t,n,c=r+_(l,u++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function P(e,t,n){if(null==e)return e;var r=[],o=0;return O(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var A={current:null};function T(){var e=A.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)k.call(t,c)&&!E.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];a.children=u}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,v=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();b=e+g;try{y(!0,e)?k.postMessage(null):(m=!1,y=null)}catch(e){throw k.postMessage(null),e}}else m=!1},n=function(e){y=e,m||(m=!0,k.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,s=e[l];if(void 0!==i&&0>x(i,n))void 0!==s&&0>x(s,i)?(e[r]=s,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==s&&0>x(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],O=[],P=1,N=null,A=3,T=!1,j=!1,R=!1;function M(e){for(var t=S(O);null!==t;){if(null===t.callback)C(O);else{if(!(t.startTime<=e))break;C(O),t.sortIndex=t.expirationTime,E(_,t)}t=S(O)}}function I(e){if(R=!1,M(e),!j)if(null!==S(_))j=!0,n(L);else{var t=S(O);null!==t&&r(I,t.startTime-e)}}function L(e,n){j=!1,R&&(R=!1,o()),T=!0;var a=A;try{for(M(n),N=S(_);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=N.callback;if("function"==typeof i){N.callback=null,A=N.priorityLevel;var l=i(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?N.callback=l:N===S(_)&&C(_),M(n)}else C(_);N=S(_)}if(null!==N)var s=!0;else{var u=S(O);null!==u&&r(I,u.startTime-n),s=!1}return s}finally{N=null,A=a,T=!1}}var F=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||T||(j=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return S(_)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:P++,callback:a,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>l?(e.sortIndex=i,E(O,e),null===S(_)&&e===S(O)&&(R?o():R=!0,r(I,i-l))):(e.sortIndex=s,E(_,e),j||T||(j=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},6774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),s=0;s<a.length;s++){var u=a[s];if(!l(u))return!1;var c=e[u],f=t[u];if(!1===(o=n?n.call(r,c,f,u):void 0)||void 0===o&&c!==f)return!1}return!0}},7719:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(2986);function o(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=o(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)e.hasOwnProperty(r)&&(n[r]=o(e[r],t));return n}return e}function a(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=a(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=a(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=o(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=a(e.data,t),e.attachments=void 0,e}},5485:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(8767),o=n(7719),a=n(2986),i=n(1227)("socket.io-parser");var l;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(l=t.PacketType||(t.PacketType={})),t.Encoder=class{encode(e){return i("encoding packet %j",e),e.type!==l.EVENT&&e.type!==l.ACK||!a.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===l.EVENT?l.BINARY_EVENT:l.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==l.BINARY_EVENT&&e.type!==l.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),i("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=o.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class s extends r{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===l.BINARY_EVENT||t.type===l.BINARY_ACK?(this.reconstructor=new u(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!a.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===l[n.type])throw new Error("unknown packet type "+n.type);if(n.type===l.BINARY_EVENT||n.type===l.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!s.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return i("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case l.CONNECT:return"object"==typeof t;case l.DISCONNECT:return void 0===t;case l.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case l.EVENT:case l.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case l.ACK:case l.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=s;class u{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function i(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||o&&e instanceof Blob||a&&e instanceof File}t.isBinary=i,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(i(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,a=0;function i(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function l(){var e=i(+new Date);return e!==t?(o=0,t=e):e+"."+i(o++)}for(;a<64;a++)r[n[a]]=a;l.encode=i,l.decode=function(e){var t=0;for(a=0;a<e.length;a++)t=64*t+r[e.charAt(a)];return t},e.exports=l},4428:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.io=t.Socket=t.Manager=t.protocol=void 0;const r=n(5253),o=n(6530),a=n(1227)("socket.io-client");e.exports=t=l;const i=t.managers={};function l(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=(0,r.url)(e,t.path||"/socket.io"),l=n.source,s=n.id,u=n.path,c=i[s]&&u in i[s].nsps;let f;return t.forceNew||t["force new connection"]||!1===t.multiplex||c?(a("ignoring socket cache for %s",l),f=new o.Manager(l,t)):(i[s]||(a("new io instance for %s",l),i[s]=new o.Manager(l,t)),f=i[s]),n.query&&!t.query&&(t.query=n.queryKey),f.socket(n.path,t)}t.io=l;var s=n(5485);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return s.protocol}}),t.connect=l;var u=n(6530);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return u.Manager}});var c=n(7055);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return c.Socket}}),t.default=l},6530:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=n(5983),o=n(6839),a=n(7055),i=n(5485),l=n(3598),s=n(3010),u=n(7204),c=n(1227)("socket.io-client:manager");class f extends u.StrictEventEmitter{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,(0,o.installTimerFunctions)(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new s({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||i;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(c("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const o=(0,l.on)(t,"open",(function(){n.onopen(),e&&e()})),a=(0,l.on)(t,"error",(t=>{c("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;c("connect attempt will timeout after %d",e),0===e&&o();const n=this.setTimeoutFn((()=>{c("connect attempt timed out after %d",e),o(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(o),this.subs.push(a),this}connect(e){return this.open(e)}onopen(){c("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push((0,l.on)(e,"ping",this.onping.bind(this)),(0,l.on)(e,"data",this.ondata.bind(this)),(0,l.on)(e,"error",this.onerror.bind(this)),(0,l.on)(e,"close",this.onclose.bind(this)),(0,l.on)(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){c("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new a.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void c("socket %s is still active, skipping close",e);this._close()}_packet(e){c("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){c("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){c("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){c("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(c("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(c("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(c("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=f},3598:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},7055:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const r=n(5485),o=n(3598),a=n(7204),i=n(1227)("socket.io-client:socket"),l=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class s extends a.StrictEventEmitter{constructor(e,t,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[(0,o.on)(e,"open",this.onopen.bind(this)),(0,o.on)(e,"packet",this.onpacket.bind(this)),(0,o.on)(e,"error",this.onerror.bind(this)),(0,o.on)(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(l.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:r.PacketType.EVENT,data:t,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(i("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++);const o=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||o&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):i("discard packet as the transport is not currently writable"),this.flags={},this}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){i("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:r.PacketType.CONNECT,data:e})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){i("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case r.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(e);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(e);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];i("emitting event %j",t),null!=e.id&&(i("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...o){n||(n=!0,i("sending ack %j",o),t.packet({type:r.PacketType.ACK,id:e,data:o}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(i("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):i("bad ack %s",e.id)}onconnect(e){i("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){i("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(i("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}t.Socket=s},7204:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;const r=n(8767);t.StrictEventEmitter=class extends r{on(e,t){return super.on(e,t),this}once(e,t){return super.once(e,t),this}emit(e,...t){return super.emit(e,...t),this}emitReserved(e,...t){return super.emit(e,...t),this}listeners(e){return super.listeners(e)}}},5253:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const r=n(4187),o=n(1227)("socket.io-client:url");t.url=function(e,t="",n){let a=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),a=r(e)),a.port||(/^(http|ws)$/.test(a.protocol)?a.port="80":/^(http|ws)s$/.test(a.protocol)&&(a.port="443")),a.path=a.path||"/";const i=-1!==a.host.indexOf(":")?"["+a.host+"]":a.host;return a.id=a.protocol+"://"+i+":"+a.port+t,a.href=a.protocol+"://"+i+(n&&n.port===a.port?"":":"+a.port),a}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(7294),t=n(3935),r=n(5697),o=n.n(r),a=e.createContext(null),i=function(e){e()},l=function(){return i},s={notify:function(){},get:function(){return[]}};function u(e,t){var n,r=s;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=l(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=s)},getListeners:function(){return r}};return i}var c="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;const f=function(t){var n=t.store,r=t.context,o=t.children,i=(0,e.useMemo)((function(){var e=u(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),l=(0,e.useMemo)((function(){return n.getState()}),[n]);c((function(){var e=i.subscription;return e.trySubscribe(),l!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,l]);var s=r||a;return e.createElement(s.Provider,{value:i},o)};function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var h=n(8679),m=n.n(h),y=n(9864),v=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],g=["reactReduxForwardedRef"],b=[],w=[null,null];function k(e,t){var n=e[1];return[t.payload,n+1]}function E(e,t,n){c((function(){return e.apply(void 0,t)}),n)}function S(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function C(e,t,n,r,o,a,i,l,s,u){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||s():(a.current=e,l.current=e,i.current=!0,u({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var x=function(){return[null,0]};function _(t,n){void 0===n&&(n={});var r=n,o=r.getDisplayName,i=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,l=r.methodName,s=void 0===l?"connectAdvanced":l,c=r.renderCountProp,f=void 0===c?void 0:c,h=r.shouldHandleStateChanges,_=void 0===h||h,O=r.storeKey,P=void 0===O?"store":O,N=(r.withRef,r.forwardRef),A=void 0!==N&&N,T=r.context,j=void 0===T?a:T,R=p(r,v),M=j;return function(n){var r=n.displayName||n.name||"Component",o=i(r),a=d({},R,{getDisplayName:i,methodName:s,renderCountProp:f,shouldHandleStateChanges:_,storeKey:P,displayName:o,wrappedComponentName:r,WrappedComponent:n}),l=R.pure,c=l?e.useMemo:function(e){return e()};function h(r){var o=(0,e.useMemo)((function(){var e=r.reactReduxForwardedRef,t=p(r,g);return[r.context,e,t]}),[r]),i=o[0],l=o[1],s=o[2],f=(0,e.useMemo)((function(){return i&&i.Consumer&&(0,y.isContextConsumer)(e.createElement(i.Consumer,null))?i:M}),[i,M]),h=(0,e.useContext)(f),m=Boolean(r.store)&&Boolean(r.store.getState)&&Boolean(r.store.dispatch);Boolean(h)&&Boolean(h.store);var v=m?r.store:h.store,O=(0,e.useMemo)((function(){return function(e){return t(e.dispatch,a)}(v)}),[v]),P=(0,e.useMemo)((function(){if(!_)return w;var e=u(v,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[v,m,h]),N=P[0],A=P[1],T=(0,e.useMemo)((function(){return m?h:d({},h,{subscription:N})}),[m,h,N]),j=(0,e.useReducer)(k,b,x),R=j[0][0],I=j[1];if(R&&R.error)throw R.error;var L=(0,e.useRef)(),F=(0,e.useRef)(s),z=(0,e.useRef)(),D=(0,e.useRef)(!1),B=c((function(){return z.current&&s===F.current?z.current:O(v.getState(),s)}),[v,R,s]);E(S,[F,L,D,s,B,z,A]),E(C,[_,v,N,O,F,L,D,z,A,I],[v,N,O]);var U=(0,e.useMemo)((function(){return e.createElement(n,d({},B,{ref:l}))}),[l,n,B]);return(0,e.useMemo)((function(){return _?e.createElement(f.Provider,{value:T},U):U}),[f,U,T])}var v=l?e.memo(h):h;if(v.WrappedComponent=n,v.displayName=h.displayName=o,A){var O=e.forwardRef((function(t,n){return e.createElement(v,d({},t,{reactReduxForwardedRef:n}))}));return O.displayName=o,O.WrappedComponent=n,m()(O,n)}return m()(v,n)}}function O(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function P(e,t){if(O(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!O(e[n[o]],t[n[o]]))return!1;return!0}function N(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function A(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function T(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=A(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=A(o),o=r(t,n)),o},r}}const j=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:N((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?N((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}],R=[function(e){return"function"==typeof e?T(e):void 0},function(e){return e?void 0:N((function(){return{}}))}];function M(e,t,n){return d({},n,e,t)}const I=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,l){var s=e(t,n,l);return i?o&&a(s,r)||(r=s):(i=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return M}}];var L=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function F(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function z(e,t,n,r,o){var a,i,l,s,u,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,h){return p?function(o,p){var h,m,y=!f(p,i),v=!c(o,a);return a=o,i=p,y&&v?(l=e(a,i),t.dependsOnOwnProps&&(s=t(r,i)),u=n(l,s,i)):y?(e.dependsOnOwnProps&&(l=e(a,i)),t.dependsOnOwnProps&&(s=t(r,i)),u=n(l,s,i)):v?(h=e(a,i),m=!d(h,l),l=h,m&&(u=n(l,s,i)),u):u}(o,h):(l=e(a=o,i=h),s=t(r,i),u=n(l,s,i),p=!0,u)}}function D(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=p(t,L),i=n(e,a),l=r(e,a),s=o(e,a);return(a.pure?z:F)(i,l,s,e,a)}var B=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function U(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}function $(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?_:n,o=t.mapStateToPropsFactories,a=void 0===o?R:o,i=t.mapDispatchToPropsFactories,l=void 0===i?j:i,s=t.mergePropsFactories,u=void 0===s?I:s,c=t.selectorFactory,f=void 0===c?D:c;return function(e,t,n,o){void 0===o&&(o={});var i=o,s=i.pure,c=void 0===s||s,h=i.areStatesEqual,m=void 0===h?q:h,y=i.areOwnPropsEqual,v=void 0===y?P:y,g=i.areStatePropsEqual,b=void 0===g?P:g,w=i.areMergedPropsEqual,k=void 0===w?P:w,E=p(i,B),S=U(e,a,"mapStateToProps"),C=U(t,l,"mapDispatchToProps"),x=U(n,u,"mergeProps");return r(f,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:C,initMergeProps:x,pure:c,areStatesEqual:m,areOwnPropsEqual:v,areStatePropsEqual:b,areMergedPropsEqual:k},E))}}const W=$();function V(){return(0,e.useContext)(a)}function H(t){void 0===t&&(t=a);var n=t===a?V:function(){return(0,e.useContext)(t)};return function(){return n().store}}var K=H();function Y(e){void 0===e&&(e=a);var t=e===a?K:H(e);return function(){return t().dispatch}}var Q=Y(),X=function(e,t){return e===t};function G(t){void 0===t&&(t=a);var n=t===a?V:function(){return(0,e.useContext)(t)};return function(t,r){void 0===r&&(r=X);var o=n(),a=function(t,n,r,o){var a,i=(0,e.useReducer)((function(e){return e+1}),0)[1],l=(0,e.useMemo)((function(){return u(r,o)}),[r,o]),s=(0,e.useRef)(),f=(0,e.useRef)(),d=(0,e.useRef)(),p=(0,e.useRef)(),h=r.getState();try{if(t!==f.current||h!==d.current||s.current){var m=t(h);a=void 0!==p.current&&n(m,p.current)?p.current:m}else a=p.current}catch(e){throw s.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+s.current.stack+"\n\n"),e}return c((function(){f.current=t,d.current=h,p.current=a,s.current=void 0})),c((function(){function e(){try{var e=r.getState();if(e===d.current)return;var t=f.current(e);if(n(t,p.current))return;p.current=t,d.current=e}catch(e){s.current=e}i()}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}}),[r,l]),a}(t,r,o.store,o.subscription);return(0,e.useDebugValue)(a),a}}var J,Z=G();function ee(e,t){return ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},ee(e,t)}function te(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,ee(e,t)}function ne(e){return"/"===e.charAt(0)}function re(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}J=t.unstable_batchedUpdates,i=J;function oe(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const ae=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=oe(t),o=oe(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const ie=function(e,t){if(!e)throw new Error("Invariant failed")};function le(e){return"/"===e.charAt(0)?e:"/"+e}function se(e){return"/"===e.charAt(0)?e.substr(1):e}function ue(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function ce(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function fe(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function de(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=d({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&ne(e),i=t&&ne(t),l=a||i;if(e&&ne(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var u=0,c=o.length;c>=0;c--){var f=o[c];"."===f?re(o,c):".."===f?(re(o,c),u++):u&&(re(o,c),u--)}if(!l)for(;u--;u)o.unshift("..");!l||""===o[0]||o[0]&&ne(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function pe(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var he=!("undefined"==typeof window||!window.document||!window.document.createElement);function me(e,t){t(window.confirm(e))}var ye="hashchange",ve={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+se(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:se,decodePath:le},slash:{encodePath:le,decodePath:le}};function ge(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function be(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function we(e){window.location.replace(ge(window.location.href)+"#"+e)}function ke(e){void 0===e&&(e={}),he||ie(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?me:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?ce(le(e.basename)):"",s=ve[i],u=s.encodePath,c=s.decodePath;function f(){var e=c(be());return l&&(e=ue(e,l)),de(e)}var p=pe();function h(e){d(_,e),_.length=t.length,p.notifyListeners(_.location,_.action)}var m=!1,y=null;function v(){var e=be(),t=u(e);if(e!==t)we(t);else{var n=f(),r=_.location;if(!m&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash}(r,n))return;if(y===fe(n))return;y=null,function(e){if(m)m=!1,h();else{p.confirmTransitionTo(e,"POP",o,(function(t){t?h({action:"POP",location:e}):function(e){var t=_.location,n=k.lastIndexOf(fe(t));-1===n&&(n=0);var r=k.lastIndexOf(fe(e));-1===r&&(r=0);var o=n-r;o&&(m=!0,E(o))}(e)}))}}(n)}}var g=be(),b=u(g);g!==b&&we(b);var w=f(),k=[fe(w)];function E(e){t.go(e)}var S=0;function C(e){1===(S+=e)&&1===e?window.addEventListener(ye,v):0===S&&window.removeEventListener(ye,v)}var x=!1,_={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=ge(window.location.href)),n+"#"+u(l+fe(e))},push:function(e,t){var n="PUSH",r=de(e,void 0,void 0,_.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=fe(r),o=u(l+t);if(be()!==o){y=t,function(e){window.location.hash=e}(o);var a=k.lastIndexOf(fe(_.location)),i=k.slice(0,a+1);i.push(t),k=i,h({action:n,location:r})}else h()}}))},replace:function(e,t){var n="REPLACE",r=de(e,void 0,void 0,_.location);p.confirmTransitionTo(r,n,o,(function(e){if(e){var t=fe(r),o=u(l+t);be()!==o&&(y=t,we(o));var a=k.indexOf(fe(_.location));-1!==a&&(k[a]=t),h({action:n,location:r})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return x||(C(1),x=!0),function(){return x&&(x=!1,C(-1)),t()}},listen:function(e){var t=p.appendListener(e);return C(1),function(){C(-1),t()}}};return _}var Ee=1073741823,Se="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function Ce(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var xe=e.createContext||function(t,n){var r,a,i,l="__create-react-context-"+((Se[i="__global_unique_id__"]=(Se[i]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=Ce(t.props.value),t}te(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,o)?(t="function"==typeof n?n(r,o):Ee,0!=(t|=0)&&this.emitter.set(e.value,t)):t=0}},r.render=function(){return this.props.children},t}(e.Component);s.childContextTypes=((r={})[l]=o().object.isRequired,r);var u=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}te(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Ee:t},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Ee:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return u.contextTypes=((a={})[l]=o().object,a),{Provider:s,Consumer:u}};const _e=xe;var Oe=n(4779),Pe=n.n(Oe),Ne=function(e){var t=_e();return t.displayName=e,t},Ae=Ne("Router-History"),Te=Ne("Router"),je=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}te(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return e.createElement(Te.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(Ae.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;var Re=function(e){function t(){return e.apply(this,arguments)||this}te(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(e.Component),Me={},Ie=0;function Le(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(Me[e])return Me[e];var t=Pe().compile(e);return Ie<1e4&&(Me[e]=t,Ie++),t}(e)(t,{pretty:!0})}function Fe(t){var n=t.computedMatch,r=t.to,o=t.push,a=void 0!==o&&o;return e.createElement(Te.Consumer,null,(function(t){t||ie(!1);var o=t.history,i=t.staticContext,l=a?o.push:o.replace,s=de(n?"string"==typeof r?Le(r,n.params):d({},r,{pathname:Le(r.pathname,n.params)}):r);return i?(l(s),null):e.createElement(Re,{onMount:function(){l(s)},onUpdate:function(e,t){var n=de(t.to);(function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&ae(e.state,t.state)})(n,d({},s,{key:n.key}))||l(s)},to:r})}))}var ze={},De=0;function Be(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,s=n.sensitive,u=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ze[n]||(ze[n]={});if(r[e])return r[e];var o=[],a={regexp:Pe()(e,o,t),keys:o};return De<1e4&&(r[e]=a,De++),a}(n,{end:a,strict:l,sensitive:u}),o=r.regexp,i=r.keys,s=o.exec(e);if(!s)return null;var c=s[0],f=s.slice(1),d=e===c;return a&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var Ue=function(t){function n(){return t.apply(this,arguments)||this}return te(n,t),n.prototype.render=function(){var t=this;return e.createElement(Te.Consumer,null,(function(n){n||ie(!1);var r=t.props.location||n.location,o=d({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?Be(r.pathname,t.props):n.match}),a=t.props,i=a.children,l=a.component,s=a.render;return Array.isArray(i)&&function(t){return 0===e.Children.count(t)}(i)&&(i=null),e.createElement(Te.Provider,{value:o},o.match?i?"function"==typeof i?i(o):i:l?e.createElement(l,o):s?s(o):null:"function"==typeof i?i(o):null)}))},n}(e.Component);e.Component;var qe=function(t){function n(){return t.apply(this,arguments)||this}return te(n,t),n.prototype.render=function(){var t=this;return e.createElement(Te.Consumer,null,(function(n){n||ie(!1);var r,o,a=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==o&&e.isValidElement(t)){r=t;var i=t.props.path||t.props.from;o=i?Be(a.pathname,d({},t.props,{path:i})):n.match}})),o?e.cloneElement(r,{location:a,computedMatch:o}):null}))},n}(e.Component),$e=e.useContext;function We(){return $e(Ae)}function Ve(){var e=$e(Te).match;return e?e.params:{}}e.Component;var He=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=ke(e.props),e}return te(n,t),n.prototype.render=function(){return e.createElement(je,{history:this.history,children:this.props.children})},n}(e.Component),Ke=function(e,t){return"function"==typeof e?e(t):e},Ye=function(e,t){return"string"==typeof e?de(e,null,null,t):e},Qe=function(e){return e},Xe=e.forwardRef;void 0===Xe&&(Xe=Qe);var Ge=Xe((function(t,n){var r=t.innerRef,o=t.navigate,a=t.onClick,i=p(t,["innerRef","navigate","onClick"]),l=i.target,s=d({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return s.ref=Qe!==Xe&&n||r,e.createElement("a",s)})),Je=Xe((function(t,n){var r=t.component,o=void 0===r?Ge:r,a=t.replace,i=t.to,l=t.innerRef,s=p(t,["component","replace","to","innerRef"]);return e.createElement(Te.Consumer,null,(function(t){t||ie(!1);var r=t.history,u=Ye(Ke(i,t.location),t.location),c=u?r.createHref(u):"",f=d({},s,{href:c,navigate:function(){var e=Ke(i,t.location),n=fe(t.location)===fe(Ye(e));(a||n?r.replace:r.push)(e)}});return Qe!==Xe?f.ref=n||l:f.innerRef=l,e.createElement(o,f)}))})),Ze=function(e){return e},et=e.forwardRef;void 0===et&&(et=Ze),et((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,a=t.activeClassName,i=void 0===a?"active":a,l=t.activeStyle,s=t.className,u=t.exact,c=t.isActive,f=t.location,h=t.sensitive,m=t.strict,y=t.style,v=t.to,g=t.innerRef,b=p(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(Te.Consumer,null,(function(t){t||ie(!1);var r=f||t.location,a=Ye(Ke(v,r),r),p=a.pathname,w=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),k=w?Be(r.pathname,{path:w,exact:u,sensitive:h,strict:m}):null,E=!!(c?c(k,r):k),S="function"==typeof s?s(E):s,C="function"==typeof y?y(E):y;E&&(S=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(S,i),C=d({},C,l));var x=d({"aria-current":E&&o||null,className:S,style:C,to:a},b);return Ze!==et?x.ref=n||g:x.innerRef=g,e.createElement(Je,x)}))}));var tt=n(6774),nt=n.n(tt);const rt=function(e){function t(e,r,s,u,d){for(var p,h,m,y,w,E=0,S=0,C=0,x=0,_=0,j=0,M=m=p=0,L=0,F=0,z=0,D=0,B=s.length,U=B-1,q="",$="",W="",V="";L<B;){if(h=s.charCodeAt(L),L===U&&0!==S+x+C+E&&(0!==S&&(h=47===S?10:47),x=C=E=0,B++,U++),0===S+x+C+E){if(L===U&&(0<F&&(q=q.replace(f,"")),0<q.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:q+=s.charAt(L)}h=59}switch(h){case 123:for(p=(q=q.trim()).charCodeAt(0),m=1,D=++L;L<B;){switch(h=s.charCodeAt(L)){case 123:m++;break;case 125:m--;break;case 47:switch(h=s.charCodeAt(L+1)){case 42:case 47:e:{for(M=L+1;M<U;++M)switch(s.charCodeAt(M)){case 47:if(42===h&&42===s.charCodeAt(M-1)&&L+2!==M){L=M+1;break e}break;case 10:if(47===h){L=M+1;break e}}L=M}}break;case 91:h++;case 40:h++;case 34:case 39:for(;L++<U&&s.charCodeAt(L)!==h;);}if(0===m)break;L++}if(m=s.substring(D,L),0===p&&(p=(q=q.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<F&&(q=q.replace(f,"")),h=q.charCodeAt(1)){case 100:case 109:case 115:case 45:F=r;break;default:F=T}if(D=(m=t(r,F,m,h,d+1)).length,0<R&&(w=l(3,m,F=n(T,q,z),r,P,O,D,h,d,u),q=F.join(""),void 0!==w&&0===(D=(m=w.trim()).length)&&(h=0,m="")),0<D)switch(h){case 115:q=q.replace(k,i);case 100:case 109:case 45:m=q+"{"+m+"}";break;case 107:m=(q=q.replace(v,"$1 $2"))+"{"+m+"}",m=1===A||2===A&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=q+m,112===u&&($+=m,m="")}else m=""}else m=t(r,n(r,q,z),m,u,d+1);W+=m,m=z=F=M=p=0,q="",h=s.charCodeAt(++L);break;case 125:case 59:if(1<(D=(q=(0<F?q.replace(f,""):q).trim()).length))switch(0===M&&(p=q.charCodeAt(0),45===p||96<p&&123>p)&&(D=(q=q.replace(" ",":")).length),0<R&&void 0!==(w=l(1,q,r,e,P,O,$.length,u,d,u))&&0===(D=(q=w.trim()).length)&&(q="\0\0"),p=q.charCodeAt(0),h=q.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){V+=q+s.charAt(L);break}default:58!==q.charCodeAt(D-1)&&($+=o(q,p,h,q.charCodeAt(2)))}z=F=M=p=0,q="",h=s.charCodeAt(++L)}}switch(h){case 13:case 10:47===S?S=0:0===1+p&&107!==u&&0<q.length&&(F=1,q+="\0"),0<R*I&&l(0,q,r,e,P,O,$.length,u,d,u),O=1,P++;break;case 59:case 125:if(0===S+x+C+E){O++;break}default:switch(O++,y=s.charAt(L),h){case 9:case 32:if(0===x+E+S)switch(_){case 44:case 58:case 9:case 32:y="";break;default:32!==h&&(y=" ")}break;case 0:y="\\0";break;case 12:y="\\f";break;case 11:y="\\v";break;case 38:0===x+S+E&&(F=z=1,y="\f"+y);break;case 108:if(0===x+S+E+N&&0<M)switch(L-M){case 2:112===_&&58===s.charCodeAt(L-3)&&(N=_);case 8:111===j&&(N=j)}break;case 58:0===x+S+E&&(M=L);break;case 44:0===S+C+x+E&&(F=1,y+="\r");break;case 34:case 39:0===S&&(x=x===h?0:0===x?h:x);break;case 91:0===x+S+C&&E++;break;case 93:0===x+S+C&&E--;break;case 41:0===x+S+E&&C--;break;case 40:0===x+S+E&&(0===p&&(2*_+3*j==533||(p=1)),C++);break;case 64:0===S+C+x+E+M+m&&(m=1);break;case 42:case 47:if(!(0<x+E+C))switch(S){case 0:switch(2*h+3*s.charCodeAt(L+1)){case 235:S=47;break;case 220:D=L,S=42}break;case 42:47===h&&42===_&&D+2!==L&&(33===s.charCodeAt(D+2)&&($+=s.substring(D,L+1)),y="",S=0)}}0===S&&(q+=y)}j=_,_=h,L++}if(0<(D=$.length)){if(F=r,0<R&&void 0!==(w=l(2,$,F,e,P,O,D,u,d,u))&&0===($=w).length)return V+$+W;if($=F.join(",")+"{"+$+"}",0!=A*N){switch(2!==A||a($,2)||(N=0),N){case 111:$=$.replace(b,":-moz-$1")+$;break;case 112:$=$.replace(g,"::-webkit-input-$1")+$.replace(g,"::-moz-$1")+$.replace(g,":-ms-input-$1")+$}N=0}}return V+$+W}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var s=l=0;for(t=[];l<a;++l)for(var u=0;u<i;++u)t[s++]=r(e[u]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(y,"$1"+e.trim());case 58:return e.trim()+t.replace(y,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(y,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var s=i.substring(e,i.length-1).trim();return s=i.substring(0,e).trim()+s+";",1===A||2===A&&a(s,1)?"-webkit-"+s+s:s}if(0===A||2===A&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(_,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(s=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+s+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(s=i.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=i.replace(w,"tb");break;case 232:s=i.replace(w,"tb-rl");break;case 220:s=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+s+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(s=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:i=i.replace(s,"-webkit-"+s)+";"+i;break;case 207:case 102:i=i.replace(s,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(s,"-webkit-"+s)+";"+i.replace(s,"-ms-"+s+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return s=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+s+"-ms-flex-"+s+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(S,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(S,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(s,"-webkit-"+s)+i.replace(s,"-moz-"+s.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),M(2!==t?r:r.replace(C,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,s,c){for(var f,d=0,p=t;d<R;++d)switch(f=j[d].call(u,e,p,n,r,o,a,i,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(M=null,e?"function"!=typeof e?A=1:(A=2,M=e):A=0),s}function u(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<R){var o=l(-1,n,r,r,P,O,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(T,r,n,0,0);return 0<R&&void 0!==(o=l(-2,a,r,r,P,O,a.length,0,0,0))&&(a=o),N=0,O=P=1,a}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,y=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,S=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,O=1,P=1,N=0,A=1,T=[],j=[],R=0,M=null,I=0;return u.use=function e(t){switch(t){case void 0:case null:R=j.length=0;break;default:if("function"==typeof t)j[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else I=0|!!t}return e},u.set=s,void 0!==e&&s(e),u},ot={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var at=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const it=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return at.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function lt(){return(lt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var st=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},ut=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,y.typeOf)(e)},ct=Object.freeze([]),ft=Object.freeze({});function dt(e){return"function"==typeof e}function pt(e){return e.displayName||e.name||"Component"}function ht(e){return e&&"string"==typeof e.styledComponentId}var mt="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",yt="undefined"!=typeof window&&"HTMLElement"in window,vt=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),gt={};function bt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var wt=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&bt(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,s=t.length;l<s;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),kt=new Map,Et=new Map,St=1,Ct=function(e){if(kt.has(e))return kt.get(e);for(;Et.has(St);)St++;var t=St++;return kt.set(e,t),Et.set(t,e),t},xt=function(e){return Et.get(e)},_t=function(e,t){t>=St&&(St=t+1),kt.set(e,t),Et.set(t,e)},Ot="style["+mt+'][data-styled-version="5.3.1"]',Pt=new RegExp("^"+mt+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),Nt=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},At=function(e,t){for(var n=(t.innerHTML||"").split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(Pt);if(l){var s=0|parseInt(l[1],10),u=l[2];0!==s&&(_t(u,s),Nt(e,u,l[3]),e.getTag().insertRules(s,r)),r.length=0}else r.push(i)}}},Tt=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},jt=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(mt))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(mt,"active"),r.setAttribute("data-styled-version","5.3.1");var i=Tt();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},Rt=function(){function e(e){var t=this.element=jt(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}bt(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),Mt=function(){function e(e){var t=this.element=jt(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),It=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),Lt=yt,Ft={isServer:!yt,useCSSOMInjection:!vt},zt=function(){function e(e,t,n){void 0===e&&(e=ft),void 0===t&&(t={}),this.options=lt({},Ft,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&yt&&Lt&&(Lt=!1,function(e){for(var t=document.querySelectorAll(Ot),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(mt)&&(At(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return Ct(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(lt({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new It(o):r?new Rt(o):new Mt(o),new wt(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Ct(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Ct(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Ct(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=xt(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(i&&l&&i.size){var s=mt+".g"+o+'[id="'+a+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+l+s+'{content:"'+u+'"}/*!sc*/\n'}}}return r}(this)},e}(),Dt=/(a)(d)/gi,Bt=function(e){return String.fromCharCode(e+(e>25?39:97))};function Ut(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Bt(t%52)+n;return(Bt(t%52)+n).replace(Dt,"$1-$2")}var qt=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},$t=function(e){return qt(5381,e)};function Wt(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(dt(n)&&!ht(n))return!1}return!0}var Vt=$t("5.3.1"),Ht=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Wt(e),this.componentId=t,this.baseHash=qt(Vt,t),this.baseStyle=n,zt.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=fn(this.rules,e,t,n).join(""),i=Ut(qt(this.baseHash,a)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var s=this.rules.length,u=qt(this.baseHash,n.hash),c="",f=0;f<s;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=fn(d,e,t,n),h=Array.isArray(p)?p.join(""):p;u=qt(u,h+f),c+=h}}if(c){var m=Ut(u>>>0);if(!t.hasNameForId(r,m)){var y=n(c,"."+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(" ")},e}(),Kt=/^\s*\/\/.*$/gm,Yt=[":","[",".","#"];function Qt(e){var t,n,r,o,a=void 0===e?ft:e,i=a.options,l=void 0===i?ft:i,s=a.plugins,u=void 0===s?ct:s,c=new rt(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,s,u,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&-1!==Yt.indexOf(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var s=e.replace(Kt,""),u=a&&i?i+" "+a+" { "+s+" }":s;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(i||!a?"":a,u)}return c.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=u.length?u.reduce((function(e,t){return t.name||bt(15),qt(e,t.name)}),5381).toString():"",h}var Xt=e.createContext(),Gt=(Xt.Consumer,e.createContext()),Jt=(Gt.Consumer,new zt),Zt=Qt();function en(){return(0,e.useContext)(Xt)||Jt}function tn(){return(0,e.useContext)(Gt)||Zt}function nn(t){var n=(0,e.useState)(t.stylisPlugins),r=n[0],o=n[1],a=en(),i=(0,e.useMemo)((function(){var e=a;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),l=(0,e.useMemo)((function(){return Qt({options:{prefix:!t.disableVendorPrefixes},plugins:r})}),[t.disableVendorPrefixes,r]);return(0,e.useEffect)((function(){nt()(r,t.stylisPlugins)||o(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(Xt.Provider,{value:i},e.createElement(Gt.Provider,{value:l},t.children))}var rn=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Zt);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return bt(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Zt),this.name+e.hash},e}(),on=/([A-Z])/,an=/([A-Z])/g,ln=/^ms-/,sn=function(e){return"-"+e.toLowerCase()};function un(e){return on.test(e)?e.replace(an,sn).replace(ln,"-ms-"):e}var cn=function(e){return null==e||!1===e||""===e};function fn(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=fn(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return cn(e)?"":ht(e)?"."+e.styledComponentId:dt(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:fn(e(t),t,n,r):e instanceof rn?n?(e.inject(n,r),e.getName(r)):e:ut(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!cn(t[i])&&(Array.isArray(t[i])&&t[i].isCss||dt(t[i])?a.push(un(i)+":",t[i],";"):ut(t[i])?a.push.apply(a,e(t[i],i)):a.push(un(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in ot?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var s}var dn=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function pn(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return dt(e)||ut(e)?dn(fn(st(ct,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:dn(fn(st(e,n)))}new Set;var hn=function(e,t,n){return void 0===n&&(n=ft),e.theme!==n.theme&&e.theme||t||n.theme},mn=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,yn=/(^-|-$)/g;function vn(e){return e.replace(mn,"-").replace(yn,"")}var gn=function(e){return Ut($t(e)>>>0)};function bn(e){return"string"==typeof e&&!0}var wn=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},kn=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function En(e,t,n){var r=e[n];wn(t)&&wn(r)?Sn(r,t):e[n]=t}function Sn(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(wn(i))for(var l in i)kn(l)&&En(e,i[l],l)}return e}var Cn=e.createContext();Cn.Consumer;var xn={};function _n(t,n,r){var o=ht(t),a=!bn(t),i=n.attrs,l=void 0===i?ct:i,s=n.componentId,u=void 0===s?function(e,t){var n="string"!=typeof e?"sc":vn(e);xn[n]=(xn[n]||0)+1;var r=n+"-"+gn("5.3.1"+n+xn[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):s,c=n.displayName,f=void 0===c?function(e){return bn(e)?"styled."+e:"Styled("+pt(e)+")"}(t):c,d=n.displayName&&n.componentId?vn(n.displayName)+"-"+n.componentId:n.componentId||u,p=o&&t.attrs?Array.prototype.concat(t.attrs,l).filter(Boolean):l,h=n.shouldForwardProp;o&&t.shouldForwardProp&&(h=n.shouldForwardProp?function(e,r,o){return t.shouldForwardProp(e,r,o)&&n.shouldForwardProp(e,r,o)}:t.shouldForwardProp);var y,v=new Ht(r,d,o?t.componentStyle:void 0),g=v.isStatic&&0===l.length,b=function(t,n){return function(t,n,r,o){var a=t.attrs,i=t.componentStyle,l=t.defaultProps,s=t.foldedComponentIds,u=t.shouldForwardProp,c=t.styledComponentId,f=t.target,d=function(e,t,n){void 0===e&&(e=ft);var r=lt({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in dt(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(hn(n,(0,e.useContext)(Cn),l)||ft,n,a),p=d[0],h=d[1],m=function(e,t,n,r){var o=en(),a=tn();return t?e.generateAndInjectStyles(ft,o,a):e.generateAndInjectStyles(n,o,a)}(i,o,p),y=r,v=h.$as||n.$as||h.as||n.as||f,g=bn(v),b=h!==n?lt({},n,{},h):n,w={};for(var k in b)"$"!==k[0]&&"as"!==k&&("forwardedAs"===k?w.as=b[k]:(u?u(k,it,v):!g||it(k))&&(w[k]=b[k]));return n.style&&h.style!==n.style&&(w.style=lt({},n.style,{},h.style)),w.className=Array.prototype.concat(s,c,m!==c?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=y,(0,e.createElement)(v,w)}(y,t,n,g)};return b.displayName=f,(y=e.forwardRef(b)).attrs=p,y.componentStyle=v,y.displayName=f,y.shouldForwardProp=h,y.foldedComponentIds=o?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):ct,y.styledComponentId=d,y.target=o?t.target:t,y.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),a=t&&t+"-"+(bn(e)?e:vn(pt(e)));return _n(e,lt({},o,{attrs:p,componentId:a}),r)},Object.defineProperty(y,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?Sn({},t.defaultProps,e):e}}),y.toString=function(){return"."+y.styledComponentId},a&&m()(y,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),y}var On=function(e){return function e(t,n,r){if(void 0===r&&(r=ft),!(0,y.isValidElementType)(n))return bt(1,String(n));var o=function(){return t(n,r,pn.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,lt({},r,{},o))},o.attrs=function(o){return e(t,n,lt({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(_n,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){On[e]=On(e)}));var Pn=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=Wt(e),zt.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(fn(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&zt.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();!function(){var t=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=Tt();return"<style "+[n&&'nonce="'+n+'"',mt+'="true"','data-styled-version="5.3.1"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?bt(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return bt(2);var r=((n={})[mt]="",n["data-styled-version"]="5.3.1",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=Tt();return o&&(r.nonce=o),[e.createElement("style",lt({},r,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new zt({isServer:!0}),this.sealed=!1}.prototype;t.collectStyles=function(t){return this.sealed?bt(2):e.createElement(nn,{sheet:this.instance},t)},t.interleaveWithNodeStream=function(e){return bt(3)}}();const Nn=On;var An,Tn="#18181A",jn="#313030",Rn="#515151",Mn="#666",In="#ccc",Ln="#4876ee",Fn="#fafafa",zn="#ff5c58";const Dn=function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=pn.apply(void 0,[t].concat(r)),i="sc-global-"+gn(JSON.stringify(a)),l=new Pn(a,i);function s(t){var n=en(),r=tn(),o=(0,e.useContext)(Cn),a=(0,e.useRef)(n.allocateGSInstance(i)).current;return n.server&&u(a,t,n,o,r),(0,e.useLayoutEffect)((function(){if(!n.server)return u(a,t,n,o,r),function(){return l.removeStyles(a,n)}}),[a,t,n,o,r]),null}function u(e,t,n,r,o){if(l.isStatic)l.renderStyles(e,gt,n,o);else{var a=lt({},t,{theme:hn(t,r,s.defaultProps)});l.renderStyles(e,a,n,o)}}return e.memo(s)}(An||(Bn=["\n    :root {\n        font-size: 15px;\n        .mobile-only { display: none; }\n        @media only screen and (-webkit-min-device-pixel-ratio: 3),\n                    only screen and (min--moz-device-pixel-ratio: 3),\n                    only screen and (-o-min-device-pixel-ratio: 3/1),\n                    only screen and (min-device-pixel-ratio: 3) {\n            font-size: 29px;\n            .mobile-last {\n                order: 1;\n            }\n            .mobile-hidden {\n                display: none;\n            }\n            .mobile-only {\n                display: block;\n            }\n        }\n    }\n    *, *::before, *::after {\n        margin: 0;\n        padding: 0;\n        outline: none;\n        border: none;\n        box-sizing: border-box;\n    }\n    body {\n        background-color: ",";\n        * {\n            font-family: Rubik;\n        }\n        *::placeholder {\n            font-weight: lighter;\n        }\n        overflow-x: hidden;\n    }\n    .up-motion {\n        opacity: 0;\n        transform: translateY(100%);\n        animation: up-motion 1s ease-out forwards;\n    }\n    @keyframes up-motion {\n        from {\n            opacity: 0;\n            transform: translateY(100%);\n        }\n        to {\n            opacity: 1;\n            transform: translateY(0);\n        }\n    }\n    .pop-on {\n        animation: pop-on 0.1s cubic-bezier(0.09, 0.59, 0.18, 1.19) forwards;\n    }\n    @keyframes pop-on {\n        from {\n            transform: scale(0);\n        }\n        to {\n            transform: scale(1);\n        }\n    }\n"],Un||(Un=Bn.slice(0)),An=Object.freeze(Object.defineProperties(Bn,{raw:{value:Object.freeze(Un)}}))),Tn);var Bn,Un,qn,$n,Wn,Vn,Hn;function Kn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Yn=Nn.div(qn||(qn=Kn(["\n  display: flex;\n  &.transparent {\n    background-color: transparent;\n  }\n  &.wrap {\n    flex-wrap: wrap;\n    gap: 1em;\n  }\n  padding: 1em;\n  gap: 0.2em 1em;\n  background-color: ",";\n  position: relative;\n  &.center-y {\n    align-items: center;\n  }\n  &.baseline-y {\n    align-items: baseline;\n  }\n  &.spb-x {\n    justify-content: space-between;\n  }\n  &.gap-x-half {\n    gap: 0.2em 0.5em;\n  }\n  &.padd-x {\n    padding: 0 2em;\n  }\n  &.padd-y {\n    padding: 0.2em 0;\n  }\n  &.padd-0 {\n    padding: 0;\n  }\n  &.padd-1-2 {\n    padding: 1em 2em;\n  }\n  &.padd-half {\n    padding: 0.5em 1em;\n  }\n  &.scroll-x {\n    overflow-x: scroll;\n  }\n  ::-webkit-scrollbar {\n    height: 10px;\n  }\n  ::-webkit-scrollbar-track {\n    background-color: ",";\n  }\n  ::-webkit-scrollbar-thumb {\n    background-color: ",";\n    border-radius: 5px;\n  }\n  &.reversed {\n    flex-flow: row-reverse;\n  }\n"])),jn,jn,In),Qn=(Nn.div($n||($n=Kn(["\n  max-width: 1100px;\n"]))),Nn(Je)(Wn||(Wn=Kn(["\n  flex-shrink: 0;\n  width: 3em;\n  height: 3em;\n  border-radius: 50%;\n  overflow: hidden;\n  border: 0.2em solid ",";\n  &.large {\n    width: 6em;\n    height: 6em;\n    border: 0.4em solid ",";\n  }\n  @media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min--moz-device-pixel-ratio: 3),\n    only screen and (-o-min-device-pixel-ratio: 3/1),\n    only screen and (min-device-pixel-ratio: 3) {\n    width: 3.5rem;\n    height: 3.5rem;\n  }\n"])),Ln,Ln)),Xn=Nn.div(Vn||(Vn=Kn(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-grow: 1;\n  &.center {\n    align-items: center;\n  }\n  &.gap-y {\n    gap: 0.5em;\n  }\n  &.invert {\n    flex-direction: row;\n  }\n"]))),Gn=Nn.div(Hn||(Hn=Kn(["\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 0 1em;\n  @media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min--moz-device-pixel-ratio: 3),\n    only screen and (-o-min-device-pixel-ratio: 3/1),\n    only screen and (min-device-pixel-ratio: 3) {\n    max-width: 1100px;\n  }\n"]))),Jn=n(8228),Zn=n.n(Jn);function er(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function tr(e){return!!e&&!!e[Ur]}function nr(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===qr}(e)||Array.isArray(e)||!!e[Br]||!!e.constructor[Br]||sr(e)||ur(e))}function rr(e,t,n){void 0===n&&(n=!1),0===or(e)?(n?Object.keys:$r)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function or(e){var t=e[Ur];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:sr(e)?2:ur(e)?3:0}function ar(e,t){return 2===or(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function ir(e,t,n){var r=or(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function lr(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function sr(e){return Lr&&e instanceof Map}function ur(e){return Fr&&e instanceof Set}function cr(e){return e.o||e.t}function fr(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Wr(e);delete t[Ur];for(var n=$r(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function dr(e,t){return void 0===t&&(t=!1),hr(e)||tr(e)||!nr(e)||(or(e)>1&&(e.set=e.add=e.clear=e.delete=pr),Object.freeze(e),t&&rr(e,(function(e,t){return dr(t,!0)}),!0)),e}function pr(){er(2)}function hr(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function mr(e){var t=Vr[e];return t||er(18,e),t}function yr(){return Mr}function vr(e,t){t&&(mr("Patches"),e.u=[],e.s=[],e.v=t)}function gr(e){br(e),e.p.forEach(kr),e.p=null}function br(e){e===Mr&&(Mr=e.l)}function wr(e){return Mr={p:[],l:Mr,h:e,m:!0,_:0}}function kr(e){var t=e[Ur];0===t.i||1===t.i?t.j():t.O=!0}function Er(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||mr("ES5").S(t,e,r),r?(n[Ur].P&&(gr(t),er(4)),nr(e)&&(e=Sr(t,e),t.l||xr(t,e)),t.u&&mr("Patches").M(n[Ur],e,t.u,t.s)):e=Sr(t,n,[]),gr(t),t.u&&t.v(t.u,t.s),e!==Dr?e:void 0}function Sr(e,t,n){if(hr(t))return t;var r=t[Ur];if(!r)return rr(t,(function(o,a){return Cr(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return xr(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=fr(r.k):r.o;rr(3===r.i?new Set(o):o,(function(t,a){return Cr(e,r,o,t,a,n)})),xr(e,o,!1),n&&e.u&&mr("Patches").R(r,n,e.u,e.s)}return r.o}function Cr(e,t,n,r,o,a){if(tr(o)){var i=Sr(e,o,a&&t&&3!==t.i&&!ar(t.D,r)?a.concat(r):void 0);if(ir(n,r,i),!tr(i))return;e.m=!1}if(nr(o)&&!hr(o)){if(!e.h.F&&e._<1)return;Sr(e,o),t&&t.A.l||xr(e,o)}}function xr(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&dr(t,n)}function _r(e,t){var n=e[Ur];return(n?cr(n):e)[t]}function Or(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Pr(e){e.P||(e.P=!0,e.l&&Pr(e.l))}function Nr(e){e.o||(e.o=fr(e.t))}function Ar(e,t,n){var r=sr(t)?mr("MapSet").N(t,n):ur(t)?mr("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:yr(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=Hr;n&&(o=[r],a=Kr);var i=Proxy.revocable(o,a),l=i.revoke,s=i.proxy;return r.k=s,r.j=l,s}(t,n):mr("ES5").J(t,n);return(n?n.A:yr()).p.push(r),r}function Tr(e){return tr(e)||er(22,e),function e(t){if(!nr(t))return t;var n,r=t[Ur],o=or(t);if(r){if(!r.P&&(r.i<4||!mr("ES5").K(r)))return r.t;r.I=!0,n=jr(t,o),r.I=!1}else n=jr(t,o);return rr(n,(function(t,o){r&&function(e,t){return 2===or(e)?e.get(t):e[t]}(r.t,t)===o||ir(n,t,e(o))})),3===o?new Set(n):n}(e)}function jr(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return fr(e)}var Rr,Mr,Ir="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Lr="undefined"!=typeof Map,Fr="undefined"!=typeof Set,zr="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Dr=Ir?Symbol.for("immer-nothing"):((Rr={})["immer-nothing"]=!0,Rr),Br=Ir?Symbol.for("immer-draftable"):"__$immer_draftable",Ur=Ir?Symbol.for("immer-state"):"__$immer_state",qr=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),$r="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Wr=Object.getOwnPropertyDescriptors||function(e){var t={};return $r(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Vr={},Hr={get:function(e,t){if(t===Ur)return e;var n=cr(e);if(!ar(n,t))return function(e,t,n){var r,o=Or(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!nr(r)?r:r===_r(e.t,t)?(Nr(e),e.o[t]=Ar(e.A.h,r,e)):r},has:function(e,t){return t in cr(e)},ownKeys:function(e){return Reflect.ownKeys(cr(e))},set:function(e,t,n){var r=Or(cr(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=_r(cr(e),t),a=null==o?void 0:o[Ur];if(a&&a.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(lr(n,o)&&(void 0!==n||ar(e.t,t)))return!0;Nr(e),Pr(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==_r(e.t,t)||t in e.t?(e.D[t]=!1,Nr(e),Pr(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=cr(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){er(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){er(12)}},Kr={};rr(Hr,(function(e,t){Kr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Kr.deleteProperty=function(e,t){return Hr.deleteProperty.call(this,e[0],t)},Kr.set=function(e,t,n){return Hr.set.call(this,e[0],t,n,e[0])};var Yr=function(){function e(e){var t=this;this.g=zr,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),l=1;l<r;l++)i[l-1]=arguments[l];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&er(6),void 0!==r&&"function"!=typeof r&&er(7),nr(e)){var l=wr(t),s=Ar(t,e,void 0),u=!0;try{i=n(s),u=!1}finally{u?gr(l):br(l)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return vr(l,r),Er(e,l)}),(function(e){throw gr(l),e})):(vr(l,r),Er(i,l))}if(!e||"object"!=typeof e){if((i=n(e))===Dr)return;return void 0===i&&(i=e),t.F&&dr(i,!0),i}er(21,e)},this.produceWithPatches=function(e,n){return"function"==typeof e?function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))}:[t.produce(e,n,(function(e,t){r=e,o=t})),r,o];var r,o},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){nr(e)||er(8),tr(e)&&(e=Tr(e));var t=wr(this),n=Ar(this,e,void 0);return n[Ur].C=!0,br(t),n},t.finishDraft=function(e,t){var n=(e&&e[Ur]).A;return vr(n,t),Er(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!zr&&er(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var o=mr("Patches").$;return tr(e)?o(e,t):this.produce(e,(function(e){return o(e,t.slice(n+1))}))},e}(),Qr=new Yr,Xr=Qr.produce;Qr.produceWithPatches.bind(Qr),Qr.setAutoFreeze.bind(Qr),Qr.setUseProxies.bind(Qr),Qr.applyPatches.bind(Qr),Qr.createDraft.bind(Qr),Qr.finishDraft.bind(Qr);const Gr=Xr;function Jr(e,t){return e===t}function Zr(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function eo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function to(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function no(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?to(Object(n),!0).forEach((function(t){eo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):to(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ro(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Jr,n=null,r=null;return function(){return Zr(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));var oo="function"==typeof Symbol&&Symbol.observable||"@@observable",ao=function(){return Math.random().toString(36).substring(7).split("").join(".")},io={INIT:"@@redux/INIT"+ao(),REPLACE:"@@redux/REPLACE"+ao(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ao()}};function lo(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function so(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ro(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ro(1));return n(so)(e,t)}if("function"!=typeof e)throw new Error(ro(2));var o=e,a=t,i=[],l=i,s=!1;function u(){l===i&&(l=i.slice())}function c(){if(s)throw new Error(ro(3));return a}function f(e){if("function"!=typeof e)throw new Error(ro(4));if(s)throw new Error(ro(5));var t=!0;return u(),l.push(e),function(){if(t){if(s)throw new Error(ro(6));t=!1,u();var n=l.indexOf(e);l.splice(n,1),i=null}}}function d(e){if(!lo(e))throw new Error(ro(7));if(void 0===e.type)throw new Error(ro(8));if(s)throw new Error(ro(9));try{s=!0,a=o(a,e)}finally{s=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error(ro(10));o=e,d({type:io.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ro(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[oo]=function(){return this},e}return d({type:io.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:p})[oo]=h,r}function uo(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function co(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(ro(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=uo.apply(void 0,a)(n.dispatch),no(no({},n),{},{dispatch:r})}}}function fo(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var po=fo();po.withExtraArgument=fo;const ho=po;var mo,yo=(mo=function(e,t){return mo=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},mo(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}mo(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),vo=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},go=Object.defineProperty,bo=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),wo=Object.prototype.hasOwnProperty,ko=Object.prototype.propertyIsEnumerable,Eo=function(e,t,n){return t in e?go(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},So=function(e,t){for(var n in t||(t={}))wo.call(t,n)&&Eo(e,n,t[n]);if(bo)for(var r=0,o=bo(t);r<o.length;r++)n=o[r],ko.call(t,n)&&Eo(e,n,t[n]);return e},Co="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?uo:uo.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var xo=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return yo(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,vo([void 0],e[0].concat(this)))):new(t.bind.apply(t,vo([void 0],e.concat(this))))},t}(Array);function _o(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return So(So({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Oo(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function Po(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},o="function"==typeof e.extraReducers?Oo(e.extraReducers):[e.extraReducers],a=o[0],i=void 0===a?{}:a,l=o[1],s=void 0===l?[]:l,u=o[2],c=void 0===u?void 0:u,f=Object.keys(r),d={},p={},h={};f.forEach((function(e){var n,o,a=r[e],i=t+"/"+e;"reducer"in a?(n=a.reducer,o=a.prepare):n=a,d[e]=n,p[i]=n,h[e]=o?_o(i,o):_o(i)}));var m=function(e,t,n,r){void 0===n&&(n=[]);var o="function"==typeof t?Oo(t):[t,n,r],a=o[0],i=o[1],l=o[2],s=Gr(e,(function(){}));return function(e,t){void 0===e&&(e=s);var n=vo([a[t.type]],i.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[l]),n.reduce((function(e,n){if(n){var r;if(tr(e))return void 0===(r=n(e,t))?e:r;if(nr(e))return Gr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}}(n,So(So({},i),p),s,c);return{name:t,reducer:m,actions:h,caseReducers:d}}!function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Ur];return Hr.get(t,e)},set:function(t){var n=this[Ur];Hr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Ur];if(!o.P)switch(o.i){case 5:r(o)&&Pr(o);break;case 4:n(o)&&Pr(o)}}}function n(e){for(var t=e.t,n=e.k,r=$r(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==Ur){var i=t[a];if(void 0===i&&!ar(t,a))return!0;var l=n[a],s=l&&l[Ur];if(s?s.t!==i:!lr(l,i))return!0}}var u=!!t[Ur];return r.length!==$r(t).length+(u?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var o={};!function(e,t){Vr[e]||(Vr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=Wr(n);delete a[Ur];for(var i=$r(a),l=0;l<i.length;l++){var s=i[l];a[s]=e(s,t||!!a[s].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:yr(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,Ur,{value:a,writable:!0}),o},S:function(e,n,o){o?tr(n)&&n[Ur].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Ur];if(n){var o=n.t,a=n.k,i=n.D,l=n.i;if(4===l)rr(a,(function(t){t!==Ur&&(void 0!==o[t]||ar(o,t)?i[t]||e(a[t]):(i[t]=!0,Pr(n)))})),rr(o,(function(e){void 0!==a[e]||ar(a,e)||(i[e]=!1,Pr(n))}));else if(5===l){if(r(n)&&(Pr(n),i.length=!0),a.length<o.length)for(var s=a.length;s<o.length;s++)i[s]=!1;else for(var u=o.length;u<a.length;u++)i[u]=!0;for(var c=Math.min(a.length,o.length),f=0;f<c;f++)void 0===i[f]&&e(a[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();var No=Po({name:"loading",initialState:{value:!1},reducers:{toggleLoading:function(e){e.value=!e.value}}}),Ao=No.actions.toggleLoading;const To=No.reducer;function jo(e,t){if(e){if("string"==typeof e)return Ro(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ro(e,t):void 0}}function Ro(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Mo=function(e,t,n){var r;switch(n){case"post":r="https://frends-social.herokuapp.com/posts/".concat(t,"/");break;case"notifications":r="https://frends-social.herokuapp.com/users/".concat(t,"/notifications");break;case"chatrooms":r="https://frends-social.herokuapp.com/users/".concat(t,"/chatrooms");break;case"user":r="https://frends-social.herokuapp.com/users/".concat(t,"/");break;default:r="https://frends-social.herokuapp.com/users/".concat(t,"/feed")}return fetch(r,{mode:"cors",headers:{Authorization:"Bearer ".concat(e)}}).then((function(e){return e.json()}))},Io=function(e,t,n,r){r.preventDefault();var o,a,i=new FormData(r.target);if(-1!==t.indexOf("comments")||-1!==t.indexOf("chatrooms")){var l=i.entries();i=new URLSearchParams;var s,u=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=jo(e))){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}(l);try{for(u.s();!(s=u.n()).done;){var c=(o=s.value,a=2,function(e){if(Array.isArray(e))return e}(o)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(o,a)||jo(o,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),f=c[0],d=c[1];i.append(f,d)}}catch(e){u.e(e)}finally{u.f()}}return fetch(t,{mode:"cors",method:e,headers:{Authorization:"Bearer ".concat(n)},body:i}).then((function(e){console.log(e)}))},Lo=function(e,t,n){return fetch("https://frends-social.herokuapp.com/posts/".concat(t,"/likes"),{mode:"cors",method:e,headers:{Authorization:"Bearer ".concat(n)}}).then((function(e){console.log(e)}))},Fo=function(e,t,n){return fetch("https://frends-social.herokuapp.com/users/".concat(n,"/posts/").concat(t),{mode:"cors",method:"delete",headers:{Authorization:"Bearer ".concat(e)}})},zo=function(e,t,n,r){return fetch("https://frends-social.herokuapp.com/posts/".concat(t,"/comments/").concat(n,"/likes"),{mode:"cors",method:r,headers:{Authorization:"Bearer ".concat(e)}}).then((function(e){console.log(e)}))},Do=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o="https://frends-social.herokuapp.com/users/".concat(n,"/notifications/").concat(r);fetch(o,{method:t,headers:{Authorization:"Bearer ".concat(e)}}).then((function(e){return console.log(e)}))},Bo=function(e,t,n,r,o){var a,i={};return"friends"===n&&(a="https://frends-social.herokuapp.com/users/".concat(r,"/friends"),i.friendId=o,"delete"===t&&(a="https://frends-social.herokuapp.com/users/".concat(r,"/friends/").concat(o))),"sent_requests"===n&&(a="https://frends-social.herokuapp.com/users/".concat(o,"/requests"),"delete"===t&&(i.sender="true")),"received_requests"===n&&(a="https://frends-social.herokuapp.com/users/".concat(o,"/requests"),"delete"===t&&(i.sender="false")),fetch(a,{method:t,headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(e)},body:JSON.stringify(i)}).then(console.log)},Uo=Po({name:"session",initialState:{value:""},reducers:{writeSession:function(e,t){localStorage.setItem("frends_session",JSON.stringify(t.payload)),e.value=t.payload},deleteSession:function(e){localStorage.setItem("frends_session",""),e.value=""},saveSession:function(e,t){e.value=t.payload},addUserGeneral:function(e,t){Bo(e.value.token,"post",t.payload.field,e.value.user._id,t.payload.elId),e.value.user[t.payload.field].push(t.payload.elId)},removeUserGeneral:function(e,t){Bo(e.value.token,"delete",t.payload.field,e.value.user._id,t.payload.elId),e.value.user[t.payload.field]=e.value.user[t.payload.field].filter((function(e){return e!==t.payload.elId}))},setAllRequests:function(e,t){e.value.user.friends=t.payload.friends,e.value.user.sent_requests=t.payload.sent_requests,e.value.user.received_requests=t.payload.received_requests}}}),qo=Uo.actions,$o=qo.saveSession,Wo=qo.deleteSession,Vo=qo.writeSession,Ho=(qo.addLike,qo.addUserGeneral),Ko=qo.removeUserGeneral,Yo=qo.setAllRequests;const Qo=Uo.reducer;var Xo,Go,Jo,Zo,ea,ta;function na(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var ra,oa,aa,ia=Nn.button(Xo||(Xo=na(["\n  flex-grow: 1;\n  padding: 0.3em 1em;\n  border-radius: 5em;\n  background-color: ",";\n  display: block;\n  font-size: 1.2em;\n  width: 100%;\n  text-align: left;\n  color: ",";\n  cursor: pointer;\n  font-weight: 400;\n  transition: all 0.2s ease-out;\n  transition-property: filter, background-color;\n  :hover {\n    transition: none;\n    background-color: ",";\n  }\n"])),Rn,In,Mn),la=Nn.input(Go||(Go=na(["\n  flex-grow: 1;\n  padding: 0.9rem 1rem;\n  border-radius: 5em;\n  background-color: ",";\n  display: block;\n  transition: all 0.2s ease-out;\n  transition-property: filter, background-color;\n  ::placeholder,\n  & {\n    color: ",";\n    font-weight: 400;\n    font-size: 1.1rem;\n  }\n  :hover,\n  :active {\n    transition: none;\n    background-color: ",";\n  }\n"])),Rn,In,Mn),sa=Nn.button(Jo||(Jo=na(["\n  flex-grow: 1;\n  flex-shrink: 0;\n  border-radius: 0.5rem;\n  font-size: 1rem;\n  padding: 0.5em 1.5em;\n  cursor: pointer;\n  background-color: ",";\n  filter: brightness(1);\n  transition: all 0.2s ease-out;\n  transition-property: filter, background-color;\n  font-weight: 500;\n  :hover {\n    transition: none;\n    filter: brightness(0.8);\n  }\n  &.half-p {\n    width: 50%;\n  }\n  &.blue {\n    background-color: ",";\n    border: 2px solid ",";\n    color: ",";\n    :hover {\n      filter: brightness(1.2);\n    }\n  }\n  &.red {\n    background-color: ",";\n    color: ",";\n    border: 2px solid ",";\n    :hover {\n      filter: brightness(0.8);\n    }\n  }\n  &.transparent {\n    border: 2px solid ",";\n    background-color: ",";\n    color: ",";\n    :hover,\n    &.selected {\n      filter: brightness(1);\n      background-color: ",";\n    }\n  }\n  &.no-grow {\n    flex-grow: 0;\n  }\n  @media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min--moz-device-pixel-ratio: 3),\n    only screen and (-o-min-device-pixel-ratio: 3/1),\n    only screen and (min-device-pixel-ratio: 3) {\n    padding: 1rem;\n  }\n"])),Fn,Ln,"#87a4f1",Fn,zn,Fn,"#ff0409",Mn,Rn,In,Mn),ua=Nn.form(Zo||(Zo=na(["\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  background-color: ",";\n  padding: 1rem;\n  gap: 1rem;\n"])),jn),ca=Nn.input(ea||(ea=na(["\n  border-radius: 0.5rem;\n  background-color: ",";\n  padding: 1rem;\n  font-size: 1.5rem;\n  color: ",";\n  font-weight: 400;\n  ::placeholder {\n    font-size: 1.5rem;\n    color: ",";\n    font-weight: 300;\n  }\n"])),Rn,In,In),fa=Nn.textarea(ta||(ta=na(["\n  border-radius: 0.5rem;\n  background-color: ",";\n  padding: 1rem;\n  font-size: 1.5rem;\n  color: ",";\n  font-weight: 400;\n  min-height: 10rem;\n  ::placeholder {\n    font-size: 1.5rem;\n    color: ",";\n    font-weight: 300;\n  }\n"])),Rn,In,In);function da(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var pa=Nn.div(ra||(ra=da(["\n  width: 100vw;\n  min-height: 100vh;\n  background-color: ",';\n  position: absolute;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  ::before {\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    content: " ";\n    position: fixed;\n    pointer-events: none;\n    background: url("https://www.transparenttextures.com/patterns/dark-denim-3.png");\n    z-index: 1;\n  }\n'])),Tn),ha=Nn.h2(oa||(oa=da(['\n  font-family: "Libre Franklin", sans-serif;\n  font-weight: 700;\n  color: ',";\n  font-size: 20vw;\n  font-style: italic;\n  text-align: center;\n  position: relative;\n"])),Fn),ma=Nn.div(aa||(aa=da(["\n  background-color: ",";\n  border-radius: 50%;\n  width: 50vmax;\n  height: 50vmax;\n  position: absolute;\n  right: -30px;\n  transform: translateX(50%);\n  z-index: 0;\n  filter: blur(40px);\n  opacity: 0.3;\n  animation: subtle 3s ease infinite alternate;\n  &.delay {\n    animation-delay: 0.3s;\n  }\n\n  @keyframes subtle {\n    from {\n      transform: translateX(0%) translateY(-100%);\n    }\n    to {\n      transform: translateX(0%) translateY(100%);\n    }\n  }\n"])),Ln);const ya=function(){var t=Q(),n=We(),r=Z((function(e){return e.session.value}));return e.createElement(pa,null,r&&e.createElement(Fe,{to:"/"}),e.createElement(Xn,{className:"center transparent gap-y"},e.createElement(ma,null),e.createElement(ma,{className:"delay"}),e.createElement(ha,null,"frends"),e.createElement(Zn(),{appId:"1474724352891583",callback:function(e){var r=e.accessToken;r&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"https://s3.amazonaws.com/cdn-origin-etr.akc.org/wp-content/uploads/2017/11/20122208/Samoyed-standing-in-the-forest.jpg";return fetch("https://frends-social.herokuapp.com/auth/facebook",{mode:"cors",method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({access_token:e,profile_photo:t})}).then((function(e,t){if(!t)return e.json()}))}(r,e.picture.data.url).then((function(e){e&&(t(Vo(e)),n.push("/"))}))},fields:"name,email,picture",render:function(t){return e.createElement(sa,{onClick:t.onClick,className:"half-p blue no-grow large",style:{position:"relative",zIndex:1}},"Facebook login")}}),e.createElement(sa,{onClick:function(){fetch("https://frends-social.herokuapp.com/auth/local",{mode:"cors",method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:"testing_friends@yahoo.com",password:"CatPasswordIsACat"})}).then((function(e,t){if(!t)return e.json()})).then((function(e){e&&(t(Vo(e)),n.push("/"))}))},className:"half-p no-grow",style:{position:"relative",zIndex:1}},"Guest login")))};var va,ga,ba,wa;function ka(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ea,Sa,Ca,xa,_a,Oa,Pa=Nn.img(va||(va=ka(["\n  display: block;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n"]))),Na=Nn.div(ga||(ga=ka(["\n  height: 1px;\n  background: ",";\n  flex: 1 1 100%;\n"])),Rn),Aa=Nn.p(ba||(ba=ka(["\n  font-size: 0.9rem;\n  color: ",";\n  &.grey {\n    color: ",";\n  }\n  &.right-align {\n    text-align: right;\n  }\n  &.large {\n    font-size: 1.5rem;\n  }\n  @media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min--moz-device-pixel-ratio: 3),\n    only screen and (-o-min-device-pixel-ratio: 3/1),\n    only screen and (min-device-pixel-ratio: 3) {\n    font-size: 1rem;\n    .large {\n      font-size: 2rem;\n    }\n  }\n"])),Fn,In),Ta=Nn.i(wa||(wa=ka(["\n  color: ",";\n  &.white {\n    color: ",";\n  }\n  &.large {\n    font-size: 1.4rem;\n  }\n"])),In,Fn);function ja(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ra,Ma,Ia=Nn.img(Ea||(Ea=ja(["\n  max-height: 50vh;\n  width: 100%;\n  object-fit: contain;\n  display: block;\n  margin: 0 auto;\n  position: relative;\n  z-index: 1;\n"]))),La=Nn(Je)(Sa||(Sa=ja(['\n  width: 100%;\n  max-height: 50vh;\n  display: block;\n  overflow: hidden;\n  position: relative;\n  ::before {\n    position: absolute;\n    content: "";\n    width: 100%;\n    height: 100%;\n    background: url(',") no-repeat center/cover;\n    z-index: 0;\n    filter: blur(1em);\n    transform: scale(110%);\n  }\n"])),(function(e){return e.image})),Fa=Nn(Je)(Ca||(Ca=ja(["\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  display: flex;\n  &.no-flex {\n    display: block;\n  }\n  @media only screen and (-webkit-min-device-pixel-ratio: 3),\n    only screen and (min--moz-device-pixel-ratio: 3),\n    only screen and (-o-min-device-pixel-ratio: 3/1),\n    only screen and (min-device-pixel-ratio: 3) {\n    font-size: 1.1rem;\n  }\n"])),Fn),za=function(t){var n=t.image,r=t.username,o=t.date,a=t.heading,i=t.handleDots,l=t.id;return e.createElement(Yn,{className:"center-y"},e.createElement(Qn,{to:"/users/".concat(l)},e.createElement(Pa,{src:n})),e.createElement(Xn,null,e.createElement(Yn,{className:"padd-0 baseline-y gap-x-half"},e.createElement(Fa,null,r),e.createElement(Aa,null,a&&" is feeling ".concat(a))),e.createElement(Aa,{className:"grey"},o)),e.createElement(sa,{onClick:i,className:"transparent no-grow"},e.createElement(Ta,{className:"fa-solid fa-ellipsis-vertical"})))},Da=Nn.div(xa||(xa=ja(["\n  margin: 1em 0;\n  border-radius: 0.5rem;\n  overflow: hidden;\n  background-color: ",";\n  width: 100%;\n  &.transparent {\n    background-color: transparent;\n  }\n"])),Rn),Ba=Nn.div(_a||(_a=ja(["\n  color: ",";\n"])),In),Ua=Nn(Je)(Oa||(Oa=ja(["\n  color: ",";\n  display: block;\n  font-size: 1.5rem;\n  text-decoration: none;\n  padding: 1rem 1rem;\n  background-color: ",";\n  word-break: break-word;\n"])),Fn,jn);function qa(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function $a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Wa=function(t){var n,r,o=t.chat,a=t.currChat,i=t.setCurrentChatId,l=t.session,s=t.setRecipient,u=(n=(0,e.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return $a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$a(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],f=u[1];return(0,e.useEffect)((function(){if(o.participants[0]._id===l.user._id)return f(o.participants[1]),void(o._id===a&&s(o.participants[1]));f(o.participants[0]),o._id===a&&s(o.participants[0])}),[a]),e.createElement(sa,{className:a===o._id?"blue":"transparent",onClick:function(){return i(o._id)}},e.createElement(Xn,{className:"center gap-y"},e.createElement(Qn,{to:"#"},e.createElement(Pa,{src:c.profile_photo})),e.createElement(Xn,null,e.createElement(Fa,{to:"#"},c.full_name),e.createElement(Aa,{className:"grey"},o.messages.length?"".concat(o.messages.length," message").concat(o.messages.length>1?"s":""):"No messages"))))},Va=Nn.div(Ra||(Ra=qa(["\n  height: 60vh;\n  background-color: ",";\n  overflow-y: auto;\n  ::-webkit-scrollbar {\n    width: 10px;\n  }\n  ::-webkit-scrollbar-track {\n    background-color: ",";\n  }\n  ::-webkit-scrollbar-thumb {\n    background-color: ",";\n    border-radius: 5px;\n  }\n  &.comments {\n    background-color: ",";\n    height: unset;\n  }\n"])),Rn,jn,In,jn),Ha=Nn.span(Ma||(Ma=qa(["\n  display: inline-block;\n  background-color: ",";\n  margin: 0.2rem 0;\n  align-self: flex-start;\n  padding: 1rem;\n  border-radius: 1rem;\n  max-width: 70%;\n  p {\n    color: ",";\n    font-size: 1.1rem;\n    word-break: break-word;\n  }\n  &.blue {\n    p {\n      color: ",";\n    }\n    background-color: ",";\n    text-align: right;\n    align-self: flex-end;\n  }\n"])),In,Tn,Fn,Ln);const Ka=function(t){var n=t.msg,r=t.session;return e.createElement(Yn,{className:"transparent ".concat(n.sender._id===r.user._id&&"reversed")},e.createElement(Qn,null,e.createElement(Pa,{src:n.sender.profile_photo})),e.createElement(Xn,null,e.createElement(Ha,{message:n,className:n.sender._id===r.user._id&&"blue"},e.createElement(Aa,null,n.text)),e.createElement(Aa,{className:"grey ".concat(n.sender._id===r.user._id&&"right-align")},n.formatted_date)))};function Ya(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Qa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xa=function(){var t,n,r=(0,e.useRef)(null),o=(0,e.useRef)(null),a=Z((function(e){return e.realTime.chatrooms})),i=Ya((0,e.useState)([]),2),l=i[0],s=i[1],u=Ya((0,e.useState)(null===(t=a[0])||void 0===t?void 0:t._id),2),c=u[0],f=u[1],d=Ya((0,e.useState)({}),2),p=d[0],h=d[1],m=Z((function(e){return e.session.value}));return(0,e.useEffect)((function(){s(a.find((function(e){return e._id===c}))),o.current.scroll(0,o.current.scrollHeight)})),(0,e.useEffect)((function(){r.current.scroll({left:100,behavior:"smooth"})}),[]),e.createElement(Da,null,e.createElement(Yn,{ref:r,className:"scroll-x"},null==a?void 0:a.map((function(t){return e.createElement(Wa,{chat:t,currChat:c,setCurrentChatId:f,session:m,setRecipient:h})}))),e.createElement(Va,{ref:o},null==l||null===(n=l.messages)||void 0===n?void 0:n.map((function(t){return e.createElement(Ka,{msg:t,session:m})}))),e.createElement(ua,{onSubmit:function(e){var t="https://frends-social.herokuapp.com/users/".concat(m.user._id,"/chatrooms/").concat(c,"/messages");Io("post",t,m.token,e),document.querySelector('input[name="text"]').value=""}},e.createElement(la,{name:"text",placeholder:"Write a new message for ".concat(p.first_name)}),e.createElement("input",{type:"text",hidden:!0,name:"recipient",value:p.id}),e.createElement(sa,{className:"blue"},"Send Message")))};function Ga(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ja=function(t){var n,r,o=t.id,a=t.requestType,i=(n=(0,e.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Ga(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ga(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0],s=i[1],u=Q(),c=Z((function(e){return e.session.value}));return(0,e.useEffect)((function(){Mo(c.token,o,"user").then((function(e){s(e)}))}),[]),e.createElement(e.Fragment,null,e.createElement(Na,null),e.createElement(Yn,{className:"center-y"},e.createElement(Qn,null,e.createElement(Pa,{src:l.profile_photo})),e.createElement(Xn,null,e.createElement(Fa,null,l.full_name)),"received_requests"===a?e.createElement(e.Fragment,null,e.createElement(sa,{className:"blue no-grow",onClick:function(){u(Ho({field:"friends",elId:l._id}))}},"Accept"),e.createElement(sa,{className:"red no-grow",onClick:function(){u(Ko({field:"received_requests",elId:l._id}))}},"Decline")):e.createElement(sa,{className:"red no-grow",onClick:function(){u(Ko({field:"sent_requests",elId:l._id}))}},"Cancel request")))};function Za(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ei=function(){var t,n,r=(t=(0,e.useState)("received_requests"),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Za(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Za(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1],i=Z((function(e){return e.session.value}));return e.createElement(Da,null,e.createElement(Yn,null,e.createElement(sa,{className:"transparent ".concat("received_requests"===o&&"selected"),onClick:function(){return a("received_requests")}},"Pending Requests"),e.createElement(sa,{className:"transparent ".concat("sent_requests"===o&&"selected"),onClick:function(){return a("sent_requests")}},"Sent Requests")),i.user&&i.user[o].map((function(t){return e.createElement(Ja,{id:t,requestType:o})})))};var ti=Po({name:"activeForm",initialState:{value:""},reducers:{setActiveForm:function(e,t){e.value=t.payload}}}),ni=ti.actions.setActiveForm;const ri=ti.reducer;var oi=Po({name:"currentComment",initialState:{value:""},reducers:{setCurrentComment:function(e,t){e.value=t.payload}}}),ai=oi.actions.setCurrentComment;const ii=oi.reducer;var li=Po({name:"currentPost",initialState:{value:""},reducers:{setCurrentPost:function(e,t){e.value=t.payload}}}),si=li.actions.setCurrentPost;const ui=li.reducer;function ci(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const fi=function(t){var n,r,o=t.handleLike,a=t.liked,i=t.comment,l=t.session,s=t.post,u=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ci(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ci(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],f=u[1],d=Q();return e.createElement(Yn,{className:"padd-y"},e.createElement(Fa,{to:"#",onClick:o,style:{color:a&&Ln}},e.createElement(Ta,{className:"fa-solid fa-thumbs-up",style:{color:a&&Ln}})," ","  Like"),(i.author._id===l.user._id||s.author._id===l.user._id)&&e.createElement(e.Fragment,null,e.createElement(Aa,null,"-"),e.createElement(Fa,{to:"#",onClick:function(){d(si(s)),d(ai(i)),d(ni("comment-edit"))}},e.createElement(Ta,{className:"fa-solid fa-highlighter"}),"  Edit"),e.createElement(Aa,null,"-"),e.createElement(Fa,{to:"#",onClick:function(){return e=l.token,t=s._id,n=i._id,void(c?(d(Ao()),function(e,t,n){return fetch("https://frends-social.herokuapp.com/posts/".concat(t,"/comments/").concat(n),{mode:"cors",method:"delete",headers:{Authorization:"Bearer ".concat(e)}})}(e,t,n).then((function(){Mo(e,t,"post").then((function(e){d(si(e)),d(Ao()),f(!1)}))}))):f(!0));var e,t,n},style:{color:zn,display:"flex",alignItems:"center"}},e.createElement(Ta,{style:{color:zn},className:"fa-solid fa-xmark"}),"  ",c?"Are you sure?":"Delete")))};function di(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return pi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const hi=function(t){var n,r,o,a=t.comment,i=t.post,l=t.session,s=t.confirm,u=di((0,e.useState)(!1),2),c=u[0],f=u[1],d=di((0,e.useState)(a.likes.length),2),p=d[0],h=d[1];return(0,e.useEffect)((function(){a.likes&&f(a.likes.includes(l.user._id))}),[]),e.createElement(Yn,{className:"transparent"},e.createElement(Qn,{to:"/users/".concat(null==a||null===(n=a.author)||void 0===n?void 0:n._id)},e.createElement(Pa,{src:null==a||null===(r=a.author)||void 0===r?void 0:r.profile_photo})),e.createElement(Xn,null,e.createElement(Ha,null,e.createElement(Aa,null,a.text)),e.createElement(Aa,{className:"grey "},"".concat(null===(o=a.author)||void 0===o?void 0:o.full_name," • ").concat(a.formatted_creation)," •"," ",e.createElement(Ta,{className:"fa-solid fa-heart"}),"  ",p," Like",1===p?"":"s"),e.createElement(fi,{handleLike:function(){if(c)return zo(l.token,i._id,a._id,"delete"),f(!1),void h((function(e){return e-1}));zo(l.token,i._id,a._id,"post"),f(!0),h((function(e){return e+1}))},liked:c,comment:a,session:l,post:i,confirm:s})))},mi=function(t){var n=t.comments,r=t.post,o=Z((function(e){return e.session.value}));return e.createElement(Va,{className:"comments"},n.map((function(t){return t.author&&e.createElement(hi,{key:t._id,comment:t,session:o,post:r,confirm})})))},yi=function(t){var n=t.user,r=t.handleComment;return e.createElement(Yn,null,e.createElement(Qn,null,e.createElement(Pa,{src:n.profile_photo})),e.createElement(ia,{onClick:r},"Write a comment..."))};function vi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return gi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function gi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bi=function(t){var n=t.handleComment,r=t.handleDelete,o=t.setNumberOfLikes,a=t.post,i=t.session,l=vi((0,e.useState)(!1),2),s=l[0],u=l[1],c=vi((0,e.useState)(!1),2),f=c[0],d=c[1];return(0,e.useEffect)((function(){a.likes&&u(a.likes.includes(i.user._id))}),[]),e.createElement(Yn,{className:"wrap padd-x"},e.createElement(Na,null),e.createElement(sa,{className:s?"blue":"transparent",onClick:function(){if(s)return Lo("delete",a._id,i.token),u(!1),void o((function(e){return e-1}));Lo("post",a._id,i.token),u(!0),o((function(e){return e+1}))}},e.createElement(Ta,{className:"fa-solid fa-heart"})," Like"),e.createElement(sa,{className:"transparent",onClick:n},e.createElement(Ta,{className:"fa-solid fa-comments"})," Comment"),a.author._id===i.user._id&&e.createElement(sa,{className:"red",onClick:function(){f?(r(a._id,a.author._id),d(!1)):d(!0)}},e.createElement(Ta,{className:"fa-solid fa-trash-can white"}),f?"  Are you sure?":"  Delete Post"),e.createElement(Na,null))},wi=function(t){var n=t.numberOfLikes,r=t.numberOfComments,o=t.id;return e.createElement(Yn,{className:"center-y spb-x padd-x padd-1-2"},e.createElement(Ba,null,e.createElement(Ta,{className:"fa-solid fa-heart"})," ",n," Like",1===n?"":"s"),e.createElement(Fa,{to:"/posts/".concat(o)},r," comment",1===r?"":"s"))};function ki(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ei(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Si(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||Ci(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ci(e,t){if(e){if("string"==typeof e)return xi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xi(e,t):void 0}}function xi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _i=function(t){var n=t.post,r=t.handleDelete,o=t.query,a=Si((0,e.useState)([]),2),i=a[0],l=a[1],s=Z((function(e){return e.session.value})),u=Z((function(e){return e.currentPost.value})),c=Si((0,e.useState)(n),2),f=c[0],d=c[1],p=Si((0,e.useState)(f.likes.length),2),h=p[0],m=p[1],y=Q(),v=function(){y(si(n)),y(ni("comment"))};return(0,e.useEffect)((function(){if(u._id===n._id)return console.log(f),d(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ki(Object(n),!0).forEach((function(t){Ei(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ki(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},u)),void l((e=u.comments,function(e){if(Array.isArray(e))return xi(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ci(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()));var e;d(f),l(f.comments)}),[u]),e.createElement(Da,{className:"up-motion"},n.author&&e.createElement(za,{image:n.author.profile_photo,username:n.author.full_name,date:f.formatted_creation,heading:f.heading,handleDots:function(){y(si(f)),y(ni("post-more"))},id:n.author._id}),f.text&&e.createElement(Ua,{to:"/posts/".concat(n._id)},Fi(f.text,o)),f.image&&e.createElement(La,{to:"/posts/".concat(f._id),image:f.url_formatter},e.createElement(Ia,{src:f.url_formatter})),e.createElement(wi,{numberOfLikes:h,numberOfComments:f.comments.length,id:f._id}),e.createElement(bi,{handleComment:v,post:n,session:s,handleDelete:r,setNumberOfLikes:m}),i&&e.createElement(mi,{comments:i,post:f}),e.createElement(yi,{user:s.user,handleComment:v}))},Oi=function(t){var n=t.post,r=t.query,o=Q(),a=We(),i=Z((function(e){return e.session.value}));return n.author&&e.createElement(_i,{post:n,handleDelete:function(e,t){o(Ao()),Fo(i.token,e,t).then((function(){o(Ao()),a.push("/")}))},query:r})};function Pi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ni=function(t){var n,r,o=t.user,a=t.query,i=Z((function(e){return e.session.value.user})),l=(n=(0,e.useState)(null),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Pi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pi(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],c=Q();return(0,e.useEffect)((function(){i.friends.includes(o._id)?u("friends"):i.sent_requests.includes(o._id)?u("sent_requests"):i.received_requests.includes(o._id)?u("received_requests"):u(null)}),[i]),o._id&&e.createElement(e.Fragment,null,e.createElement(Na,null),e.createElement(Yn,{className:"center-y"},e.createElement(Qn,{to:"/users/".concat(o._id)},e.createElement(Pa,{src:o.profile_photo})),e.createElement(Xn,null,e.createElement(Fa,{className:"no-flex",to:"/users/".concat(o._id)},Fi(o.full_name,a))),s||o._id===i._id?o._id!==i._id&&e.createElement(sa,{className:"red no-grow",onClick:function(){c(Ko({field:s,elId:o._id}))}},"friends"===s?"Remove friend":"Cancel friend request"):e.createElement(sa,{className:"blue no-grow",onClick:function(){return c(Ho({field:"sent_requests",elId:o._id}))}},"Send request")))};var Ai,Ti;function ji(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ri(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ri(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ri(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Mi(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Ii=Nn.span(Ai||(Ai=Mi(["\n  position: relative;\n  z-index: 1;\n"]))),Li=Nn.span(Ti||(Ti=Mi(['\n  position: relative;\n  &::before {\n    content: "";\n    position: absolute;\n    width: 110%;\n    height: 110%;\n    left: -5%;\n    top: -5%;\n    background-color: ',";\n    z-index: 0;\n    border-radius: 0.5rem;\n  }\n"])),Ln),Fi=function(t,n){if(!t||!n)return t;var r=new RegExp("(\\s)?(".concat(n,")(\\s)?"),"gi");return t.split(r).reduce((function(t,n){var o=n;return n?(r.test(n)&&(o=e.createElement(Li,null,e.createElement(Ii,null,n))),t.push(o),t):t}),[])};const zi=function(){var t=ji((0,e.useState)(""),2),n=t[0],r=t[1],o=ji((0,e.useState)([]),2),a=o[0],i=o[1],l=ji((0,e.useState)([]),2),s=l[0],u=l[1],c=ji((0,e.useState)(""),2),f=c[0],d=c[1],p=Z((function(e){return e.session.value}));return e.createElement(Da,{className:"transparent"},e.createElement(ua,null,e.createElement(Yn,{className:"padd-0"},e.createElement(Xn,null,e.createElement(ca,{onChange:function(e){if(n&&clearTimeout(n),!(e.target.value.length<3)){var t=setTimeout((function(){!function(e,t){(function(e,t){return fetch("https://frends-social.herokuapp.com/search/".concat(t),{headers:{Authorization:"Bearer ".concat(e)}}).then((function(e){return e.json()}))})(e,t).then((function(e){i(e.users),u(e.posts),d(t)}))}(p.token,e.target.value)}),1e3);r(t)}},placeholder:"What are you looking for?"})),e.createElement(sa,{className:"blue no-grow"},e.createElement(Ta,{className:"fa-solid fa-magnifying-glass white"})))),a.map((function(t){return e.createElement(Ni,{user:t,query:f})})),s.map((function(t){return e.createElement(Oi,{post:t,query:f})})))};function Di(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bi=function(t){var n,r,o=t.notification,a=(n=(0,e.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Di(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Di(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],l=a[1],s=Z((function(e){return e.session.value}));return(0,e.useEffect)((function(){Do(s.token,"put",s.user._id,o._id),o.text.includes("like")?l("fa-heart"):l("fa-comment")}),[]),e.createElement(e.Fragment,null,e.createElement(Na,null),e.createElement(Yn,{className:"center-y spb-x"},e.createElement(Fa,{to:"/posts/".concat(o.url)},e.createElement(Xn,null,e.createElement(Yn,{className:"center-y"},e.createElement(Ta,{className:"large fa-solid ".concat(i),style:{color:Ln}}),e.createElement(Aa,null,o.text)))),e.createElement(sa,{className:"transparent no-grow",onClick:function(){Do(s.token,"delete",s.user._id,o._id)}},e.createElement(Ta,{className:"fa-solid fa-circle-xmark large"}))))},Ui=function(){var t,n,r=Z((function(e){return e.realTime.notifications})),o=Z((function(e){return e.session.value}));return null!=o&&null!==(t=o.user)&&void 0!==t&&t.first_name?e.createElement(Da,null,e.createElement(Yn,null,e.createElement(sa,{className:"transparent selected"},e.createElement(Ta,{className:"fa-solid fa-bell"})," ",null==o||null===(n=o.user)||void 0===n?void 0:n.first_name,"'s notification center")),r.map((function(t){return e.createElement(Bi,{notification:t})}))):null};function qi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const $i=function(t){var n,r,o=t.user,a=t.session,i=Z((function(e){return e.session.value.user})),l=(n=(0,e.useState)(null),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return qi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qi(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],c=We(),f=Q();return(0,e.useEffect)((function(){i.friends.includes(o._id)?u("friends"):i.sent_requests.includes(o._id)?u("sent_requests"):i.received_requests.includes(o._id)?u("received_requests"):u(null)}),[i]),a.user?(console.log(s),e.createElement(e.Fragment,null,o._id===a.user._id&&e.createElement(sa,{onClick:function(){return f(ni("profile-edit"))}},"Edit Profile"),!s&&o._id!==a.user._id&&e.createElement(sa,{className:"blue",onClick:function(){return f(Ho({field:"sent_requests",elId:o._id}))}},"Add as a friend"),o._id!==a.user._id&&e.createElement(sa,{onClick:function(){var e,t,n;(e=a.token,t=o._id,n="https://frends-social.herokuapp.com/users/".concat(t,"/chatrooms"),fetch(n,{method:"post",headers:{Authorization:"Bearer ".concat(e)}})).then((function(){c.push("/chatrooms")}))}},"Send message"),"sent_requests"===s&&e.createElement(sa,{className:"red",onClick:function(){f(Ko({field:"sent_requests",elId:o._id}))}},"Cancel request"),"received_requests"===s&&e.createElement(sa,{className:"red",onClick:function(){f(Ko({field:"received_requests",elId:o._id}))}},"Decline request"))):null},Wi=function(t){var n=t.user,r=t.session;return null!=n&&n._id?e.createElement(Da,null,e.createElement(Yn,null,e.createElement(Xn,{className:"center gap-y"},e.createElement(Qn,{className:"large",to:"#"},e.createElement(Pa,{src:n.profile_photo})),e.createElement(Aa,{className:"large"},n.full_name),e.createElement(Yn,{className:"padd-0"},e.createElement($i,{user:n,session:r}))))):null};var Vi,Hi,Ki,Yi;function Qi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Xi(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var Gi=Nn(Je)(Vi||(Vi=Xi(['\n  font-family: "Libre Franklin", sans-serif;\n  font-weight: 700;\n  color: ',";\n  font-size: 3rem;\n  font-style: italic;\n  text-shadow: 0.1rem 0.1rem 0 ","2d;\n  text-align: center;\n  text-decoration: none;\n"])),Fn,jn),Ji=Nn.nav(Hi||(Hi=Xi(["\n  position: fixed;\n  padding: 0.4rem 2rem;\n  width: 100%;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  background-color: ",";\n  border-bottom: 1px solid ",";\n"])),jn,Mn),Zi=Nn.div(Ki||(Ki=Xi(["\n  max-width: 1100px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  .nav-size {\n    padding: 0.6rem 1rem;\n    margin-left: 1rem;\n  }\n"]))),el=Nn.div(Yi||(Yi=Xi(["\n  height: ","px;\n  margin-bottom: 1rem;\n"])),(function(e){return e.height}));const tl=function(t){var n,r,o=t.unreadNotifications,a=(0,e.useRef)(null),i=(n=(0,e.useState)(0),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Qi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qi(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=i[0],s=i[1];(0,e.useEffect)((function(){s(a.current.offsetHeight)}),[]);var u=Z((function(e){return e.session.value}));return e.createElement(e.Fragment,null,e.createElement(Ji,{ref:a},e.createElement(Zi,null,e.createElement(Gi,{to:"/"},"frends"),e.createElement(Xn,null,e.createElement(Fa,{to:"/search"},e.createElement(ia,{className:"nav-size mobile-hidden"},e.createElement(Yn,{className:"invert padd-0 transparent"},e.createElement(Ta,{className:"fa-solid fa-magnifying-glass large"}),e.createElement("span",{className:"mobile-hidden"},"Search for..."))))),e.createElement(Yn,{className:"padd-0 center-y"},e.createElement(Fa,{to:"/search"},e.createElement(sa,{className:"transparent no-grow mobile-only"},e.createElement(Ta,{className:"fa-solid fa-magnifying-glass large"}))),e.createElement(Fa,{to:"/notifications"},e.createElement(sa,{className:o.length?"blue no-grow":"transparent no-grow"},e.createElement(Ta,{className:"fa-solid fa-bell large"}))),e.createElement(Fa,{to:"/chatrooms"},e.createElement(sa,{className:"transparent no-grow"},e.createElement(Ta,{className:"fa-solid fa-message large"}))),u.user&&e.createElement(Qn,{to:"/users/".concat(u.user._id)},e.createElement(Pa,{src:u.user.profile_photo}))))),e.createElement(el,{height:l}))},nl=function(){var t=Z((function(e){return e.session.value})),n=Q();return e.createElement(Da,null,e.createElement(Yn,null,e.createElement(Qn,null,e.createElement(Pa,{src:t&&t.user.profile_photo})),e.createElement(ia,{onClick:function(){return n(ni("emotion-post"))}},"What's on your mind, ",t&&t.user.first_name,"?")),e.createElement(Na,null),e.createElement(Yn,{className:"wrap"},e.createElement(sa,{className:"transparent",onClick:function(){return n(ni("image-post"))},style:{color:"#7DCE82"}},e.createElement(Ta,{className:"fa-solid fa-image",style:{color:"#7DCE82"}}),"  Create image post"),e.createElement(sa,{className:"blue mobile-last",onClick:function(){return n(ni("text-post"))}},e.createElement(Ta,{className:"fa-solid fa-align-left white"}),"  Create text post"),e.createElement(sa,{className:"transparent",onClick:function(){return n(ni("emotion-post"))},style:{color:"#FED99B"}},e.createElement(Ta,{style:{color:"#FED99B"},className:"fa-solid fa-face-grin-stars"}),"  Create emotion post")))};function rl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ol=function(t){var n,r,o=t.reloadFeed,a=t.setReloadFeed,i=Q(),l=(n=(0,e.useState)([]),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return rl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rl(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1],c=Z((function(e){return e.session.value}));(0,e.useEffect)((function(){c&&(i(Ao()),Mo(c.token,c.user._id).then((function(e,t){u(e),i(Ao()),window.scrollTo(0,0)})))}),[c,o]);var f=function(e,t){i(Ao),Fo(c.token,e,t).then((function(){i(Ao),a(Date.now())}))};return e.createElement(e.Fragment,null,e.createElement(nl,null),s.map((function(t){return e.createElement(_i,{key:t._id,post:t,handleDelete:f})})))},al=function(){var t=Z((function(e){return e.session.value})),n=Z((function(e){return e.currentPost.value})),r=Q();return e.createElement(Gn,null,e.createElement(Da,null,e.createElement(Yn,null,e.createElement(Xn,{className:"gap-y"},t.user.id===n.author._id&&e.createElement(sa,{onClick:function(){r(ni("post-edit"))}},"Edit post"),e.createElement("a",{target:"_blank",style:{flexGrow:1,display:"flex",textDecoration:"none"},href:"https://github.com/diegoromerodev",rel:"noreferrer"},e.createElement(sa,{className:"blue"},"Visit my github")),e.createElement(sa,{className:"red",onClick:function(){r(ni("")),r(si(""))}},"Cancel")))))};var il,ll,sl=n(4236);function ul(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var cl=Nn.div(il||(il=ul(["\n  border-radius: 0.5rem;\n  padding: 2rem;\n  background-color: ",";\n  display: inline-block;\n  transform: scale(0);\n  transition: all 0.3s cubic-bezier(0.09, 0.59, 0.18, 1.19);\n  &.active {\n    transform: scale(1);\n  }\n"])),Tn),fl=Nn.div(ll||(ll=ul(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: fixed;\n  align-items: center;\n  justify-content: center;\n  z-index: 4;\n  left: 0;\n  top: 0;\n  opacity: 0;\n  background-color: ","b3;\n  transition: all 0.3s cubic-bezier(0.09, 0.59, 0.18, 1.19);\n  pointer-events: none;\n  &.active {\n    opacity: 1;\n    pointer-events: all;\n  }\n"])),Tn);const dl=function(){var t=Z((function(e){return e.loading.value}));return e.createElement(fl,{className:t&&"active"},e.createElement(cl,{className:t&&"active"},e.createElement(sl.Grid,{fill:Ln})))},pl=function(t){var n=t.user,r=Q();return e.createElement(Yn,{className:"center-y"},e.createElement(Qn,null,e.createElement(Pa,{src:n.profile_photo})),e.createElement(Xn,null,e.createElement(Aa,{className:"grey"},"Logged in as"),e.createElement(Fa,null,n.full_name)),e.createElement(sa,{className:"transparent no-grow",onClick:function(){return r(ni(""))}},e.createElement(Ta,{className:"fa-solid fa-circle-xmark large"})))};function hl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ml=W((function(e){var t=e.activeForm,n=e.session,r=e.currentPost,o={};return r.value&&(o=r.value.author),{type:t.value,session:n.value,post:r.value,author:o}}))((function(t){var n,r,o=t.type,a=t.session,i=t.dispatch,l=(t.setReloadFeed,t.author),s=t.post,u=(n=(0,e.useState)({}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return hl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hl(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),c=u[0],f=u[1];return(0,e.useEffect)((function(){f(function(e){var t="",n="";switch(e){case"comment":t="fa-comment-dots",n="Write your comment...";break;case"image-post":t="fa-camera-retro",n="Describe the photo...";break;case"emotion-post":t="fa-face-grin-tears",n="Tell us about it...";break;default:t="fa-book-open",n="Write your thoughts..."}return{icon:t,message:n}}(o))}),[]),e.createElement(Gn,null,e.createElement(Da,{className:"pop-on"},e.createElement(pl,{user:a.user}),e.createElement(ua,{onSubmit:function(e){i(Ao());var t="comment"===o?"https://frends-social.herokuapp.com/posts/".concat(s._id,"/comments"):"https://frends-social.herokuapp.com/users/".concat(a.user._id,"/posts");Io("post",t,a.token,e).then((function(){i(ni("")),Mo(a.token,s.id,"post").then((function(e){i(si(e)),i(Ao())}))}))},encType:"multipart/form-data"},e.createElement(sa,{className:"transparent selected no-grow"},e.createElement(Ta,{className:"fa-solid ".concat(c.icon)})," ","New ".concat(o.replace("-"," ")),l.full_name&&" on ".concat(l.full_name).concat("s"===l.full_name[l.full_name.length-1]?"'":"'s"," post")),"emotion-post"===o&&e.createElement(ca,{name:"heading",placeholder:"How are you feeling, ".concat(a.user.first_name,"? 🐵, 😴 or 💋?")}),e.createElement(fa,{name:"text",placeholder:c.message}),"image-post"===o&&e.createElement(ca,{name:"image",type:"file",placeholder:"Show us with a picture"}),e.createElement(Yn,{className:"padd-0"},e.createElement(sa,{className:"blue"},"Save ".concat("comment"===o?"comment":"post")),e.createElement(sa,{onClick:function(){return i(ni(""))}},"Cancel and go back")))))})),yl=W((function(e){var t=e.activeForm,n=e.session,r=e.currentComment,o=e.currentPost;return{type:t.value,session:n.value,post:o.value,comment:r.value}}))((function(t){var n=t.session,r=t.dispatch,o=t.comment,a=t.post;return e.createElement(Gn,null,e.createElement(Da,{className:"pop-on"},e.createElement(pl,{user:n.user}),e.createElement(ua,{onSubmit:function(e){r(Ao());var t="https://frends-social.herokuapp.com/posts/".concat(a._id,"/comments/").concat(o._id);Io("put",t,n.token,e).then((function(){r(ni("")),Mo(n.token,a.id,"post").then((function(e){r(si(e)),r(Ao())}))}))},encType:"multipart/form-data"},e.createElement(sa,{className:"transparent selected no-grow"},e.createElement(Ta,{className:"fa-solid fa-keyboard"}),"  Editing comment"),e.createElement(fa,{name:"text",placeholder:"Add something to say",defaultValue:o.text}),e.createElement(Yn,{className:"padd-0"},e.createElement(sa,{className:"blue"},"Save comment"),e.createElement(sa,{onClick:function(){return r(ni(""))}},"Cancel and go back")))))})),vl=W((function(e){var t=e.activeForm,n=e.session,r=e.currentPost,o={};return r.value&&(o=r.value.author),{type:t.value,session:n.value,post:r.value,author:o}}))((function(t){t.type;var n=t.session,r=t.dispatch,o=t.post;return e.createElement(Gn,null,e.createElement(Da,{className:"pop-on"},e.createElement(pl,{user:n.user}),e.createElement(ua,{onSubmit:function(e){r(Ao());var t="https://frends-social.herokuapp.com/users/".concat(n.user._id,"/posts/").concat(o._id);Io("put",t,n.token,e).then((function(e){r(ni("")),Mo(n.token,o.id,"post").then((function(e){r(si(e)),r(Ao())}))}))},encType:"multipart/form-data"},e.createElement(sa,{className:"transparent selected no-grow"},e.createElement(Ta,{className:"fa-solid fa-highlighter"}),"  Editing post"),o.heading&&e.createElement(ca,{name:"heading",placeholder:"How are you feeling, ".concat(n.user.first_name,"? 🐵, 😴 or 💋?"),defaultValue:o.heading}),e.createElement(fa,{name:"text",placeholder:"Tell us about anything...",defaultValue:o.text}),o.image&&e.createElement(ca,{name:"image",type:"file",placeholder:"Show us with a picture"}),e.createElement(Yn,{className:"padd-0"},e.createElement(sa,{className:"blue"},"Save post"),e.createElement(sa,{onClick:function(){return r(ni(""))}},"Cancel and go back")))))})),gl=function(){var t=Q(),n=We(),r=Z((function(e){return e.session.value}));return e.createElement(Gn,null,e.createElement(Da,null,e.createElement(Yn,{className:"center-y"},e.createElement(Qn,null,e.createElement(Pa,{src:r.user.profile_photo})),e.createElement(Xn,null,e.createElement(Aa,{className:"grey"},"Logged in as"),e.createElement(Fa,null,r.user.full_name)),e.createElement(sa,{className:"transparent no-grow",onClick:function(){return t(ni(""))}},e.createElement(Ta,{className:"fa-solid fa-circle-xmark large"}))),e.createElement(ua,{onSubmit:function(e){t(Ao());var o="https://frends-social.herokuapp.com/users/".concat(r.user._id,"/");n.push("/login"),Io("put",o,r.token,e).then((function(){t(ni("")),t(Wo()),t(Ao())}))},encType:"multipart/form-data"},e.createElement(sa,{className:"transparent selected no-grow"},e.createElement(Ta,{className:"fa-solid fa-wrench"})," Edit profile"),e.createElement(ca,{name:"profile_photo",type:"file",placeholder:"Change profile picture"}),e.createElement(ca,{placeholder:"First name",name:"first_name",defaultValue:r.user.first_name}),e.createElement(ca,{placeholder:"Last name",name:"last_name",defaultValue:r.user.last_name}),e.createElement(Yn,{className:"padd-0"},e.createElement(sa,{className:"blue"},"Save profile"),e.createElement(sa,{onClick:function(){return t(ni(""))}},"Cancel and go back")))))},bl=function(t){var n=t.setReloadFeed,r=Z((function(e){return e.activeForm.value}));return e.createElement(fl,{className:r&&"active"},("comment"===r||"post"===r.split("-")[1])&&e.createElement(ml,{type:r,setReloadFeed:n}),"post-more"===r&&e.createElement(al,null),"post-edit"===r&&e.createElement(vl,null),"comment-edit"===r&&e.createElement(yl,null),"profile-edit"===r&&e.createElement(gl,null))};var wl=n(4428);wl.Manager,wl.Socket;const kl=wl;var El=Po({name:"realTime",initialState:{notifications:[],chatrooms:[]},reducers:{setField:function(e,t){e[t.payload.field]=t.payload.data}}}),Sl=El.actions.setField;const Cl=El.reducer,xl=function(t){var n=t.setUnreadNotifications,r=Z((function(e){return e.session.value})),o=Z((function(e){return e.realTime.notifications})),a=Q();return(0,e.useEffect)((function(){var e,t,n,o=kl("https://frends-social.herokuapp.com/");return o.on("connect",(function(){o.emit("enter",r.user._id)})),o.on("message",(function(){var e;Mo(r.token,null===(e=r.user)||void 0===e?void 0:e._id,"chatrooms").then((function(e){a(Sl({field:"chatrooms",data:e}))}))})),o.on("notification",(function(){var e;Mo(r.token,null===(e=r.user)||void 0===e?void 0:e._id,"notifications").then((function(e){a(Sl({field:"notifications",data:e}))}))})),o.on("friend",(function(){var e;Mo(r.token,null===(e=r.user)||void 0===e?void 0:e._id,"user").then((function(e){if(e){var t=e.friends,n=e.sent_requests,r=e.received_requests;a(Yo({friends:t,sent_requests:n,received_requests:r}))}}))})),Mo(r.token,null===(e=r.user)||void 0===e?void 0:e._id,"chatrooms").then((function(e){a(Sl({field:"chatrooms",data:e}))})),Mo(r.token,null===(t=r.user)||void 0===t?void 0:t._id,"notifications").then((function(e){a(Sl({field:"notifications",data:e}))})),Mo(r.token,null===(n=r.user)||void 0===n?void 0:n._id,"user").then((function(e){if(e){var t=e.friends,n=e.sent_requests,r=e.received_requests;a(Yo({friends:t,sent_requests:n,received_requests:r}))}})),function(){return o.disconnect()}}),[]),(0,e.useEffect)((function(){n(o.filter((function(e){return!e.read})))}),[o]),e.createElement(e.Fragment,null)};function _l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ol(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ol(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ol(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Pl=function(){var t,n=Ve().userId,r=Z((function(e){return e.session.value})),o=Q(),a=We(),i=_l((0,e.useState)({}),2),l=i[0],s=i[1],u=_l((0,e.useState)([]),2),c=u[0],f=u[1];(0,e.useEffect)((function(){Mo(r.token,n,"user").then((function(e){"_id"in e?s(e):a.push("/")})),Mo(r.token,n).then((function(e){f(e)}))}),[n]);var d=function(e,t){o(Ao()),Fo(r.token,e,t).then((function(){o(Ao()),a.push("/")}))};return e.createElement(e.Fragment,null,e.createElement(Wi,{user:l,session:r}),n===(null==r||null===(t=r.user)||void 0===t?void 0:t._id)&&e.createElement(ei,null),c.map((function(t){return t.author&&e.createElement(_i,{post:t,handleDelete:d})})))};function Nl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Al=function(){var t,n,r=We(),o=Ve().postId,a=(t=(0,e.useState)(null),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Nl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nl(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],l=a[1],s=Q(),u=Z((function(e){return e.session.value}));return(0,e.useEffect)((function(){s(Ao()),Mo(u.token,o,"post").then((function(e){if(!e._id)return r.push("/");l(e),s(Ao())}))}),[o]),i&&e.createElement(_i,{post:i,handleDelete:function(e,t){s(Ao()),Fo(u.token,e,t).then((function(){s(Ao()),r.push("/")}))}})};function Tl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return jl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Rl=function(){var t=Z((function(e){return e.session.value})),n=Tl((0,e.useState)(Date.now()),2),r=n[0],o=n[1],a=Tl((0,e.useState)([]),2),i=a[0],l=a[1];return e.createElement(e.Fragment,null,!t&&e.createElement(Fe,{to:"/login"}),e.createElement(xl,{setUnreadNotifications:l,session:t}),t.user&&e.createElement(e.Fragment,null,e.createElement(tl,{unreadNotifications:i}),e.createElement(bl,{setReloadFeed:o}),e.createElement(Ue,{path:"/",exact:!0},e.createElement(ol,{reloadFeed:r,setReloadFeed:o})),e.createElement(Ue,{path:"/chatrooms"},e.createElement(Xa,null)),e.createElement(Ue,{path:"/requests"},e.createElement(ei,null)),e.createElement(Ue,{path:"/notifications"},e.createElement(Ui,null)),e.createElement(Ue,{path:"/search"},e.createElement(zi,null)),e.createElement(Ue,{path:"/users/:userId"},e.createElement(Pl,null)),e.createElement(Ue,{path:"/posts/:postId"},e.createElement(Al,null))))},Ml=function(){var t=Q();return(0,e.useEffect)((function(){var e=localStorage.getItem("frends_session");e&&t($o(JSON.parse(e)))}),[]),e.createElement(Gn,null,e.createElement(dl,null),e.createElement(He,null,e.createElement(Dn,null),e.createElement(qe,null,e.createElement(Ue,{path:"/login"},e.createElement(ya,null)),e.createElement(Ue,{path:"/"},e.createElement(Rl,null)))))},Il=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new xo);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(ho):r.push(ho.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,l=void 0===i?n():i,s=r.devTools,u=void 0===s||s,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof a)t=a;else{if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:io.INIT}))throw new Error(ro(12));if(void 0===n(void 0,{type:io.PROBE_UNKNOWN_ACTION()}))throw new Error(ro(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var s=i[l],u=n[s],c=e[s],f=u(c,t);if(void 0===f)throw t&&t.type,new Error(ro(14));o[s]=f,r=r||f!==c}return(r=r||i.length!==Object.keys(e).length)?o:e}}(a)}var h=l;"function"==typeof h&&(h=h(n));var m=co.apply(void 0,h),y=uo;u&&(y=Co(So({trace:!1},"object"==typeof u&&u)));var v=[m];return Array.isArray(p)?v=vo([m],p):"function"==typeof p&&(v=p(v)),so(t,f,y.apply(void 0,v))}({reducer:{session:Qo,loading:To,activeForm:ri,currentPost:ui,currentComment:ii,realTime:Cl}});t.render(e.createElement(f,{store:Il},e.createElement(Ml,null)),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQThDbXZFLEdBQXVCLEtBR2pGclgsRUFBVXFHLEdBQVE2bEIsRUFDbEJGLEVBQWFBLEdBQWNFLElBQW9CRCxFQUlqRCxPQURBRCxFQUFhQSxHQUFjRixFQUFpQnhyRixTQUFXK0csT0FBT3lCLEtBQUs2a0MsR0FBT3J0QyxRQUN0RDAvRCxFQUFZcnlCLEdFMUZkdytDLENBQWdCOVQsR0FLbEMsSUFBSStULEVBQWtCMVMsRUFDUyxtQkFBcEIwUyxJQUNQQSxFQUFrQkEsRUFBZ0JuQixJQVF0QyxJQUFJb0IsRUFBcUJoVCxHQUFnQnYzRSxXQUFNLEVBQVFzcUYsR0FDbkRFLEVBQWVuVCxHQUNmb1MsSUFDQWUsRUFBZTNSLEdBQW9CRixHQUFlLENBQzlDOFIsT0FBTyxHQUNZLGlCQUFiaEIsR0FBeUJBLEtBRXZDLElBQUlpQixFQUFpQixDQUFDSCxHQVF0QixPQVBJN3BGLE1BQU1tWixRQUFRK3ZFLEdBQ2RjLEVBQWlCdFMsR0FBYyxDQUFDbVMsR0FBcUJYLEdBRTNCLG1CQUFkQSxJQUNaYyxFQUFpQmQsRUFBVWMsSUFHeEJwVSxHQUFZNFMsRUFBYTFTLEVBRFRnVSxFQUFheHFGLFdBQU0sRUFBUTBxRixJb0R0ZHRELENBQThCLENBQzVCblUsUUFBUyxDQUNQaUksUUFBQUEsR0FDQTBJLFFBQUFBLEdBQ0FDLFdBQUFBLEdBQ0F6RCxZQUFBQSxHQUNBK0QsZUFBQUEsR0FDQTNHLFNBQUFBLE1DVEo2SixFQUFBQSxPQUNFLGdCQUFDLEVBQUQsQ0FBVWgwQixNQUFPQSxJQUNmLGdCQUFDaTBCLEdBQUQsT0FFRmpvRixTQUFTMGhELGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9nbG9iYWxUaGlzLmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvY29tbW9ucy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1mYWNlYm9vay1sb2dpbi9kaXN0L2ZhY2Vib29rLWxvZ2luLXJlbmRlci1wcm9wcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2NvbXBvbmVudHMvYXVkaW8uanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2NvbXBvbmVudHMvYmFsbC10cmlhbmdsZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1sb2FkaW5nLWljb25zL2Rpc3QvY29tcG9uZW50cy9iYXJzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctaWNvbnMvZGlzdC9jb21wb25lbnRzL2NpcmNsZXMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2NvbXBvbmVudHMvZ3JpZC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1sb2FkaW5nLWljb25zL2Rpc3QvY29tcG9uZW50cy9oZWFydHMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2NvbXBvbmVudHMvb3ZhbC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1sb2FkaW5nLWljb25zL2Rpc3QvY29tcG9uZW50cy9wdWZmLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctaWNvbnMvZGlzdC9jb21wb25lbnRzL3JpbmdzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctaWNvbnMvZGlzdC9jb21wb25lbnRzL3NwaW5uaW5nLWNpcmNsZXMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2NvbXBvbmVudHMvdGFpbC1zcGluLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRpbmctaWNvbnMvZGlzdC9jb21wb25lbnRzL3RocmVlLWRvdHMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtbG9hZGluZy1pY29ucy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2hhbGxvd2VxdWFsL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvZGlzdC9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvZGlzdC9pcy1iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9vbi5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3NvY2tldC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3R5cGVkLWV2ZW50cy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3VybC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iaW5kQWN0aW9uQ3JlYXRvcnMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvaXMtcHJvcC12YWxpZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0aWVzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3V0aWxpdGllcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2VzL2luZGV4LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvc2xpY2VzL2xvYWRpbmdTbGljZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9saWIvYXBpLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvc2xpY2VzL3Nlc3Npb25TbGljZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3V0aWxpdGllcy9Gb3JtRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy91dGlsaXRpZXMvbG9naW5FbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0xvZ2luLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2xpYi9hdXRoLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0aWVzL01pc2MuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy91dGlsaXRpZXMvcG9zdEVsZW1lbnRzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0aWVzL2NoYXRFbGVtZW50cy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0NoYXRNZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0NoYXRyb29tLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvUmVxdWVzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9GcmllbmRSZXF1ZXN0cy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3NsaWNlcy9hY3RpdmVGb3JtU2xpY2UuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9zbGljZXMvY3VycmVudENvbW1lbnRTbGljZS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3NsaWNlcy9jdXJyZW50UG9zdFNsaWNlLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvcG9zdHMvQ29tbWVudEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9wb3N0cy9Db21tZW50SXRlbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3Bvc3RzL0NvbW1lbnRTZWN0aW9uLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvcG9zdHMvV3JpdGVBQ29tbWVudC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3Bvc3RzL1Bvc3RBY3Rpb25zLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvcG9zdHMvTnVtYmVyT2ZQb3N0TGlrZXMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9wb3N0cy9Qb3N0LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoL1Bvc3RSZXN1bHQuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9zZWFyY2gvVXNlclJlc3VsdC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3NlYXJjaC9TZWFyY2guanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvbGliL3BlcmZvcm1TZWFyY2guanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvTm90aWZpY2F0aW9uSXRlbS5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3BvcHVwcy9Ob3RpZmljYXRpb25zLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvUHJvZmlsZUFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy91dGlsaXRpZXMvUHJvZmlsZUhlYWRlci5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL05hdkJhci5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3Bvc3RzL1N0YXR1cy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL0ZlZWQuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvR2VuZXJhbE9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvTG9hZGluZy5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3V0aWxpdGllcy9Mb2dnZWRBc0hlYWRlci5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3Bvc3RzL05ld1Bvc3QuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvbGliL2RhdGFQcm9jZXNzaW5nLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvZm9ybXMvRWRpdENvbW1lbnQuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9FZGl0UG9zdC5qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL0VkaXRQcm9maWxlLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvZm9ybXMvRm9ybXMuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC93cmFwcGVyLm1qcyIsIndlYnBhY2s6Ly9mcmVuZC1mcm9udGVuZC8uL3NyYy9jb21wb25lbnRzL3NsaWNlcy9yZWFsVGltZVNsaWNlLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0aWVzL0hhbmRsZVJlYWxUaW1lLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvVXNlclByb2ZpbGUuanMiLCJ3ZWJwYWNrOi8vZnJlbmQtZnJvbnRlbmQvLi9zcmMvY29tcG9uZW50cy9TaW5nbGVQb3N0LmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvUHJvdGVjdGVkUm91dGVzLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2NvbXBvbmVudHMvQXBwLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovL2ZyZW5kLWZyb250ZW5kLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKGNoYXJzKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaV0pO1xuICAgICAgZW5jb2RlZDIgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzFdKTtcbiAgICAgIGVuY29kZWQzID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSsyXSk7XG4gICAgICBlbmNvZGVkNCA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krM10pO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiKTtcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVtb3ZlIGV2ZW50IHNwZWNpZmljIGFycmF5cyBmb3IgZXZlbnQgdHlwZXMgdGhhdCBub1xyXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cclxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5leHBvcnRzLmRlc3Ryb3kgPSAoKCkgPT4ge1xuXHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIXdhcm5lZCkge1xuXHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHRcdH1cblx0fTtcbn0pKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuXHRcdC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuXHRhcmdzWzBdID0gKHRoaXMudXNlQ29sb3JzID8gJyVjJyA6ICcnKSArXG5cdFx0dGhpcy5uYW1lc3BhY2UgK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKSArXG5cdFx0YXJnc1swXSArXG5cdFx0KHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICtcblx0XHQnKycgKyBtb2R1bGUuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG5cdGlmICghdGhpcy51c2VDb2xvcnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcblx0YXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0Jyk7XG5cblx0Ly8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcblx0Ly8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuXHQvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblx0bGV0IGluZGV4ID0gMDtcblx0bGV0IGxhc3RDID0gMDtcblx0YXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIG1hdGNoID0+IHtcblx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aW5kZXgrKztcblx0XHRpZiAobWF0Y2ggPT09ICclYycpIHtcblx0XHRcdC8vIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuXHRcdFx0Ly8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcblx0XHRcdGxhc3RDID0gaW5kZXg7XG5cdFx0fVxuXHR9KTtcblxuXHRhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5kZWJ1ZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUuZGVidWdgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqIElmIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYXZhaWxhYmxlLCBmYWxscyBiYWNrXG4gKiB0byBgY29uc29sZS5sb2dgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cbmV4cG9ydHMubG9nID0gY29uc29sZS5kZWJ1ZyB8fCBjb25zb2xlLmxvZyB8fCAoKCkgPT4ge30pO1xuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG5cdHRyeSB7XG5cdFx0aWYgKG5hbWVzcGFjZXMpIHtcblx0XHRcdGV4cG9ydHMuc3RvcmFnZS5zZXRJdGVtKCdkZWJ1ZycsIG5hbWVzcGFjZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGxvYWQoKSB7XG5cdGxldCByO1xuXHR0cnkge1xuXHRcdHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cblxuXHQvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG5cdGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuXHRcdHIgPSBwcm9jZXNzLmVudi5ERUJVRztcblx0fVxuXG5cdHJldHVybiByO1xufVxuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcblx0dHJ5IHtcblx0XHQvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG5cdFx0Ly8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cblx0XHRyZXR1cm4gbG9jYWxTdG9yYWdlO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG5cbmNvbnN0IHtmb3JtYXR0ZXJzfSA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuXHR0cnkge1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRyZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcblx0fVxufTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG5cdCogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG5cdCogQGFwaSBwcml2YXRlXG5cdCovXG5cdGZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuXHRcdGxldCBoYXNoID0gMDtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcblx0XHRcdGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuXHR9XG5cdGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yID0gc2VsZWN0Q29sb3I7XG5cblx0LyoqXG5cdCogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG5cdCogQHJldHVybiB7RnVuY3Rpb259XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cdFx0bGV0IHByZXZUaW1lO1xuXHRcdGxldCBlbmFibGVPdmVycmlkZSA9IG51bGw7XG5cdFx0bGV0IG5hbWVzcGFjZXNDYWNoZTtcblx0XHRsZXQgZW5hYmxlZENhY2hlO1xuXG5cdFx0ZnVuY3Rpb24gZGVidWcoLi4uYXJncykge1xuXHRcdFx0Ly8gRGlzYWJsZWQ/XG5cdFx0XHRpZiAoIWRlYnVnLmVuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWxmID0gZGVidWc7XG5cblx0XHRcdC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cdFx0XHRjb25zdCBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuXHRcdFx0Y29uc3QgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuXHRcdFx0c2VsZi5kaWZmID0gbXM7XG5cdFx0XHRzZWxmLnByZXYgPSBwcmV2VGltZTtcblx0XHRcdHNlbGYuY3VyciA9IGN1cnI7XG5cdFx0XHRwcmV2VGltZSA9IGN1cnI7XG5cblx0XHRcdGFyZ3NbMF0gPSBjcmVhdGVEZWJ1Zy5jb2VyY2UoYXJnc1swXSk7XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdFx0Ly8gQW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cblx0XHRcdFx0YXJncy51bnNoaWZ0KCclTycpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0bGV0IGluZGV4ID0gMDtcblx0XHRcdGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCAobWF0Y2gsIGZvcm1hdCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG5cdFx0XHRcdGlmIChtYXRjaCA9PT0gJyUlJykge1xuXHRcdFx0XHRcdHJldHVybiAnJSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0Y29uc3QgZm9ybWF0dGVyID0gY3JlYXRlRGVidWcuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXHRcdFx0XHRpZiAodHlwZW9mIGZvcm1hdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGNvbnN0IHZhbCA9IGFyZ3NbaW5kZXhdO1xuXHRcdFx0XHRcdG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuXHRcdFx0XHRcdC8vIE5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcblx0XHRcdFx0XHRhcmdzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcblx0XHRcdGNyZWF0ZURlYnVnLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuXHRcdFx0Y29uc3QgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG5cdFx0XHRsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHR9XG5cblx0XHRkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHRkZWJ1Zy5kZXN0cm95ID0gY3JlYXRlRGVidWcuZGVzdHJveTsgLy8gWFhYIFRlbXBvcmFyeS4gV2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVidWcsICdlbmFibGVkJywge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRnZXQ6ICgpID0+IHtcblx0XHRcdFx0aWYgKGVuYWJsZU92ZXJyaWRlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVuYWJsZU92ZXJyaWRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuYW1lc3BhY2VzQ2FjaGUgIT09IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMpIHtcblx0XHRcdFx0XHRuYW1lc3BhY2VzQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzO1xuXHRcdFx0XHRcdGVuYWJsZWRDYWNoZSA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbmFibGVkQ2FjaGU7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiB2ID0+IHtcblx0XHRcdFx0ZW5hYmxlT3ZlcnJpZGUgPSB2O1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblx0XHRpZiAodHlwZW9mIGNyZWF0ZURlYnVnLmluaXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluaXQoZGVidWcpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWJ1Zztcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXHRcdGNyZWF0ZURlYnVnLm5hbWVzcGFjZXMgPSBuYW1lc3BhY2VzO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuXHQqXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0XHRjb25zdCBuYW1lc3BhY2VzID0gW1xuXHRcdFx0Li4uY3JlYXRlRGVidWcubmFtZXMubWFwKHRvTmFtZXNwYWNlKSxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcCh0b05hbWVzcGFjZSkubWFwKG5hbWVzcGFjZSA9PiAnLScgKyBuYW1lc3BhY2UpXG5cdFx0XS5qb2luKCcsJyk7XG5cdFx0Y3JlYXRlRGVidWcuZW5hYmxlKCcnKTtcblx0XHRyZXR1cm4gbmFtZXNwYWNlcztcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG5cdCogQHJldHVybiB7Qm9vbGVhbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcblx0XHRpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBpO1xuXHRcdGxldCBsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb252ZXJ0IHJlZ2V4cCB0byBuYW1lc3BhY2Vcblx0KlxuXHQqIEBwYXJhbSB7UmVnRXhwfSByZWd4ZXBcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiB0b05hbWVzcGFjZShyZWdleHApIHtcblx0XHRyZXR1cm4gcmVnZXhwLnRvU3RyaW5nKClcblx0XHRcdC5zdWJzdHJpbmcoMiwgcmVnZXhwLnRvU3RyaW5nKCkubGVuZ3RoIC0gMilcblx0XHRcdC5yZXBsYWNlKC9cXC5cXCpcXD8kLywgJyonKTtcblx0fVxuXG5cdC8qKlxuXHQqIENvZXJjZSBgdmFsYC5cblx0KlxuXHQqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuXHQqIEByZXR1cm4ge01peGVkfVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG5cdFx0aWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRyZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0LyoqXG5cdCogWFhYIERPIE5PVCBVU0UuIFRoaXMgaXMgYSB0ZW1wb3Jhcnkgc3R1YiBmdW5jdGlvbi5cblx0KiBYWFggSXQgV0lMTCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5cdCovXG5cdGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuJyk7XG5cdH1cblxuXHRjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcblxuXHRyZXR1cm4gY3JlYXRlRGVidWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dXA7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gIH1cbn0pKCk7XG4iLCJjb25zdCBTb2NrZXQgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gKHVyaSwgb3B0cykgPT4gbmV3IFNvY2tldCh1cmksIG9wdHMpO1xuXG4vKipcbiAqIEV4cG9zZSBkZXBzIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICogYW5kIHN0YW5kYWxvbmUgYnJvd3NlciBhY2Nlc3MuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuU29ja2V0ID0gU29ja2V0O1xubW9kdWxlLmV4cG9ydHMucHJvdG9jb2wgPSBTb2NrZXQucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5tb2R1bGUuZXhwb3J0cy5UcmFuc3BvcnQgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRcIik7XG5tb2R1bGUuZXhwb3J0cy50cmFuc3BvcnRzID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0cy9pbmRleFwiKTtcbm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuIiwiY29uc3QgdHJhbnNwb3J0cyA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydHMvaW5kZXhcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnNvY2tldFwiKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgcGFyc2V1cmkgPSByZXF1aXJlKFwicGFyc2V1cmlcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5jb25zdCB7IGluc3RhbGxUaW1lckZ1bmN0aW9ucyB9ID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcblxuY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHVyaSwgb3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgb3B0cyA9IHVyaTtcbiAgICAgIHVyaSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVyaSkge1xuICAgICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSBcImh0dHBzXCIgfHwgdXJpLnByb3RvY29sID09PSBcIndzc1wiO1xuICAgICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgICBpZiAodXJpLnF1ZXJ5KSBvcHRzLnF1ZXJ5ID0gdXJpLnF1ZXJ5O1xuICAgIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICAgIH1cblxuICAgIGluc3RhbGxUaW1lckZ1bmN0aW9ucyh0aGlzLCBvcHRzKTtcblxuICAgIHRoaXMuc2VjdXJlID1cbiAgICAgIG51bGwgIT0gb3B0cy5zZWN1cmVcbiAgICAgICAgPyBvcHRzLnNlY3VyZVxuICAgICAgICA6IHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcblxuICAgIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICB9XG5cbiAgICB0aGlzLmhvc3RuYW1lID1cbiAgICAgIG9wdHMuaG9zdG5hbWUgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhdGlvbi5ob3N0bmFtZSA6IFwibG9jYWxob3N0XCIpO1xuICAgIHRoaXMucG9ydCA9XG4gICAgICBvcHRzLnBvcnQgfHxcbiAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgICAgOiB0aGlzLnNlY3VyZVxuICAgICAgICA/IDQ0M1xuICAgICAgICA6IDgwKTtcblxuICAgIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbXCJwb2xsaW5nXCIsIFwid2Vic29ja2V0XCJdO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgICB0aGlzLm9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBwYXRoOiBcIi9lbmdpbmUuaW9cIixcbiAgICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICB1cGdyYWRlOiB0cnVlLFxuICAgICAgICBqc29ucDogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wUGFyYW06IFwidFwiLFxuICAgICAgICByZW1lbWJlclVwZ3JhZGU6IGZhbHNlLFxuICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IHRydWUsXG4gICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB7XG4gICAgICAgICAgdGhyZXNob2xkOiAxMDI0XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zcG9ydE9wdGlvbnM6IHt9LFxuICAgICAgICBjbG9zZU9uQmVmb3JldW5sb2FkOiB0cnVlXG4gICAgICB9LFxuICAgICAgb3B0c1xuICAgICk7XG5cbiAgICB0aGlzLm9wdHMucGF0aCA9IHRoaXMub3B0cy5wYXRoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSArIFwiL1wiO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMucXVlcnkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRoaXMub3B0cy5xdWVyeSA9IHBhcnNlcXMuZGVjb2RlKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICAgIHRoaXMuaWQgPSBudWxsO1xuICAgIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICAgIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmICh0aGlzLm9wdHMuY2xvc2VPbkJlZm9yZXVubG9hZCkge1xuICAgICAgICAvLyBGaXJlZm94IGNsb3NlcyB0aGUgY29ubmVjdGlvbiB3aGVuIHRoZSBcImJlZm9yZXVubG9hZFwiIGV2ZW50IGlzIGVtaXR0ZWQgYnV0IG5vdCBDaHJvbWUuIFRoaXMgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgLy8gZW5zdXJlcyBldmVyeSBicm93c2VyIGJlaGF2ZXMgdGhlIHNhbWUgKG5vIFwiZGlzY29ubmVjdFwiIGV2ZW50IGF0IHRoZSBTb2NrZXQuSU8gbGV2ZWwgd2hlbiB0aGUgcGFnZSBpc1xuICAgICAgICAvLyBjbG9zZWQvcmVsb2FkZWQpXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgXCJiZWZvcmV1bmxvYWRcIixcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgLy8gc2lsZW50bHkgY2xvc2UgdGhlIHRyYW5zcG9ydFxuICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5ob3N0bmFtZSAhPT0gXCJsb2NhbGhvc3RcIikge1xuICAgICAgICB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgICAgfTtcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3BlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNyZWF0ZVRyYW5zcG9ydChuYW1lKSB7XG4gICAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgICBjb25zdCBxdWVyeSA9IGNsb25lKHRoaXMub3B0cy5xdWVyeSk7XG5cbiAgICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgICAvLyB0cmFuc3BvcnQgbmFtZVxuICAgIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLm9wdHMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSxcbiAgICAgIHRoaXMub3B0cyxcbiAgICAgIHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHNvY2tldDogdGhpcyxcbiAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgIHNlY3VyZTogdGhpcy5zZWN1cmUsXG4gICAgICAgIHBvcnQ6IHRoaXMucG9ydFxuICAgICAgfVxuICAgICk7XG5cbiAgICBkZWJ1ZyhcIm9wdGlvbnM6ICVqXCIsIG9wdHMpO1xuXG4gICAgcmV0dXJuIG5ldyB0cmFuc3BvcnRzW25hbWVdKG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGxldCB0cmFuc3BvcnQ7XG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRzLnJlbWVtYmVyVXBncmFkZSAmJlxuICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJlxuICAgICAgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoXCJ3ZWJzb2NrZXRcIikgIT09IC0xXG4gICAgKSB7XG4gICAgICB0cmFuc3BvcnQgPSBcIndlYnNvY2tldFwiO1xuICAgIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgICB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIFwiTm8gdHJhbnNwb3J0cyBhdmFpbGFibGVcIik7XG4gICAgICB9LCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcblxuICAgIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgICB0cnkge1xuICAgICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkZWJ1ZyhcImVycm9yIHdoaWxlIGNyZWF0aW5nIHRyYW5zcG9ydDogJXNcIiwgZSk7XG4gICAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBzZXRUcmFuc3BvcnQodHJhbnNwb3J0KSB7XG4gICAgZGVidWcoXCJzZXR0aW5nIHRyYW5zcG9ydCAlc1wiLCB0cmFuc3BvcnQubmFtZSk7XG5cbiAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgIGRlYnVnKFwiY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzXCIsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gICAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnNcbiAgICB0cmFuc3BvcnRcbiAgICAgIC5vbihcImRyYWluXCIsIHRoaXMub25EcmFpbi5iaW5kKHRoaXMpKVxuICAgICAgLm9uKFwicGFja2V0XCIsIHRoaXMub25QYWNrZXQuYmluZCh0aGlzKSlcbiAgICAgIC5vbihcImVycm9yXCIsIHRoaXMub25FcnJvci5iaW5kKHRoaXMpKVxuICAgICAgLm9uKFwiY2xvc2VcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgY2xvc2VcIik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHByb2JlKG5hbWUpIHtcbiAgICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gICAgbGV0IHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuXG4gICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4gICAgY29uc3Qgb25UcmFuc3BvcnRPcGVuID0gKCkgPT4ge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBvcGVuZWQnLCBuYW1lKTtcbiAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwicGluZ1wiLCBkYXRhOiBcInByb2JlXCIgfV0pO1xuICAgICAgdHJhbnNwb3J0Lm9uY2UoXCJwYWNrZXRcIiwgbXNnID0+IHtcbiAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoXCJwb25nXCIgPT09IG1zZy50eXBlICYmIFwicHJvYmVcIiA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBwb25nJywgbmFtZSk7XG4gICAgICAgICAgdGhpcy51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuZW1pdChcInVwZ3JhZGluZ1wiLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgICAgdGhpcy50cmFuc3BvcnQucGF1c2UoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgICAgZGVidWcoXCJjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXRcIik7XG5cbiAgICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwidXBncmFkZVwiIH1dKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInVwZ3JhZGVcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnVwZ3JhZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yXCIpO1xuICAgICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJ1cGdyYWRlRXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCgpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgICBjbGVhbnVwKCk7XG5cbiAgICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gICAgY29uc3Qgb25lcnJvciA9IGVyciA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yOiBcIiArIGVycik7XG4gICAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICAgIHRoaXMuZW1pdChcInVwZ3JhZGVFcnJvclwiLCBlcnJvcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UoKSB7XG4gICAgICBvbmVycm9yKFwidHJhbnNwb3J0IGNsb3NlZFwiKTtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgb25lcnJvcihcInNvY2tldCBjbG9zZWRcIik7XG4gICAgfVxuXG4gICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICBmdW5jdGlvbiBvbnVwZ3JhZGUodG8pIHtcbiAgICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uY2xvc2UpO1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuICAgIH07XG5cbiAgICB0cmFuc3BvcnQub25jZShcIm9wZW5cIiwgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQub25jZShcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5vbmNlKFwiY2xvc2VcIiwgb25UcmFuc3BvcnRDbG9zZSk7XG5cbiAgICB0aGlzLm9uY2UoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICB0aGlzLm9uY2UoXCJ1cGdyYWRpbmdcIiwgb251cGdyYWRlKTtcblxuICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gY29ubmVjdGlvbiBpcyBkZWVtZWQgb3Blbi5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIG9uT3BlbigpIHtcbiAgICBkZWJ1ZyhcInNvY2tldCBvcGVuXCIpO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBcIndlYnNvY2tldFwiID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICAgIHRoaXMuZW1pdChcIm9wZW5cIik7XG4gICAgdGhpcy5mbHVzaCgpO1xuXG4gICAgLy8gd2UgY2hlY2sgZm9yIGByZWFkeVN0YXRlYCBpbiBjYXNlIGFuIGBvcGVuYFxuICAgIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgICBpZiAoXG4gICAgICBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlICYmXG4gICAgICB0aGlzLm9wdHMudXBncmFkZSAmJlxuICAgICAgdGhpcy50cmFuc3BvcnQucGF1c2VcbiAgICApIHtcbiAgICAgIGRlYnVnKFwic3RhcnRpbmcgdXBncmFkZSBwcm9iZXNcIik7XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBjb25zdCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7XG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGEgcGFja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uUGFja2V0KHBhY2tldCkge1xuICAgIGlmIChcbiAgICAgIFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGVcbiAgICApIHtcbiAgICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgICAgdGhpcy5lbWl0KFwicGFja2V0XCIsIHBhY2tldCk7XG5cbiAgICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICAgIHRoaXMuZW1pdChcImhlYXJ0YmVhdFwiKTtcblxuICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICBjYXNlIFwib3BlblwiOlxuICAgICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJwaW5nXCI6XG4gICAgICAgICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gICAgICAgICAgdGhpcy5zZW5kUGFja2V0KFwicG9uZ1wiKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJwaW5nXCIpO1xuICAgICAgICAgIHRoaXMuZW1pdChcInBvbmdcIik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJtZXNzYWdlXCIsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uSGFuZHNoYWtlKGRhdGEpIHtcbiAgICB0aGlzLmVtaXQoXCJoYW5kc2hha2VcIiwgZGF0YSk7XG4gICAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICAgIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICAgIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICAgIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gICAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gICAgdGhpcy5vbk9wZW4oKTtcbiAgICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0XG4gICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHRoaXMucmVzZXRQaW5nVGltZW91dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW5kIHJlc2V0cyBwaW5nIHRpbWVvdXQgdGltZXIgYmFzZWQgb24gc2VydmVyIHBpbmdzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJlc2V0UGluZ1RpbWVvdXQoKSB7XG4gICAgdGhpcy5jbGVhclRpbWVvdXRGbih0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgIHRoaXMub25DbG9zZShcInBpbmcgdGltZW91dFwiKTtcbiAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCArIHRoaXMucGluZ1RpbWVvdXQpO1xuICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIudW5yZWYoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRyYWluKCkge1xuICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gICAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gICAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gICAgaWYgKDAgPT09IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGZsdXNoKCkge1xuICAgIGlmIChcbiAgICAgIFwiY2xvc2VkXCIgIT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAgICF0aGlzLnVwZ3JhZGluZyAmJlxuICAgICAgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGhcbiAgICApIHtcbiAgICAgIGRlYnVnKFwiZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXRcIiwgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgICB0aGlzLmVtaXQoXCJmbHVzaFwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIHdyaXRlKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2VuZChtc2csIG9wdGlvbnMsIGZuKSB7XG4gICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHNlbmRQYWNrZXQodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGF0YSkge1xuICAgICAgZm4gPSBkYXRhO1xuICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgICAgZm4gPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfTtcbiAgICB0aGlzLmVtaXQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTtcbiAgICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICBpZiAoZm4pIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vbkNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgZGVidWcoXCJzb2NrZXQgY2xvc2luZyAtIHRlbGxpbmcgdHJhbnNwb3J0IHRvIGNsb3NlXCIpO1xuICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2xlYW51cEFuZENsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIGNsb3NlKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHdhaXRGb3JVcGdyYWRlID0gKCkgPT4ge1xuICAgICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICAgIHRoaXMub25jZShcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgIHRoaXMub25jZShcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIH07XG5cbiAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NpbmdcIjtcblxuICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMub25jZShcImRyYWluXCIsICgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25FcnJvcihlcnIpIHtcbiAgICBkZWJ1ZyhcInNvY2tldCBlcnJvciAlalwiLCBlcnIpO1xuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBlcnJvclwiLCBlcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkNsb3NlKHJlYXNvbiwgZGVzYykge1xuICAgIGlmIChcbiAgICAgIFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGVcbiAgICApIHtcbiAgICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG5cbiAgICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgICAgdGhpcy5jbGVhclRpbWVvdXRGbih0aGlzLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Rm4odGhpcy5waW5nVGltZW91dFRpbWVyKTtcblxuICAgICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcblxuICAgICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAgIC8vIGlnbm9yZSBmdXJ0aGVyIHRyYW5zcG9ydCBjb21tdW5pY2F0aW9uXG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgICAgaWYgKHR5cGVvZiByZW1vdmVFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgcmVhZHkgc3RhdGVcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG5cbiAgICAgIC8vIGNsZWFyIHNlc3Npb24gaWRcbiAgICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiLCByZWFzb24sIGRlc2MpO1xuXG4gICAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAgIC8vIGdyYWIgdGhlIGJ1ZmZlcnMgb24gYGNsb3NlYCBldmVudFxuICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNlcnZlciB1cGdyYWRlc1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICpcbiAgICovXG4gIGZpbHRlclVwZ3JhZGVzKHVwZ3JhZGVzKSB7XG4gICAgY29uc3QgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBqID0gdXBncmFkZXMubGVuZ3RoO1xuICAgIGZvciAoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpZiAofnRoaXMudHJhbnNwb3J0cy5pbmRleE9mKHVwZ3JhZGVzW2ldKSlcbiAgICAgICAgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG4gIH1cbn1cblxuU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBjb25zdCBvID0ge307XG4gIGZvciAobGV0IGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuIiwiY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgeyBpbnN0YWxsVGltZXJGdW5jdGlvbnMgfSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6dHJhbnNwb3J0XCIpO1xuXG5jbGFzcyBUcmFuc3BvcnQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuXG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO1xuICAgIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgYW4gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIG9uRXJyb3IobXNnLCBkZXNjKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgZXJyLnR5cGUgPSBcIlRyYW5zcG9ydEVycm9yXCI7XG4gICAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgIHRoaXMuZG9PcGVuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VuZChwYWNrZXRzKSB7XG4gICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMgbWlnaHQgaGFwcGVuIGlmIHRoZSB0cmFuc3BvcnQgd2FzIHNpbGVudGx5IGNsb3NlZCBpbiB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IGhhbmRsZXJcbiAgICAgIGRlYnVnKFwidHJhbnNwb3J0IGlzIG5vdCBvcGVuLCBkaXNjYXJkaW5nIHBhY2tldHNcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIG9wZW5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbk9wZW4oKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRGF0YShkYXRhKSB7XG4gICAgY29uc3QgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAgICovXG4gIG9uUGFja2V0KHBhY2tldCkge1xuICAgIHRoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICB0aGlzLmVtaXQoXCJjbG9zZVwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcbiIsImNvbnN0IFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZShcInhtbGh0dHByZXF1ZXN0LXNzbFwiKTtcbmNvbnN0IFhIUiA9IHJlcXVpcmUoXCIuL3BvbGxpbmcteGhyXCIpO1xuY29uc3QgSlNPTlAgPSByZXF1aXJlKFwiLi9wb2xsaW5nLWpzb25wXCIpO1xuY29uc3Qgd2Vic29ja2V0ID0gcmVxdWlyZShcIi4vd2Vic29ja2V0XCIpO1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nKG9wdHMpIHtcbiAgbGV0IHhocjtcbiAgbGV0IHhkID0gZmFsc2U7XG4gIGxldCB4cyA9IGZhbHNlO1xuICBjb25zdCBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjb25zdCBpc1NTTCA9IFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIGxldCBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKFwib3BlblwiIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKFwiSlNPTlAgZGlzYWJsZWRcIik7XG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcbiAgfVxufVxuIiwiY29uc3QgUG9sbGluZyA9IHJlcXVpcmUoXCIuL3BvbGxpbmdcIik7XG5jb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4uL2dsb2JhbFRoaXNcIik7XG5cbmNvbnN0IHJOZXdsaW5lID0gL1xcbi9nO1xuY29uc3QgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG5sZXQgY2FsbGJhY2tzO1xuXG5jbGFzcyBKU09OUFBvbGxpbmcgZXh0ZW5kcyBQb2xsaW5nIHtcbiAgLyoqXG4gICAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAgIC8vIHdlIGRvIHRoaXMgaGVyZSAobGF6aWx5KSB0byBhdm9pZCB1bm5lZWRlZCBnbG9iYWwgcG9sbHV0aW9uXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgICBjYWxsYmFja3MgPSBnbG9iYWxUaGlzLl9fX2VpbyA9IGdsb2JhbFRoaXMuX19fZWlvIHx8IFtdO1xuICAgIH1cblxuICAgIC8vIGNhbGxiYWNrIGlkZW50aWZpZXJcbiAgICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAgIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgICBjYWxsYmFja3MucHVzaCh0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT05QIG9ubHkgc3VwcG9ydHMgYmluYXJ5IGFzIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcbiAgICovXG4gIGdldCBzdXBwb3J0c0JpbmFyeSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBzb2NrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9DbG9zZSgpIHtcbiAgICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICAgIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgICAgIHRoaXMuc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7fTtcbiAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgICB0aGlzLmZvcm0gPSBudWxsO1xuICAgICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICAgIH1cblxuICAgIHN1cGVyLmRvQ2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvUG9sbCgpIHtcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXG4gICAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICAgIHNjcmlwdC5vbmVycm9yID0gZSA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3IoXCJqc29ucCBwb2xsIGVycm9yXCIsIGUpO1xuICAgIH07XG5cbiAgICBjb25zdCBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xuICAgIGlmIChpbnNlcnRBdCkge1xuICAgICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxuICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gICAgY29uc3QgaXNVQWdlY2tvID1cbiAgICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgIGlmIChpc1VBZ2Vja28pIHtcbiAgICAgIHRoaXMuc2V0VGltZW91dEZuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb1dyaXRlKGRhdGEsIGZuKSB7XG4gICAgbGV0IGlmcmFtZTtcblxuICAgIGlmICghdGhpcy5mb3JtKSB7XG4gICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgICBjb25zdCBhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICAgICAgY29uc3QgaWQgPSAodGhpcy5pZnJhbWVJZCA9IFwiZWlvX2lmcmFtZV9cIiArIHRoaXMuaW5kZXgpO1xuXG4gICAgICBmb3JtLmNsYXNzTmFtZSA9IFwic29ja2V0aW9cIjtcbiAgICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICBmb3JtLnN0eWxlLnRvcCA9IFwiLTEwMDBweFwiO1xuICAgICAgZm9ybS5zdHlsZS5sZWZ0ID0gXCItMTAwMHB4XCI7XG4gICAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgICAgZm9ybS5tZXRob2QgPSBcIlBPU1RcIjtcbiAgICAgIGZvcm0uc2V0QXR0cmlidXRlKFwiYWNjZXB0LWNoYXJzZXRcIiwgXCJ1dGYtOFwiKTtcbiAgICAgIGFyZWEubmFtZSA9IFwiZFwiO1xuICAgICAgZm9ybS5hcHBlbmRDaGlsZChhcmVhKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgICB0aGlzLmFyZWEgPSBhcmVhO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpbml0SWZyYW1lKCk7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIGNvbnN0IGluaXRJZnJhbWUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5pZnJhbWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmZvcm0ucmVtb3ZlQ2hpbGQodGhpcy5pZnJhbWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5vbkVycm9yKFwianNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvclwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgICAgY29uc3QgaHRtbCA9ICc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIG5hbWU9XCInICsgdGhpcy5pZnJhbWVJZCArICdcIj4nO1xuICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICBpZnJhbWUubmFtZSA9IHRoaXMuaWZyYW1lSWQ7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBcImphdmFzY3JpcHQ6MFwiO1xuICAgICAgfVxuXG4gICAgICBpZnJhbWUuaWQgPSB0aGlzLmlmcmFtZUlkO1xuXG4gICAgICB0aGlzLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIHRoaXMuaWZyYW1lID0gaWZyYW1lO1xuICAgIH07XG5cbiAgICBpbml0SWZyYW1lKCk7XG5cbiAgICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZShyRXNjYXBlZE5ld2xpbmUsIFwiXFxcXFxcblwiKTtcbiAgICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsIFwiXFxcXG5cIik7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaWZyYW1lLnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaWZyYW1lLm9ubG9hZCA9IGNvbXBsZXRlO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG5jb25zdCBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoXCJ4bWxodHRwcmVxdWVzdC1zc2xcIik7XG5jb25zdCBQb2xsaW5nID0gcmVxdWlyZShcIi4vcG9sbGluZ1wiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCB7IHBpY2ssIGluc3RhbGxUaW1lckZ1bmN0aW9ucyB9ID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5jb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4uL2dsb2JhbFRoaXNcIik7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhoclwiKTtcblxuLyoqXG4gKiBFbXB0eSBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGVtcHR5KCkge31cblxuY29uc3QgaGFzWEhSMiA9IChmdW5jdGlvbigpIHtcbiAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHsgeGRvbWFpbjogZmFsc2UgfSk7XG4gIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuXG5jbGFzcyBYSFIgZXh0ZW5kcyBQb2xsaW5nIHtcbiAgLyoqXG4gICAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgY29uc3QgaXNTU0wgPSBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgIGxldCBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgICAgaWYgKCFwb3J0KSB7XG4gICAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnhkID1cbiAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgIG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lKSB8fFxuICAgICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gICAgICovXG4gICAgY29uc3QgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGhhc1hIUjIgJiYgIWZvcmNlQmFzZTY0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgcmVxdWVzdChvcHRzID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKG9wdHMsIHsgeGQ6IHRoaXMueGQsIHhzOiB0aGlzLnhzIH0sIHRoaXMub3B0cyk7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMudXJpKCksIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvV3JpdGUoZGF0YSwgZm4pIHtcbiAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgICByZXEub24oXCJzdWNjZXNzXCIsIGZuKTtcbiAgICByZXEub24oXCJlcnJvclwiLCBlcnIgPT4ge1xuICAgICAgdGhpcy5vbkVycm9yKFwieGhyIHBvc3QgZXJyb3JcIiwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvUG9sbCgpIHtcbiAgICBkZWJ1ZyhcInhociBwb2xsXCIpO1xuICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICAgIHJlcS5vbihcImRhdGFcIiwgdGhpcy5vbkRhdGEuYmluZCh0aGlzKSk7XG4gICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgIHRoaXMub25FcnJvcihcInhociBwb2xsIGVycm9yXCIsIGVycik7XG4gICAgfSk7XG4gICAgdGhpcy5wb2xsWGhyID0gcmVxO1xuICB9XG59XG5cbmNsYXNzIFJlcXVlc3QgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHVyaSwgb3B0cykge1xuICAgIHN1cGVyKCk7XG4gICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG5cbiAgICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgdGhpcy51cmkgPSB1cmk7XG4gICAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IG9wdHMgPSBwaWNrKFxuICAgICAgdGhpcy5vcHRzLFxuICAgICAgXCJhZ2VudFwiLFxuICAgICAgXCJlbmFibGVzWERSXCIsXG4gICAgICBcInBmeFwiLFxuICAgICAgXCJrZXlcIixcbiAgICAgIFwicGFzc3BocmFzZVwiLFxuICAgICAgXCJjZXJ0XCIsXG4gICAgICBcImNhXCIsXG4gICAgICBcImNpcGhlcnNcIixcbiAgICAgIFwicmVqZWN0VW5hdXRob3JpemVkXCIsXG4gICAgICBcImF1dG9VbnJlZlwiXG4gICAgKTtcbiAgICBvcHRzLnhkb21haW4gPSAhIXRoaXMub3B0cy54ZDtcbiAgICBvcHRzLnhzY2hlbWUgPSAhIXRoaXMub3B0cy54cztcblxuICAgIGNvbnN0IHhociA9ICh0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKSk7XG5cbiAgICB0cnkge1xuICAgICAgZGVidWcoXCJ4aHIgb3BlbiAlczogJXNcIiwgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMub3B0cy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKFwiUE9TVFwiID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIC8vIGllNiBjaGVja1xuICAgICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLm9wdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25Mb2FkKCk7XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSBcIm51bWJlclwiID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZyhcInhociBkYXRhICVzXCIsIHRoaXMuZGF0YSk7XG4gICAgICB4aHIuc2VuZCh0aGlzLmRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICAgIHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgdGhpcy5vbkVycm9yKGUpO1xuICAgICAgfSwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy5pbmRleCA9IFJlcXVlc3QucmVxdWVzdHNDb3VudCsrO1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25TdWNjZXNzKCkge1xuICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NcIik7XG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRhdGEoZGF0YSkge1xuICAgIHRoaXMuZW1pdChcImRhdGFcIiwgZGF0YSk7XG4gICAgdGhpcy5vblN1Y2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkVycm9yKGVycikge1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgdGhpcy5jbGVhbnVwKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFucyB1cCBob3VzZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBjbGVhbnVwKGZyb21FcnJvcikge1xuICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8geG1saHR0cHJlcXVlc3RcbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IGVtcHR5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgICB9XG5cbiAgICBpZiAoZnJvbUVycm9yKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgICB9XG5cbiAgICB0aGlzLnhociA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbG9hZC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkxvYWQoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBoYXNYRFIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhdGhpcy54cyAmJiB0aGlzLmVuYWJsZXNYRFI7XG4gIH1cblxuICAvKipcbiAgICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgaWYgKHR5cGVvZiBhdHRhY2hFdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY29uc3QgdGVybWluYXRpb25FdmVudCA9IFwib25wYWdlaGlkZVwiIGluIGdsb2JhbFRoaXMgPyBcInBhZ2VoaWRlXCIgOiBcInVubG9hZFwiO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoKSB7XG4gIGZvciAobGV0IGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG4iLCJjb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0XCIpO1xuY29uc3QgcGFyc2VxcyA9IHJlcXVpcmUoXCJwYXJzZXFzXCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCB5ZWFzdCA9IHJlcXVpcmUoXCJ5ZWFzdFwiKTtcblxuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmdcIik7XG5cbmNsYXNzIFBvbGxpbmcgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAvKipcbiAgICogVHJhbnNwb3J0IG5hbWUuXG4gICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gXCJwb2xsaW5nXCI7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICAgKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb09wZW4oKSB7XG4gICAgdGhpcy5wb2xsKCk7XG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHBvbGxpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHBhdXNlKG9uUGF1c2UpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNpbmdcIjtcblxuICAgIGNvbnN0IHBhdXNlID0gKCkgPT4ge1xuICAgICAgZGVidWcoXCJwYXVzZWRcIik7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgb25QYXVzZSgpO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgICBsZXQgdG90YWwgPSAwO1xuXG4gICAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICAgIGRlYnVnKFwid2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZVwiKTtcbiAgICAgICAgdG90YWwrKztcbiAgICAgICAgdGhpcy5vbmNlKFwicG9sbENvbXBsZXRlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRlYnVnKFwicHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGVcIik7XG4gICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgIGRlYnVnKFwid2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZVwiKTtcbiAgICAgICAgdG90YWwrKztcbiAgICAgICAgdGhpcy5vbmNlKFwiZHJhaW5cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVidWcoXCJwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZVwiKTtcbiAgICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgcG9sbGluZyBjeWNsZS5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIHBvbGwoKSB7XG4gICAgZGVidWcoXCJwb2xsaW5nXCIpO1xuICAgIHRoaXMucG9sbGluZyA9IHRydWU7XG4gICAgdGhpcy5kb1BvbGwoKTtcbiAgICB0aGlzLmVtaXQoXCJwb2xsXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRGF0YShkYXRhKSB7XG4gICAgZGVidWcoXCJwb2xsaW5nIGdvdCBkYXRhICVzXCIsIGRhdGEpO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gcGFja2V0ID0+IHtcbiAgICAgIC8vIGlmIGl0cyB0aGUgZmlyc3QgbWVzc2FnZSB3ZSBjb25zaWRlciB0aGUgdHJhbnNwb3J0IG9wZW5cbiAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHBhY2tldC50eXBlID09PSBcIm9wZW5cIikge1xuICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiBpdHMgYSBjbG9zZSBwYWNrZXQsIHdlIGNsb3NlIHRoZSBvbmdvaW5nIHJlcXVlc3RzXG4gICAgICBpZiAoXCJjbG9zZVwiID09PSBwYWNrZXQudHlwZSkge1xuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgfTtcblxuICAgIC8vIGRlY29kZSBwYXlsb2FkXG4gICAgcGFyc2VyLmRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSkuZm9yRWFjaChjYWxsYmFjayk7XG5cbiAgICAvLyBpZiBhbiBldmVudCBkaWQgbm90IHRyaWdnZXIgY2xvc2luZ1xuICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1pdChcInBvbGxDb21wbGV0ZVwiKTtcblxuICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlKCkge1xuICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgZGVidWcoXCJ3cml0aW5nIGNsb3NlIHBhY2tldFwiKTtcbiAgICAgIHRoaXMud3JpdGUoW3sgdHlwZTogXCJjbG9zZVwiIH1dKTtcbiAgICB9O1xuXG4gICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIGRlYnVnKFwidHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nXCIpO1xuICAgICAgY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGVcbiAgICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZVwiKTtcbiAgICAgIHRoaXMub25jZShcIm9wZW5cIiwgY2xvc2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHdyaXRlKHBhY2tldHMpIHtcbiAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCBkYXRhID0+IHtcbiAgICAgIHRoaXMuZG9Xcml0ZShkYXRhLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgdXJpKCkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwiaHR0cHNcIiA6IFwiaHR0cFwiO1xuICAgIGxldCBwb3J0ID0gXCJcIjtcblxuICAgIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkXG4gICAgaWYgKGZhbHNlICE9PSB0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgICBxdWVyeS5iNjQgPSAxO1xuICAgIH1cblxuICAgIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgKChcImh0dHBzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgIChcImh0dHBcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDgwKSlcbiAgICApIHtcbiAgICAgIHBvcnQgPSBcIjpcIiArIHRoaXMub3B0cy5wb3J0O1xuICAgIH1cblxuICAgIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICAgIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICB9XG5cbiAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICByZXR1cm4gKFxuICAgICAgc2NoZW1hICtcbiAgICAgIFwiOi8vXCIgK1xuICAgICAgKGlwdjYgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArXG4gICAgICBwb3J0ICtcbiAgICAgIHRoaXMub3B0cy5wYXRoICtcbiAgICAgIHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG4iLCJjb25zdCBnbG9iYWxUaGlzID0gcmVxdWlyZShcIi4uL2dsb2JhbFRoaXNcIik7XG5jb25zdCBuZXh0VGljayA9ICgoKSA9PiB7XG4gIGNvbnN0IGlzUHJvbWlzZUF2YWlsYWJsZSA9XG4gICAgdHlwZW9mIFByb21pc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgUHJvbWlzZS5yZXNvbHZlID09PSBcImZ1bmN0aW9uXCI7XG4gIGlmIChpc1Byb21pc2VBdmFpbGFibGUpIHtcbiAgICByZXR1cm4gY2IgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihjYik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChjYiwgc2V0VGltZW91dEZuKSA9PiBzZXRUaW1lb3V0Rm4oY2IsIDApO1xuICB9XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV2ViU29ja2V0OiBnbG9iYWxUaGlzLldlYlNvY2tldCB8fCBnbG9iYWxUaGlzLk1veldlYlNvY2tldCxcbiAgdXNpbmdCcm93c2VyV2ViU29ja2V0OiB0cnVlLFxuICBkZWZhdWx0QmluYXJ5VHlwZTogXCJhcnJheWJ1ZmZlclwiLFxuICBuZXh0VGlja1xufTtcbiIsImNvbnN0IFRyYW5zcG9ydCA9IHJlcXVpcmUoXCIuLi90cmFuc3BvcnRcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwiZW5naW5lLmlvLXBhcnNlclwiKTtcbmNvbnN0IHBhcnNlcXMgPSByZXF1aXJlKFwicGFyc2Vxc1wiKTtcbmNvbnN0IHllYXN0ID0gcmVxdWlyZShcInllYXN0XCIpO1xuY29uc3QgeyBwaWNrIH0gPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmNvbnN0IHtcbiAgV2ViU29ja2V0LFxuICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQsXG4gIGRlZmF1bHRCaW5hcnlUeXBlLFxuICBuZXh0VGlja1xufSA9IHJlcXVpcmUoXCIuL3dlYnNvY2tldC1jb25zdHJ1Y3RvclwiKTtcblxuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldFwiKTtcblxuLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG5jb25zdCBpc1JlYWN0TmF0aXZlID1cbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwic3RyaW5nXCIgJiZcbiAgbmF2aWdhdG9yLnByb2R1Y3QudG9Mb3dlckNhc2UoKSA9PT0gXCJyZWFjdG5hdGl2ZVwiO1xuXG5jbGFzcyBXUyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gIC8qKlxuICAgKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9ICFvcHRzLmZvcmNlQmFzZTY0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgKlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIFwid2Vic29ja2V0XCI7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgc29ja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvT3BlbigpIHtcbiAgICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmkgPSB0aGlzLnVyaSgpO1xuICAgIGNvbnN0IHByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG5cbiAgICAvLyBSZWFjdCBOYXRpdmUgb25seSBzdXBwb3J0cyB0aGUgJ2hlYWRlcnMnIG9wdGlvbiwgYW5kIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIGFueXRoaW5nIGVsc2UgaXMgcGFzc2VkXG4gICAgY29uc3Qgb3B0cyA9IGlzUmVhY3ROYXRpdmVcbiAgICAgID8ge31cbiAgICAgIDogcGljayhcbiAgICAgICAgICB0aGlzLm9wdHMsXG4gICAgICAgICAgXCJhZ2VudFwiLFxuICAgICAgICAgIFwicGVyTWVzc2FnZURlZmxhdGVcIixcbiAgICAgICAgICBcInBmeFwiLFxuICAgICAgICAgIFwia2V5XCIsXG4gICAgICAgICAgXCJwYXNzcGhyYXNlXCIsXG4gICAgICAgICAgXCJjZXJ0XCIsXG4gICAgICAgICAgXCJjYVwiLFxuICAgICAgICAgIFwiY2lwaGVyc1wiLFxuICAgICAgICAgIFwicmVqZWN0VW5hdXRob3JpemVkXCIsXG4gICAgICAgICAgXCJsb2NhbEFkZHJlc3NcIixcbiAgICAgICAgICBcInByb3RvY29sVmVyc2lvblwiLFxuICAgICAgICAgIFwib3JpZ2luXCIsXG4gICAgICAgICAgXCJtYXhQYXlsb2FkXCIsXG4gICAgICAgICAgXCJmYW1pbHlcIixcbiAgICAgICAgICBcImNoZWNrU2VydmVySWRlbnRpdHlcIlxuICAgICAgICApO1xuXG4gICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgIG9wdHMuaGVhZGVycyA9IHRoaXMub3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMud3MgPVxuICAgICAgICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIWlzUmVhY3ROYXRpdmVcbiAgICAgICAgICA/IHByb3RvY29sc1xuICAgICAgICAgICAgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgICAgOiBuZXcgV2ViU29ja2V0KHVyaSlcbiAgICAgICAgICA6IG5ldyBXZWJTb2NrZXQodXJpLCBwcm90b2NvbHMsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfVxuXG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSB8fCBkZWZhdWx0QmluYXJ5VHlwZTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy53cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICB0aGlzLndzLl9zb2NrZXQudW5yZWYoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub25PcGVuKCk7XG4gICAgfTtcbiAgICB0aGlzLndzLm9uY2xvc2UgPSB0aGlzLm9uQ2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLndzLm9ubWVzc2FnZSA9IGV2ID0+IHRoaXMub25EYXRhKGV2LmRhdGEpO1xuICAgIHRoaXMud3Mub25lcnJvciA9IGUgPT4gdGhpcy5vbkVycm9yKFwid2Vic29ja2V0IGVycm9yXCIsIGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB3cml0ZShwYWNrZXRzKSB7XG4gICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgLy8gZW5jb2RlUGFja2V0IGVmZmljaWVudCBhcyBpdCB1c2VzIFdTIGZyYW1pbmdcbiAgICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwYWNrZXQgPSBwYWNrZXRzW2ldO1xuICAgICAgY29uc3QgbGFzdFBhY2tldCA9IGkgPT09IHBhY2tldHMubGVuZ3RoIC0gMTtcblxuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGRhdGEgPT4ge1xuICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICBjb25zdCBvcHRzID0ge307XG4gICAgICAgIGlmICghdXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMub3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgbGVuID1cbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGRhdGEgPyBCdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA8IHRoaXMub3B0cy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgIC8vIHRocm93IGFuIGVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgLy8gVHlwZUVycm9yIGlzIHRocm93biB3aGVuIHBhc3NpbmcgdGhlIHNlY29uZCBhcmd1bWVudCBvbiBTYWZhcmlcbiAgICAgICAgICAgIHRoaXMud3Muc2VuZChkYXRhKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlYnVnKFwid2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0UGFja2V0KSB7XG4gICAgICAgICAgLy8gZmFrZSBkcmFpblxuICAgICAgICAgIC8vIGRlZmVyIHRvIG5leHQgdGljayB0byBhbGxvdyBTb2NrZXQgdG8gY2xlYXIgd3JpdGVCdWZmZXJcbiAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgICAgIH0sIHRoaXMuc2V0VGltZW91dEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGNsb3NlXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25DbG9zZSgpIHtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgc29ja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvQ2xvc2UoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICB0aGlzLndzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB1cmkoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJ3c3NcIiA6IFwid3NcIjtcbiAgICBsZXQgcG9ydCA9IFwiXCI7XG5cbiAgICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICAgIGlmIChcbiAgICAgIHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAoKFwid3NzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgIChcIndzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpXG4gICAgKSB7XG4gICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICB9XG5cbiAgICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICAgIGlmICh0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgIH1cblxuICAgIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcXVlcnkuYjY0ID0gMTtcbiAgICB9XG5cbiAgICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAgIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICAgIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICB9XG5cbiAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICByZXR1cm4gKFxuICAgICAgc2NoZW1hICtcbiAgICAgIFwiOi8vXCIgK1xuICAgICAgKGlwdjYgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArXG4gICAgICBwb3J0ICtcbiAgICAgIHRoaXMub3B0cy5wYXRoICtcbiAgICAgIHF1ZXJ5XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNoZWNrKCkge1xuICAgIHJldHVybiAoXG4gICAgICAhIVdlYlNvY2tldCAmJlxuICAgICAgIShcIl9faW5pdGlhbGl6ZVwiIGluIFdlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcbiIsImNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi9nbG9iYWxUaGlzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cy5waWNrID0gKG9iaiwgLi4uYXR0cikgPT4ge1xuICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGFjY1trXSA9IG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcblxuLy8gS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgcmVhbCB0aW1lb3V0IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbiBiZSB1c2VkIHdoZW4gb3ZlcnJpZGRlblxuY29uc3QgTkFUSVZFX1NFVF9USU1FT1VUID0gc2V0VGltZW91dDtcbmNvbnN0IE5BVElWRV9DTEVBUl9USU1FT1VUID0gY2xlYXJUaW1lb3V0O1xuXG5tb2R1bGUuZXhwb3J0cy5pbnN0YWxsVGltZXJGdW5jdGlvbnMgPSAob2JqLCBvcHRzKSA9PiB7XG4gIGlmIChvcHRzLnVzZU5hdGl2ZVRpbWVycykge1xuICAgIG9iai5zZXRUaW1lb3V0Rm4gPSBOQVRJVkVfU0VUX1RJTUVPVVQuYmluZChnbG9iYWxUaGlzKTtcbiAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBOQVRJVkVfQ0xFQVJfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXMpO1xuICB9IGVsc2Uge1xuICAgIG9iai5zZXRUaW1lb3V0Rm4gPSBzZXRUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgb2JqLmNsZWFyVGltZW91dEZuID0gY2xlYXJUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpcyk7XG4gIH1cbn07XG4iLCIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuXG5jb25zdCBoYXNDT1JTID0gcmVxdWlyZShcImhhcy1jb3JzXCIpO1xuY29uc3QgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoXCIuL2dsb2JhbFRoaXNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0cykge1xuICBjb25zdCB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIGNvbnN0IHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIGNvbnN0IGVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gIHRyeSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgWERvbWFpblJlcXVlc3QgJiYgIXhzY2hlbWUgJiYgZW5hYmxlc1hEUikge1xuICAgICAgcmV0dXJuIG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxUaGlzW1tcIkFjdGl2ZVwiXS5jb25jYXQoXCJPYmplY3RcIikuam9pbihcIlhcIildKFxuICAgICAgICBcIk1pY3Jvc29mdC5YTUxIVFRQXCJcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufTtcbiIsImNvbnN0IFBBQ0tFVF9UWVBFUyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIG5vIE1hcCA9IG5vIHBvbHlmaWxsXG5QQUNLRVRfVFlQRVNbXCJvcGVuXCJdID0gXCIwXCI7XG5QQUNLRVRfVFlQRVNbXCJjbG9zZVwiXSA9IFwiMVwiO1xuUEFDS0VUX1RZUEVTW1wicGluZ1wiXSA9IFwiMlwiO1xuUEFDS0VUX1RZUEVTW1wicG9uZ1wiXSA9IFwiM1wiO1xuUEFDS0VUX1RZUEVTW1wibWVzc2FnZVwiXSA9IFwiNFwiO1xuUEFDS0VUX1RZUEVTW1widXBncmFkZVwiXSA9IFwiNVwiO1xuUEFDS0VUX1RZUEVTW1wibm9vcFwiXSA9IFwiNlwiO1xuXG5jb25zdCBQQUNLRVRfVFlQRVNfUkVWRVJTRSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5PYmplY3Qua2V5cyhQQUNLRVRfVFlQRVMpLmZvckVhY2goa2V5ID0+IHtcbiAgUEFDS0VUX1RZUEVTX1JFVkVSU0VbUEFDS0VUX1RZUEVTW2tleV1dID0ga2V5O1xufSk7XG5cbmNvbnN0IEVSUk9SX1BBQ0tFVCA9IHsgdHlwZTogXCJlcnJvclwiLCBkYXRhOiBcInBhcnNlciBlcnJvclwiIH07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQQUNLRVRfVFlQRVMsXG4gIFBBQ0tFVF9UWVBFU19SRVZFUlNFLFxuICBFUlJPUl9QQUNLRVRcbn07XG4iLCJjb25zdCB7IFBBQ0tFVF9UWVBFU19SRVZFUlNFLCBFUlJPUl9QQUNLRVQgfSA9IHJlcXVpcmUoXCIuL2NvbW1vbnNcIik7XG5cbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuXG5sZXQgYmFzZTY0ZGVjb2RlcjtcbmlmICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIpIHtcbiAgYmFzZTY0ZGVjb2RlciA9IHJlcXVpcmUoXCJiYXNlNjQtYXJyYXlidWZmZXJcIik7XG59XG5cbmNvbnN0IGRlY29kZVBhY2tldCA9IChlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKSA9PiB7XG4gIGlmICh0eXBlb2YgZW5jb2RlZFBhY2tldCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1lc3NhZ2VcIixcbiAgICAgIGRhdGE6IG1hcEJpbmFyeShlbmNvZGVkUGFja2V0LCBiaW5hcnlUeXBlKVxuICAgIH07XG4gIH1cbiAgY29uc3QgdHlwZSA9IGVuY29kZWRQYWNrZXQuY2hhckF0KDApO1xuICBpZiAodHlwZSA9PT0gXCJiXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICBkYXRhOiBkZWNvZGVCYXNlNjRQYWNrZXQoZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSksIGJpbmFyeVR5cGUpXG4gICAgfTtcbiAgfVxuICBjb25zdCBwYWNrZXRUeXBlID0gUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV07XG4gIGlmICghcGFja2V0VHlwZSkge1xuICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gIH1cbiAgcmV0dXJuIGVuY29kZWRQYWNrZXQubGVuZ3RoID4gMVxuICAgID8ge1xuICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXSxcbiAgICAgICAgZGF0YTogZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSlcbiAgICAgIH1cbiAgICA6IHtcbiAgICAgICAgdHlwZTogUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV1cbiAgICAgIH07XG59O1xuXG5jb25zdCBkZWNvZGVCYXNlNjRQYWNrZXQgPSAoZGF0YSwgYmluYXJ5VHlwZSkgPT4ge1xuICBpZiAoYmFzZTY0ZGVjb2Rlcikge1xuICAgIGNvbnN0IGRlY29kZWQgPSBiYXNlNjRkZWNvZGVyLmRlY29kZShkYXRhKTtcbiAgICByZXR1cm4gbWFwQmluYXJ5KGRlY29kZWQsIGJpbmFyeVR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGJhc2U2NDogdHJ1ZSwgZGF0YSB9OyAvLyBmYWxsYmFjayBmb3Igb2xkIGJyb3dzZXJzXG4gIH1cbn07XG5cbmNvbnN0IG1hcEJpbmFyeSA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gIHN3aXRjaCAoYmluYXJ5VHlwZSkge1xuICAgIGNhc2UgXCJibG9iXCI6XG4gICAgICByZXR1cm4gZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IEJsb2IoW2RhdGFdKSA6IGRhdGE7XG4gICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkYXRhOyAvLyBhc3N1bWluZyB0aGUgZGF0YSBpcyBhbHJlYWR5IGFuIEFycmF5QnVmZmVyXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlUGFja2V0O1xuIiwiY29uc3QgeyBQQUNLRVRfVFlQRVMgfSA9IHJlcXVpcmUoXCIuL2NvbW1vbnNcIik7XG5cbmNvbnN0IHdpdGhOYXRpdmVCbG9iID1cbiAgdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAodHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5cbi8vIEFycmF5QnVmZmVyLmlzVmlldyBtZXRob2QgaXMgbm90IGRlZmluZWQgaW4gSUUxMFxuY29uc3QgaXNWaWV3ID0gb2JqID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICA6IG9iaiAmJiBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59O1xuXG5jb25zdCBlbmNvZGVQYWNrZXQgPSAoeyB0eXBlLCBkYXRhIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgPT4ge1xuICBpZiAod2l0aE5hdGl2ZUJsb2IgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChkYXRhLCBjYWxsYmFjayk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJlxuICAgIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KGRhdGEpKVxuICApIHtcbiAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChuZXcgQmxvYihbZGF0YV0pLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG4gIC8vIHBsYWluIHN0cmluZ1xuICByZXR1cm4gY2FsbGJhY2soUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcblxuY29uc3QgZW5jb2RlQmxvYkFzQmFzZTY0ID0gKGRhdGEsIGNhbGxiYWNrKSA9PiB7XG4gIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBmaWxlUmVhZGVyLnJlc3VsdC5zcGxpdChcIixcIilbMV07XG4gICAgY2FsbGJhY2soXCJiXCIgKyBjb250ZW50KTtcbiAgfTtcbiAgcmV0dXJuIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChkYXRhKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlUGFja2V0O1xuIiwiY29uc3QgZW5jb2RlUGFja2V0ID0gcmVxdWlyZShcIi4vZW5jb2RlUGFja2V0XCIpO1xuY29uc3QgZGVjb2RlUGFja2V0ID0gcmVxdWlyZShcIi4vZGVjb2RlUGFja2V0XCIpO1xuXG5jb25zdCBTRVBBUkFUT1IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMwKTsgLy8gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlbGltaXRlciNBU0NJSV9kZWxpbWl0ZWRfdGV4dFxuXG5jb25zdCBlbmNvZGVQYXlsb2FkID0gKHBhY2tldHMsIGNhbGxiYWNrKSA9PiB7XG4gIC8vIHNvbWUgcGFja2V0cyBtYXkgYmUgYWRkZWQgdG8gdGhlIGFycmF5IHdoaWxlIGVuY29kaW5nLCBzbyB0aGUgaW5pdGlhbCBsZW5ndGggbXVzdCBiZSBzYXZlZFxuICBjb25zdCBsZW5ndGggPSBwYWNrZXRzLmxlbmd0aDtcbiAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgbGV0IGNvdW50ID0gMDtcblxuICBwYWNrZXRzLmZvckVhY2goKHBhY2tldCwgaSkgPT4ge1xuICAgIC8vIGZvcmNlIGJhc2U2NCBlbmNvZGluZyBmb3IgYmluYXJ5IHBhY2tldHNcbiAgICBlbmNvZGVQYWNrZXQocGFja2V0LCBmYWxzZSwgZW5jb2RlZFBhY2tldCA9PiB7XG4gICAgICBlbmNvZGVkUGFja2V0c1tpXSA9IGVuY29kZWRQYWNrZXQ7XG4gICAgICBpZiAoKytjb3VudCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKGVuY29kZWRQYWNrZXRzLmpvaW4oU0VQQVJBVE9SKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuY29uc3QgZGVjb2RlUGF5bG9hZCA9IChlbmNvZGVkUGF5bG9hZCwgYmluYXJ5VHlwZSkgPT4ge1xuICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IGVuY29kZWRQYXlsb2FkLnNwbGl0KFNFUEFSQVRPUik7XG4gIGNvbnN0IHBhY2tldHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRlY29kZWRQYWNrZXQgPSBkZWNvZGVQYWNrZXQoZW5jb2RlZFBhY2tldHNbaV0sIGJpbmFyeVR5cGUpO1xuICAgIHBhY2tldHMucHVzaChkZWNvZGVkUGFja2V0KTtcbiAgICBpZiAoZGVjb2RlZFBhY2tldC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFja2V0cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwcm90b2NvbDogNCxcbiAgZW5jb2RlUGFja2V0LFxuICBlbmNvZGVQYXlsb2FkLFxuICBkZWNvZGVQYWNrZXQsXG4gIGRlY29kZVBheWxvYWRcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHN0ciA9ICcnO1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHFzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcbiAgdmFyIHFyeSA9IHt9O1xuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgfVxuICByZXR1cm4gcXJ5O1xufTtcbiIsIi8qKlxuICogUGFyc2VzIGFuIFVSSVxuICpcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xuXG52YXIgcGFydHMgPSBbXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xuICAgIHZhciBzcmMgPSBzdHIsXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcbiAgICAgICAgdXJpID0ge30sXG4gICAgICAgIGkgPSAxNDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XG4gICAgfVxuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmkucGF0aE5hbWVzID0gcGF0aE5hbWVzKHVyaSwgdXJpWydwYXRoJ10pO1xuICAgIHVyaS5xdWVyeUtleSA9IHF1ZXJ5S2V5KHVyaSwgdXJpWydxdWVyeSddKTtcblxuICAgIHJldHVybiB1cmk7XG59O1xuXG5mdW5jdGlvbiBwYXRoTmFtZXMob2JqLCBwYXRoKSB7XG4gICAgdmFyIHJlZ3ggPSAvXFwvezIsOX0vZyxcbiAgICAgICAgbmFtZXMgPSBwYXRoLnJlcGxhY2UocmVneCwgXCIvXCIpLnNwbGl0KFwiL1wiKTtcblxuICAgIGlmIChwYXRoLnN1YnN0cigwLCAxKSA9PSAnLycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKDAsIDEpO1xuICAgIH1cbiAgICBpZiAocGF0aC5zdWJzdHIocGF0aC5sZW5ndGggLSAxLCAxKSA9PSAnLycpIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKG5hbWVzLmxlbmd0aCAtIDEsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lcztcbn1cblxuZnVuY3Rpb24gcXVlcnlLZXkodXJpLCBxdWVyeSkge1xuICAgIHZhciBkYXRhID0ge307XG5cbiAgICBxdWVyeS5yZXBsYWNlKC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcbiAgICAgICAgaWYgKCQxKSB7XG4gICAgICAgICAgICBkYXRhWyQxXSA9ICQyO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJyZWFjdFwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJyZWFjdFwiXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkZhY2Vib29rTG9naW49dChyZXF1aXJlKFwicmVhY3RcIikpOmUuRmFjZWJvb2tMb2dpbj10KGUucmVhY3QpfSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4pe2lmKG9bbl0pcmV0dXJuIG9bbl0uZXhwb3J0czt2YXIgcj1vW25dPXtleHBvcnRzOnt9LGlkOm4sbG9hZGVkOiExfTtyZXR1cm4gZVtuXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyx0KSxyLmxvYWRlZD0hMCxyLmV4cG9ydHN9dmFyIG89e307cmV0dXJuIHQubT1lLHQuYz1vLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbyl7ZS5leHBvcnRzPW8oNCl9LGZ1bmN0aW9uKGUsdCxvKXtlLmV4cG9ydHM9byg2KSgpfSxmdW5jdGlvbih0LG8pe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHRbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl4oPzouKlsmXFxcXD9dXCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpLnJlcGxhY2UoL1tcXC5cXCtcXCpdL2csXCJcXFxcJCZcIikrXCIoPzpcXFxcPShbXiZdKikpPyk/LiokXCIsXCJpXCIpLFwiJDFcIikpfX0sZnVuY3Rpb24oZSx0LG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiByKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBpKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gcyhlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBvPWFyZ3VtZW50c1t0XTtmb3IodmFyIG4gaW4gbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxuKSYmKGVbbl09b1tuXSl9cmV0dXJuIGV9LGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBuPXRbb107bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxvLG4pe3JldHVybiBvJiZlKHQucHJvdG90eXBlLG8pLG4mJmUodCxuKSx0fX0oKSx1PW8oMiksZD1uKHUpLGw9bygxKSxwPW4obCksZj1vKDUpLGI9bihmKSx5PW8oMyksaD1uKHkpLGc9ZnVuY3Rpb24oKXt2YXIgZT0hMTt0cnl7ZT0hISh3aW5kb3cubmF2aWdhdG9yJiZ3aW5kb3cubmF2aWdhdG9yLnN0YW5kYWxvbmV8fG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goXCJDcmlPU1wiKXx8bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvbW9iaWxlL2kpKX1jYXRjaCh0KXt9cmV0dXJuIGV9LGs9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe3ZhciBlLG8sbixzO3IodGhpcyx0KTtmb3IodmFyIGM9YXJndW1lbnRzLmxlbmd0aCx1PUFycmF5KGMpLGQ9MDtkPGM7ZCsrKXVbZF09YXJndW1lbnRzW2RdO3JldHVybiBvPW49aSh0aGlzLChlPXQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwuYXBwbHkoZSxbdGhpc10uY29uY2F0KHUpKSksbi5zdGF0ZT17aXNTZGtMb2FkZWQ6ITEsaXNQcm9jZXNzaW5nOiExfSxuLnJlc3BvbnNlQXBpPWZ1bmN0aW9uKGUpe3dpbmRvdy5GQi5hcGkoXCIvbWVcIix7bG9jYWxlOm4ucHJvcHMubGFuZ3VhZ2UsZmllbGRzOm4ucHJvcHMuZmllbGRzfSxmdW5jdGlvbih0KXthKHQsZSksbi5wcm9wcy5jYWxsYmFjayh0KX0pfSxuLmNoZWNrTG9naW5TdGF0ZT1mdW5jdGlvbihlKXtuLnNldFN0YXRlSWZNb3VudGVkKHtpc1Byb2Nlc3Npbmc6ITF9KSxlLmF1dGhSZXNwb25zZT9uLnJlc3BvbnNlQXBpKGUuYXV0aFJlc3BvbnNlKTpuLnByb3BzLm9uRmFpbHVyZT9uLnByb3BzLm9uRmFpbHVyZSh7c3RhdHVzOmUuc3RhdHVzfSk6bi5wcm9wcy5jYWxsYmFjayh7c3RhdHVzOmUuc3RhdHVzfSl9LG4uY2hlY2tMb2dpbkFmdGVyUmVmcmVzaD1mdW5jdGlvbihlKXtcImNvbm5lY3RlZFwiPT09ZS5zdGF0dXM/bi5jaGVja0xvZ2luU3RhdGUoZSk6d2luZG93LkZCLmxvZ2luKGZ1bmN0aW9uKGUpe3JldHVybiBuLmNoZWNrTG9naW5TdGF0ZShlKX0sITApfSxuLmNsaWNrPWZ1bmN0aW9uKGUpe2lmKG4uc3RhdGUuaXNTZGtMb2FkZWQmJiFuLnN0YXRlLmlzUHJvY2Vzc2luZyYmIW4ucHJvcHMuaXNEaXNhYmxlZCl7bi5zZXRTdGF0ZSh7aXNQcm9jZXNzaW5nOiEwfSk7dmFyIHQ9bi5wcm9wcyxvPXQuc2NvcGUscj10LmFwcElkLGk9dC5vbkNsaWNrLHM9dC5yZXR1cm5TY29wZXMsYT10LnJlc3BvbnNlVHlwZSxjPXQucmVkaXJlY3RVcmksdT10LmRpc2FibGVNb2JpbGVSZWRpcmVjdCxkPXQuYXV0aFR5cGUsbD10LnN0YXRlO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGl8fChpKGUpLCFlLmRlZmF1bHRQcmV2ZW50ZWQpKXt2YXIgcD17Y2xpZW50X2lkOnIscmVkaXJlY3RfdXJpOmMsc3RhdGU6bCxyZXR1cm5fc2NvcGVzOnMsc2NvcGU6byxyZXNwb25zZV90eXBlOmEsYXV0aF90eXBlOmR9O2lmKG4ucHJvcHMuaXNNb2JpbGUmJiF1KXdpbmRvdy5sb2NhdGlvbi5ocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2RpYWxvZy9vYXV0aFwiKygwLGJbXCJkZWZhdWx0XCJdKShwKTtlbHNle2lmKCF3aW5kb3cuRkIpcmV0dXJuIHZvaWQobi5wcm9wcy5vbkZhaWx1cmUmJm4ucHJvcHMub25GYWlsdXJlKHtzdGF0dXM6XCJmYWNlYm9va05vdExvYWRlZFwifSkpO3dpbmRvdy5GQi5sb2dpbihuLmNoZWNrTG9naW5TdGF0ZSx7c2NvcGU6byxyZXR1cm5fc2NvcGVzOnMsYXV0aF90eXBlOnAuYXV0aF90eXBlfSl9fX19LHM9byxpKG4scyl9cmV0dXJuIHModCxlKSxjKHQsW3trZXk6XCJjb21wb25lbnREaWRNb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5faXNNb3VudGVkPSEwLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmFjZWJvb2stanNzZGtcIikpcmV0dXJuIHZvaWQgdGhpcy5zZGtMb2FkZWQoKTt0aGlzLnNldEZiQXN5bmNJbml0KCksdGhpcy5sb2FkU2RrQXN5bmNocm9ub3VzbHkoKTt2YXIgZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZiLXJvb3RcIik7ZXx8KGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlkPVwiZmItcm9vdFwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSkpfX0se2tleTpcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnN0YXRlLmlzU2RrTG9hZGVkJiZlLmF1dG9Mb2FkJiYhdGhpcy5wcm9wcy5hdXRvTG9hZCYmd2luZG93LkZCLmdldExvZ2luU3RhdHVzKHRoaXMuY2hlY2tMb2dpbkFmdGVyUmVmcmVzaCl9fSx7a2V5OlwiY29tcG9uZW50V2lsbFVubW91bnRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2lzTW91bnRlZD0hMX19LHtrZXk6XCJzZXRTdGF0ZUlmTW91bnRlZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2lzTW91bnRlZCYmdGhpcy5zZXRTdGF0ZShlKX19LHtrZXk6XCJzZXRGYkFzeW5jSW5pdFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMucHJvcHMsbz10LmFwcElkLG49dC54ZmJtbCxyPXQuY29va2llLGk9dC52ZXJzaW9uLHM9dC5hdXRvTG9hZDt3aW5kb3cuZmJBc3luY0luaXQ9ZnVuY3Rpb24oKXt3aW5kb3cuRkIuaW5pdCh7dmVyc2lvbjpcInZcIitpLGFwcElkOm8seGZibWw6bixjb29raWU6cn0pLGUuc2V0U3RhdGVJZk1vdW50ZWQoe2lzU2RrTG9hZGVkOiEwfSksKHN8fGUuaXNSZWRpcmVjdGVkRnJvbUZiKCkpJiZ3aW5kb3cuRkIuZ2V0TG9naW5TdGF0dXMoZS5jaGVja0xvZ2luQWZ0ZXJSZWZyZXNoKX19fSx7a2V5OlwiaXNSZWRpcmVjdGVkRnJvbUZiXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT13aW5kb3cubG9jYXRpb24uc2VhcmNoO3JldHVybigwLGhbXCJkZWZhdWx0XCJdKShlLFwiY29kZVwiKXx8KDAsaFtcImRlZmF1bHRcIl0pKGUsXCJncmFudGVkX3Njb3Blc1wiKX19LHtrZXk6XCJzZGtMb2FkZWRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2V0U3RhdGUoe2lzU2RrTG9hZGVkOiEwfSl9fSx7a2V5OlwibG9hZFNka0FzeW5jaHJvbm91c2x5XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnByb3BzLmxhbmd1YWdlOyFmdW5jdGlvbih0LG8sbil7dmFyIHI9dC5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXSxpPXIscz1yO3QuZ2V0RWxlbWVudEJ5SWQobil8fChzPXQuY3JlYXRlRWxlbWVudChvKSxzLmlkPW4scy5zcmM9XCJodHRwczovL2Nvbm5lY3QuZmFjZWJvb2submV0L1wiK2UrXCIvc2RrLmpzXCIsaS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLGkpKX0oZG9jdW1lbnQsXCJzY3JpcHRcIixcImZhY2Vib29rLWpzc2RrXCIpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uIG8oKXt2YXIgbz10aGlzLnByb3BzLnJlbmRlcjtpZighbyl0aHJvdyBuZXcgRXJyb3IoXCJSZWFjdEZhY2Vib29rTG9naW4gcmVxdWlyZXMgYSByZW5kZXIgcHJvcCB0byByZW5kZXJcIik7dmFyIGU9e29uQ2xpY2s6dGhpcy5jbGljayxpc0Rpc2FibGVkOiEhdGhpcy5wcm9wcy5pc0Rpc2FibGVkLGlzUHJvY2Vzc2luZzp0aGlzLnN0YXRlLmlzUHJvY2Vzc2luZyxpc1Nka0xvYWRlZDp0aGlzLnN0YXRlLmlzU2RrTG9hZGVkfTtyZXR1cm4gdGhpcy5wcm9wcy5yZW5kZXIoZSl9fV0pLHR9KGRbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7ay5wcm9wVHlwZXM9e2lzRGlzYWJsZWQ6cFtcImRlZmF1bHRcIl0uYm9vbCxjYWxsYmFjazpwW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsYXBwSWQ6cFtcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQseGZibWw6cFtcImRlZmF1bHRcIl0uYm9vbCxjb29raWU6cFtcImRlZmF1bHRcIl0uYm9vbCxhdXRoVHlwZTpwW1wiZGVmYXVsdFwiXS5zdHJpbmcsc2NvcGU6cFtcImRlZmF1bHRcIl0uc3RyaW5nLHN0YXRlOnBbXCJkZWZhdWx0XCJdLnN0cmluZyxyZXNwb25zZVR5cGU6cFtcImRlZmF1bHRcIl0uc3RyaW5nLHJldHVyblNjb3BlczpwW1wiZGVmYXVsdFwiXS5ib29sLHJlZGlyZWN0VXJpOnBbXCJkZWZhdWx0XCJdLnN0cmluZyxhdXRvTG9hZDpwW1wiZGVmYXVsdFwiXS5ib29sLGRpc2FibGVNb2JpbGVSZWRpcmVjdDpwW1wiZGVmYXVsdFwiXS5ib29sLGlzTW9iaWxlOnBbXCJkZWZhdWx0XCJdLmJvb2wsZmllbGRzOnBbXCJkZWZhdWx0XCJdLnN0cmluZyx2ZXJzaW9uOnBbXCJkZWZhdWx0XCJdLnN0cmluZyxsYW5ndWFnZTpwW1wiZGVmYXVsdFwiXS5zdHJpbmcsb25DbGljazpwW1wiZGVmYXVsdFwiXS5mdW5jLG9uRmFpbHVyZTpwW1wiZGVmYXVsdFwiXS5mdW5jLHJlbmRlcjpwW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWR9LGsuZGVmYXVsdFByb3BzPXtyZWRpcmVjdFVyaTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdy5sb2NhdGlvbi5ocmVmOlwiL1wiLHNjb3BlOlwicHVibGljX3Byb2ZpbGUsZW1haWxcIixyZXR1cm5TY29wZXM6ITEseGZibWw6ITEsY29va2llOiExLGF1dGhUeXBlOlwiXCIsZmllbGRzOlwibmFtZVwiLHZlcnNpb246XCIyLjNcIixsYW5ndWFnZTpcImVuX1VTXCIsZGlzYWJsZU1vYmlsZVJlZGlyZWN0OiExLGlzTW9iaWxlOmcoKSxvbkZhaWx1cmU6bnVsbCxzdGF0ZTpcImZhY2Vib29rZGlyZWN0XCIscmVzcG9uc2VUeXBlOlwiY29kZVwifSx0W1wiZGVmYXVsdFwiXT1rfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHRbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUpe3JldHVyblwiP1wiK09iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdCtcIj1cIitlbmNvZGVVUklDb21wb25lbnQoZVt0XSl9KS5qb2luKFwiJlwiKX19LGZ1bmN0aW9uKGUsdCxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKCl7fXZhciByPW8oNyk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbyxuLGkscyl7aWYocyE9PXIpe3ZhciBhPW5ldyBFcnJvcihcIkNhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFVzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uIFJlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXNcIik7dGhyb3cgYS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLGF9fWZ1bmN0aW9uIHQoKXtyZXR1cm4gZX1lLmlzUmVxdWlyZWQ9ZTt2YXIgbz17YXJyYXk6ZSxib29sOmUsZnVuYzplLG51bWJlcjplLG9iamVjdDplLHN0cmluZzplLHN5bWJvbDplLGFueTplLGFycmF5T2Y6dCxlbGVtZW50OmUsaW5zdGFuY2VPZjp0LG5vZGU6ZSxvYmplY3RPZjp0LG9uZU9mOnQsb25lT2ZUeXBlOnQsc2hhcGU6dCxleGFjdDp0fTtyZXR1cm4gby5jaGVja1Byb3BUeXBlcz1uLG8uUHJvcFR5cGVzPW8sb319LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89XCJTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRFwiO2UuZXhwb3J0cz1vfV0pfSk7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIEF1ZGlvKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSAoX2IgPSBwcm9wcy5maWxsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnI2ZmZic7XG4gICAgdmFyIHN0cm9rZSA9IChfYyA9IHByb3BzLnN0cm9rZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogJ3RyYW5zcGFyZW50JztcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSBwcm9wcy5maWxsT3BhY2l0eTtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfZCA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogODAsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2UgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogNTUgfSksIHsgdmlld0JveDogXCIwIDAgNTUgODBcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHsgdHJhbnNmb3JtOiBcIm1hdHJpeCgxIDAgMCAtMSAwIDgwKVwiIH0sXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInJlY3RcIiwgX19hc3NpZ24oeyB3aWR0aDogMTAsIGhlaWdodDogMjAsIHJ4OiAzIH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImhlaWdodFwiLCBiZWdpbjogXCIwc1wiLCBkdXI6IDQuMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIyMDs0NTs1Nzs4MDs2NDszMjs2Njs0NTs2NDsyMzs2NjsxMzs2NDs1NjszNDszNDsyOzIzOzc2Ozc5OzIwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIF9fYXNzaWduKHsgeDogMTUsIHdpZHRoOiAxMCwgaGVpZ2h0OiA4MCwgcng6IDMgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiaGVpZ2h0XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMiAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCI4MDs1NTszMzs1Ozc1OzIzOzczOzMzOzEyOzE0OzYwOzgwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIF9fYXNzaWduKHsgeDogMzAsIHdpZHRoOiAxMCwgaGVpZ2h0OiA1MCwgcng6IDMgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiaGVpZ2h0XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS40IC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjUwOzM0Ozc4OzIzOzU2OzIzOzM0Ozc2OzgwOzU0OzIxOzUwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIF9fYXNzaWduKHsgeDogNDUsIHdpZHRoOiAxMCwgaGVpZ2h0OiAzMCwgcng6IDMgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiaGVpZ2h0XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMiAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIzMDs0NTsxMzs4MDs1Njs3Mjs0NTs3NjszNDsyMzs2NzszMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEF1ZGlvO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIEJhbGxUcmlhbmdsZShwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSBwcm9wcy5maWxsO1xuICAgIHZhciBzdHJva2UgPSAoX2IgPSBwcm9wcy5zdHJva2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSBwcm9wcy5maWxsT3BhY2l0eTtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfYyA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogNTcsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2QgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogNTcgfSksIHsgdmlld0JveDogXCIwIDAgNTcgNTdcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgxIDEpXCIsIHN0cm9rZVdpZHRoOiAyLCBmaWxsOiBcIm5vbmVcIiwgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiIH0sXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCBfX2Fzc2lnbih7IGN4OiA1LCBjeTogNTAsIHI6IDUgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiY3lcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAyLjIgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiNTA7NTs1MDs1MFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiY3hcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAyLjIgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiNTsyNzs0OTs1XCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgX19hc3NpZ24oeyBjeDogMjcsIGN5OiA1LCByOiA1IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImN5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMi4yIC8gc3BlZWQgKyBcInNcIiwgZnJvbTogNSwgdG86IDUsIHZhbHVlczogXCI1OzUwOzUwOzVcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImN4XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMi4yIC8gc3BlZWQgKyBcInNcIiwgZnJvbTogMjcsIHRvOiAyNywgdmFsdWVzOiBcIjI3OzQ5OzU7MjdcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCBfX2Fzc2lnbih7IGN4OiA0OSwgY3k6IDUwLCByOiA1IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImN5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMi4yIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjUwOzUwOzU7NTBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImN4XCIsIGZyb206IDQ5LCB0bzogNDksIGJlZ2luOiBcIjBzXCIsIGR1cjogMi4yIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjQ5OzU7Mjc7NDlcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSkpKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCYWxsVHJpYW5nbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gQmFycyhwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSAoX2IgPSBwcm9wcy5maWxsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnI2ZmZic7XG4gICAgdmFyIHN0cm9rZSA9IHByb3BzLnN0cm9rZTtcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSBwcm9wcy5maWxsT3BhY2l0eTtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfYyA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMTQwLCBzcGVlZDogdW5kZWZpbmVkLCBzdHJva2U6IHVuZGVmaW5lZCwgc3Ryb2tlT3BhY2l0eTogdW5kZWZpbmVkLCBzdHJva2VXaWR0aDogdW5kZWZpbmVkLCB3aWR0aDogKF9kID0gcHJvcHMud2lkdGgpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEzNSB9KSwgeyB2aWV3Qm94OiBcIjAgMCAxMzUgMTQwXCIgfSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCBfX2Fzc2lnbih7IHk6IDEwLCB3aWR0aDogMTUsIGhlaWdodDogMTIwLCByeDogNiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImhlaWdodFwiLCBiZWdpbjogXCIwLjVzXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxMjA7MTEwOzEwMDs5MDs4MDs3MDs2MDs1MDs0MDsxNDA7MTIwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInlcIiwgYmVnaW46IFwiMC41c1wiLCBkdXI6IDEgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTA7MTU7MjA7MjU7MzA7MzU7NDA7NDU7NTA7MDsxMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIF9fYXNzaWduKHsgeDogMzAsIHk6IDEwLCB3aWR0aDogMTUsIGhlaWdodDogMTIwLCByeDogNiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImhlaWdodFwiLCBiZWdpbjogXCIwLjI1c1wiLCBkdXI6IDEgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTIwOzExMDsxMDA7OTA7ODA7NzA7NjA7NTA7NDA7MTQwOzEyMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJ5XCIsIGJlZ2luOiBcIjAuMjVzXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxMDsxNTsyMDsyNTszMDszNTs0MDs0NTs1MDswOzEwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInJlY3RcIiwgX19hc3NpZ24oeyB4OiA2MCwgd2lkdGg6IDE1LCBoZWlnaHQ6IDE0MCwgcng6IDYgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJoZWlnaHRcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAxIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjEyMDsxMTA7MTAwOzkwOzgwOzcwOzYwOzUwOzQwOzE0MDsxMjBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwieVwiLCBiZWdpbjogXCIwc1wiLCBkdXI6IDEgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTA7MTU7MjA7MjU7MzA7MzU7NDA7NDU7NTA7MDsxMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIsIF9fYXNzaWduKHsgeDogOTAsIHk6IDEwLCB3aWR0aDogMTUsIGhlaWdodDogMTIwLCByeDogNiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImhlaWdodFwiLCBiZWdpbjogXCIwLjI1c1wiLCBkdXI6IDEgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTIwOzExMDsxMDA7OTA7ODA7NzA7NjA7NTA7NDA7MTQwOzEyMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJ5XCIsIGJlZ2luOiBcIjAuMjVzXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxMDsxNTsyMDsyNTszMDszNTs0MDs0NTs1MDswOzEwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInJlY3RcIiwgX19hc3NpZ24oeyB4OiAxMjAsIHk6IDEwLCB3aWR0aDogMTUsIGhlaWdodDogMTIwLCByeDogNiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImhlaWdodFwiLCBiZWdpbjogXCIwLjVzXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxMjA7MTEwOzEwMDs5MDs4MDs3MDs2MDs1MDs0MDsxNDA7MTIwXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInlcIiwgYmVnaW46IFwiMC41c1wiLCBkdXI6IDEgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTA7MTU7MjA7MjU7MzA7MzU7NDA7NDU7NTA7MDsxMFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gQmFycztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBDaXJjbGVzKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHZhciBzcGVlZCA9IE51bWJlcihTdHJpbmcoKF9hID0gcHJvcHMuc3BlZWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEpKTtcbiAgICB2YXIgZmlsbCA9IChfYiA9IHByb3BzLmZpbGwpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgc3Ryb2tlID0gcHJvcHMuc3Ryb2tlO1xuICAgIHZhciBmaWxsT3BhY2l0eSA9IHByb3BzLmZpbGxPcGFjaXR5O1xuICAgIHZhciBzdHJva2VPcGFjaXR5ID0gcHJvcHMuc3Ryb2tlT3BhY2l0eTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fYXNzaWduKHt9LCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvcHMpLCB7IGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lXG4gICAgICAgICAgICA/IFwiaWNvbi1sb2FkaW5nIFwiICsgcHJvcHMuY2xhc3NOYW1lXG4gICAgICAgICAgICA6ICdpY29uLWxvYWRpbmcnLCBmaWxsOiB1bmRlZmluZWQsIGZpbGxPcGFjaXR5OiB1bmRlZmluZWQsIGhlaWdodDogKF9jID0gcHJvcHMuaGVpZ2h0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAxMzUsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2QgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMTM1IH0pLCB7IHZpZXdCb3g6IFwiMCAwIDEzNSAxMzVcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIF9fYXNzaWduKHsgZDogXCJNNjcuNDQ3IDU4YzUuNTIzIDAgMTAtNC40NzcgMTAtMTBzLTQuNDc3LTEwLTEwLTEwLTEwIDQuNDc3LTEwIDEwIDQuNDc3IDEwIDEwIDEwem05LjQ0OCA5LjQ0N2MwIDUuNTIzIDQuNDc3IDEwIDEwIDEwIDUuNTIyIDAgMTAtNC40NzcgMTAtMTBzLTQuNDc4LTEwLTEwLTEwYy01LjUyMyAwLTEwIDQuNDc3LTEwIDEwem0tOS40NDggOS40NDhjLTUuNTIzIDAtMTAgNC40NzctMTAgMTAgMCA1LjUyMiA0LjQ3NyAxMCAxMCAxMHMxMC00LjQ3OCAxMC0xMGMwLTUuNTIzLTQuNDc3LTEwLTEwLTEwek01OCA2Ny40NDdjMC01LjUyMy00LjQ3Ny0xMC0xMC0xMHMtMTAgNC40NzctMTAgMTAgNC40NzcgMTAgMTAgMTAgMTAtNC40NzcgMTAtMTB6XCIgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlVHJhbnNmb3JtXCIsIHsgYXR0cmlidXRlTmFtZTogXCJ0cmFuc2Zvcm1cIiwgdHlwZTogXCJyb3RhdGVcIiwgZnJvbTogXCIwIDY3IDY3XCIsIHRvOiBcIi0zNjAgNjcgNjdcIiwgZHVyOiAyLjUgLyBzcGVlZCArIFwic1wiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgX19hc3NpZ24oeyBkOiBcIk0yOC4xOSA0MC4zMWM2LjYyNyAwIDEyLTUuMzc0IDEyLTEyIDAtNi42MjgtNS4zNzMtMTItMTItMTItNi42MjggMC0xMiA1LjM3Mi0xMiAxMiAwIDYuNjI2IDUuMzcyIDEyIDEyIDEyem0zMC43Mi0xOS44MjVjNC42ODYgNC42ODcgMTIuMjg0IDQuNjg3IDE2Ljk3IDAgNC42ODYtNC42ODYgNC42ODYtMTIuMjg0IDAtMTYuOTctNC42ODYtNC42ODctMTIuMjg0LTQuNjg3LTE2Ljk3IDAtNC42ODcgNC42ODYtNC42ODcgMTIuMjg0IDAgMTYuOTd6bTM1Ljc0IDcuNzA1YzAgNi42MjcgNS4zNyAxMiAxMiAxMiA2LjYyNiAwIDEyLTUuMzczIDEyLTEyIDAtNi42MjgtNS4zNzQtMTItMTItMTItNi42MyAwLTEyIDUuMzcyLTEyIDEyem0xOS44MjIgMzAuNzJjLTQuNjg2IDQuNjg2LTQuNjg2IDEyLjI4NCAwIDE2Ljk3IDQuNjg3IDQuNjg2IDEyLjI4NSA0LjY4NiAxNi45NyAwIDQuNjg3LTQuNjg2IDQuNjg3LTEyLjI4NCAwLTE2Ljk3LTQuNjg1LTQuNjg3LTEyLjI4My00LjY4Ny0xNi45NyAwem0tNy43MDQgMzUuNzRjLTYuNjI3IDAtMTIgNS4zNy0xMiAxMiAwIDYuNjI2IDUuMzczIDEyIDEyIDEyczEyLTUuMzc0IDEyLTEyYzAtNi42My01LjM3My0xMi0xMi0xMnptLTMwLjcyIDE5LjgyMmMtNC42ODYtNC42ODYtMTIuMjg0LTQuNjg2LTE2Ljk3IDAtNC42ODYgNC42ODctNC42ODYgMTIuMjg1IDAgMTYuOTcgNC42ODYgNC42ODcgMTIuMjg0IDQuNjg3IDE2Ljk3IDAgNC42ODctNC42ODUgNC42ODctMTIuMjgzIDAtMTYuOTd6bS0zNS43NC03LjcwNGMwLTYuNjI3LTUuMzcyLTEyLTEyLTEyLTYuNjI2IDAtMTIgNS4zNzMtMTIgMTJzNS4zNzQgMTIgMTIgMTJjNi42MjggMCAxMi01LjM3MyAxMi0xMnptLTE5LjgyMy0zMC43MmM0LjY4Ny00LjY4NiA0LjY4Ny0xMi4yODQgMC0xNi45Ny00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcgMC00LjY4NyA0LjY4Ni00LjY4NyAxMi4yODQgMCAxNi45NyA0LjY4NiA0LjY4NyAxMi4yODQgNC42ODcgMTYuOTcgMHpcIiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVUcmFuc2Zvcm1cIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInRyYW5zZm9ybVwiLCB0eXBlOiBcInJvdGF0ZVwiLCBmcm9tOiBcIjAgNjcgNjdcIiwgdG86IFwiMzYwIDY3IDY3XCIsIGR1cjogOCAvIHNwZWVkICsgXCJzXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENpcmNsZXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gR3JpZChwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSAoX2IgPSBwcm9wcy5maWxsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnI2ZmZic7XG4gICAgdmFyIHN0cm9rZSA9IHByb3BzLnN0cm9rZTtcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSBwcm9wcy5maWxsT3BhY2l0eTtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfYyA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMTA1LCBzcGVlZDogdW5kZWZpbmVkLCBzdHJva2U6IHVuZGVmaW5lZCwgc3Ryb2tlT3BhY2l0eTogdW5kZWZpbmVkLCBzdHJva2VXaWR0aDogdW5kZWZpbmVkLCB3aWR0aDogKF9kID0gcHJvcHMud2lkdGgpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEwNSB9KSwgeyB2aWV3Qm94OiBcIjAgMCAxMDUgMTA1XCIgfSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDEyLjUsIGN5OiAxMi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDEyLjUsIGN5OiA1Mi41LCByOiAxMi41LCBmaWxsT3BhY2l0eTogMC41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjEwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDUyLjUsIGN5OiAxMi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjMwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDUyLjUsIGN5OiA1Mi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjYwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDkyLjUsIGN5OiAxMi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjgwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDkyLjUsIGN5OiA1Mi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjQwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDEyLjUsIGN5OiA5Mi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjcwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDUyLjUsIGN5OiA5Mi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjUwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDkyLjUsIGN5OiA5Mi41LCByOiAxMi41IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjIwMG1zXCIsIGR1cjogMSAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy4yOzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdyaWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gSGVhcnRzKHByb3BzKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSAoX2IgPSBwcm9wcy5maWxsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnI2ZmZic7XG4gICAgdmFyIHN0cm9rZSA9IHByb3BzLnN0cm9rZTtcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSAoX2MgPSBwcm9wcy5maWxsT3BhY2l0eSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMC41O1xuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19hc3NpZ24oe30sIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcm9wcyksIHsgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWVcbiAgICAgICAgICAgID8gXCJpY29uLWxvYWRpbmcgXCIgKyBwcm9wcy5jbGFzc05hbWVcbiAgICAgICAgICAgIDogJ2ljb24tbG9hZGluZycsIGZpbGw6IHVuZGVmaW5lZCwgZmlsbE9wYWNpdHk6IHVuZGVmaW5lZCwgaGVpZ2h0OiAoX2QgPSBwcm9wcy5oZWlnaHQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDY0LCBzcGVlZDogdW5kZWZpbmVkLCBzdHJva2U6IHVuZGVmaW5lZCwgc3Ryb2tlT3BhY2l0eTogdW5kZWZpbmVkLCBzdHJva2VXaWR0aDogdW5kZWZpbmVkLCB3aWR0aDogKF9lID0gcHJvcHMud2lkdGgpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDE0MCB9KSwgeyB2aWV3Qm94OiBcIjAgMCAxNDAgNjRcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIF9fYXNzaWduKHsgZDogXCJNMzAuMjYyIDU3LjAyTDcuMTk1IDQwLjcyM2MtNS44NC0zLjk3Ni03LjU2LTEyLjA2LTMuODQyLTE4LjA2MyAzLjcxNS02IDExLjQ2Ny03LjY1IDE3LjMwNi0zLjY4bDQuNTIgMy43NiAyLjYtNS4yNzRjMy43MTctNi4wMDIgMTEuNDctNy42NSAxNy4zMDUtMy42OCA1Ljg0IDMuOTcgNy41NiAxMi4wNTQgMy44NDIgMTguMDYyTDM0LjQ5IDU2LjExOGMtLjg5NyAxLjUxMi0yLjc5MyAxLjkxNS00LjIyOC45elwiLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHkgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS40IC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjAuNTsxOzAuNVwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIF9fYXNzaWduKHsgZDogXCJNMTA1LjUxMiA1Ni4xMmwtMTQuNDQtMjQuMjcyYy0zLjcxNi02LjAwOC0xLjk5Ni0xNC4wOTMgMy44NDMtMTguMDYyIDUuODM1LTMuOTcgMTMuNTg4LTIuMzIyIDE3LjMwNiAzLjY4bDIuNiA1LjI3NCA0LjUyLTMuNzZjNS44NC0zLjk3IDEzLjU5Mi0yLjMyIDE3LjMwNyAzLjY4IDMuNzE4IDYuMDAzIDEuOTk4IDE0LjA4OC0zLjg0MiAxOC4wNjRMMTA5Ljc0IDU3LjAyYy0xLjQzNCAxLjAxNC0zLjMzLjYxLTQuMjI4LS45elwiLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHkgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjAuN3NcIiwgZHVyOiAxLjQgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMC41OzE7MC41XCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgX19hc3NpZ24oeyBkOiBcIk02Ny40MDggNTcuODM0bC0yMy4wMS0yNC45OGMtNS44NjQtNi4xNS01Ljg2NC0xNi4xMDggMC0yMi4yNDggNS44Ni02LjE0IDE1LjM3LTYuMTQgMjEuMjM0IDBMNzAgMTYuMTY4bDQuMzY4LTUuNTYyYzUuODYzLTYuMTQgMTUuMzc1LTYuMTQgMjEuMjM1IDAgNS44NjMgNi4xNCA1Ljg2MyAxNi4wOTggMCAyMi4yNDdsLTIzLjAwNyAyNC45OGMtMS40MyAxLjU1Ni0zLjc1NyAxLjU1Ni01LjE4OCAwelwiIH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UgfSkpKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBIZWFydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gT3ZhbChwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgdmFyIHNwZWVkID0gTnVtYmVyKFN0cmluZygoX2EgPSBwcm9wcy5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkpO1xuICAgIHZhciBzdHJva2UgPSAoX2IgPSBwcm9wcy5zdHJva2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgc3Ryb2tlV2lkdGggPSAoX2MgPSBwcm9wcy5zdHJva2VXaWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMjtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfZCA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMzgsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2UgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMzggfSksIHsgdmlld0JveDogXCIwIDAgMzggMzhcIiwgb3ZlcmZsb3c6IFwidmlzaWJsZVwiIH0pLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgX19hc3NpZ24oeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDEgMSlcIiwgZmlsbDogXCJub25lXCIsIGZpbGxSdWxlOiBcImV2ZW5vZGRcIiB9LCB7IHN0cm9rZTogc3Ryb2tlLCBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IHN0cm9rZU9wYWNpdHk6IDAuNSwgY3g6IDE4LCBjeTogMTgsIHI6IDE4IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMzYgMThjMC05Ljk0LTguMDYtMTgtMTgtMThcIiB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVRyYW5zZm9ybVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwidHJhbnNmb3JtXCIsIHR5cGU6IFwicm90YXRlXCIsIGZyb206IFwiMCAxOCAxOFwiLCB0bzogXCIzNjAgMTggMThcIiwgZHVyOiAxIC8gc3BlZWQgKyBcInNcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE92YWw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZnVuY3Rpb24gUHVmZihwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgdmFyIHNwZWVkID0gTnVtYmVyKFN0cmluZygoX2EgPSBwcm9wcy5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkpO1xuICAgIHZhciBzdHJva2UgPSAoX2IgPSBwcm9wcy5zdHJva2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgc3Ryb2tlV2lkdGggPSAoX2MgPSBwcm9wcy5zdHJva2VXaWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMjtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfZCA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogNDQsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2UgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogNDQgfSksIHsgdmlld0JveDogXCIwIDAgNDQgNDRcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIF9fYXNzaWduKHsgZmlsbDogXCJub25lXCIsIGZpbGxSdWxlOiBcImV2ZW5vZGRcIiB9LCB7IHN0cm9rZTogc3Ryb2tlLCBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiAyMiwgY3k6IDIyLCByOiAxIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJyXCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS44IC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjE7IDIwXCIsIGNhbGNNb2RlOiBcInNwbGluZVwiLCBrZXlUaW1lczogXCIwOyAxXCIsIGtleVNwbGluZXM6IFwiMC4xNjUsIDAuODQsIDAuNDQsIDFcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwic3Ryb2tlLW9wYWNpdHlcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAxLjggLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTsgMFwiLCBjYWxjTW9kZTogXCJzcGxpbmVcIiwga2V5VGltZXM6IFwiMDsgMVwiLCBrZXlTcGxpbmVzOiBcIjAuMywgMC42MSwgMC4zNTUsIDFcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHsgY3g6IDIyLCBjeTogMjIsIHI6IDEgfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInJcIiwgYmVnaW46IFwiLTAuOXNcIiwgZHVyOiAxLjggLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTsgMjBcIiwgY2FsY01vZGU6IFwic3BsaW5lXCIsIGtleVRpbWVzOiBcIjA7IDFcIiwga2V5U3BsaW5lczogXCIwLjE2NSwgMC44NCwgMC40NCwgMVwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJzdHJva2Utb3BhY2l0eVwiLCBiZWdpbjogXCItMC45c1wiLCBkdXI6IDEuOCAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOyAwXCIsIGNhbGNNb2RlOiBcInNwbGluZVwiLCBrZXlUaW1lczogXCIwOyAxXCIsIGtleVNwbGluZXM6IFwiMC4zLCAwLjYxLCAwLjM1NSwgMVwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpKSkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gUHVmZjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBSaW5ncyhwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgdmFyIHNwZWVkID0gTnVtYmVyKFN0cmluZygoX2EgPSBwcm9wcy5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkpO1xuICAgIHZhciBzdHJva2UgPSAoX2IgPSBwcm9wcy5zdHJva2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgc3Ryb2tlV2lkdGggPSAoX2MgPSBwcm9wcy5zdHJva2VXaWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMjtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfZCA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogNDUsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2UgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogNDUgfSksIHsgdmlld0JveDogXCIwIDAgNDUgNDVcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIF9fYXNzaWduKHsgZmlsbDogXCJub25lXCIsIGZpbGxSdWxlOiBcImV2ZW5vZGRcIiwgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgxIDEpXCIgfSwgeyBzdHJva2U6IHN0cm9rZSwgc3Ryb2tlV2lkdGg6IHN0cm9rZVdpZHRoLCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgeyBjeDogMjIsIGN5OiAyMiwgcjogNiB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiclwiLCBiZWdpbjogXCIxLjVzXCIsIGR1cjogMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCI2OzIyXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJzdHJva2Utb3BhY2l0eVwiLCBiZWdpbjogXCIxLjVzXCIsIGR1cjogMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOzBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInN0cm9rZS13aWR0aFwiLCBiZWdpbjogXCIxLjVzXCIsIGR1cjogMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIyOzBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiAyMiwgY3k6IDIyLCByOiA2IH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJyXCIsIGJlZ2luOiBcIjNzXCIsIGR1cjogMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCI2OzIyXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJzdHJva2Utb3BhY2l0eVwiLCBiZWdpbjogXCIzc1wiLCBkdXI6IDMgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTswXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJzdHJva2Utd2lkdGhcIiwgYmVnaW46IFwiM3NcIiwgZHVyOiAzIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjI7MFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHsgY3g6IDIyLCBjeTogMjIsIHI6IDggfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcInJcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAxLjUgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiNjsxOzI7Mzs0OzU7NlwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJpbmdzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmZ1bmN0aW9uIFNwaW5uaW5nQ2lyY2xlcyhwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICB2YXIgc3BlZWQgPSBOdW1iZXIoU3RyaW5nKChfYSA9IHByb3BzLnNwZWVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxKSk7XG4gICAgdmFyIGZpbGwgPSAoX2IgPSBwcm9wcy5maWxsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnI2ZmZic7XG4gICAgdmFyIHN0cm9rZSA9IHByb3BzLnN0cm9rZTtcbiAgICB2YXIgZmlsbE9wYWNpdHkgPSBwcm9wcy5maWxsT3BhY2l0eTtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfYyA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogNTgsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2QgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogNTggfSksIHsgdmlld0JveDogXCIwIDAgNTggNThcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJnXCIsIF9fYXNzaWduKHsgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSgyIDEpXCIsIGZpbGxSdWxlOiBcImV2ZW5vZGRcIiB9LCB7IGZpbGw6IGZpbGwsIHN0cm9rZTogc3Ryb2tlLCBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiA0Mi42MDEsIGN5OiAxMS40NjIsIHI6IDUgfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImZpbGwtb3BhY2l0eVwiLCBiZWdpbjogXCIwc1wiLCBkdXI6IDEuMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOzA7MDswOzA7MDswOzBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiA0OS4wNjMsIGN5OiAyNy4wNjMsIHI6IDUsIGZpbGxPcGFjaXR5OiAwIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJmaWxsLW9wYWNpdHlcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAxLjMgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMDsxOzA7MDswOzA7MDswXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgeyBjeDogNDIuNjAxLCBjeTogNDIuNjYzLCByOiA1LCBmaWxsT3BhY2l0eTogMCB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS4zIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjA7MDsxOzA7MDswOzA7MFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHsgY3g6IDI3LCBjeTogNDkuMTI1LCByOiA1LCBmaWxsT3BhY2l0eTogMCB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS4zIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjA7MDswOzE7MDswOzA7MFwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIHsgY3g6IDExLjM5OSwgY3k6IDQyLjY2MywgcjogNSwgZmlsbE9wYWNpdHk6IDAgfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImZpbGwtb3BhY2l0eVwiLCBiZWdpbjogXCIwc1wiLCBkdXI6IDEuMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIwOzA7MDswOzE7MDswOzBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiA0LjkzOCwgY3k6IDI3LjA2MywgcjogNSwgZmlsbE9wYWNpdHk6IDAgfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImZpbGwtb3BhY2l0eVwiLCBiZWdpbjogXCIwc1wiLCBkdXI6IDEuMyAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIwOzA7MDswOzA7MTswOzBcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiAxMS4zOTksIGN5OiAxMS40NjIsIHI6IDUsIGZpbGxPcGFjaXR5OiAwIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJmaWxsLW9wYWNpdHlcIiwgYmVnaW46IFwiMHNcIiwgZHVyOiAxLjMgLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMDswOzA7MDswOzA7MTswXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgeyBjeDogMjcsIGN5OiA1LCByOiA1LCBmaWxsT3BhY2l0eTogMCB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGJlZ2luOiBcIjBzXCIsIGR1cjogMS4zIC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjA7MDswOzA7MDswOzA7MVwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSkpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNwaW5uaW5nQ2lyY2xlcztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBUYWlsU3Bpbihwcm9wcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgdmFyIHNwZWVkID0gTnVtYmVyKFN0cmluZygoX2EgPSBwcm9wcy5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkpO1xuICAgIHZhciBzdHJva2UgPSAoX2IgPSBwcm9wcy5zdHJva2UpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcjZmZmJztcbiAgICB2YXIgc3Ryb2tlV2lkdGggPSAoX2MgPSBwcm9wcy5zdHJva2VXaWR0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMjtcbiAgICB2YXIgc3Ryb2tlT3BhY2l0eSA9IHByb3BzLnN0cm9rZU9wYWNpdHk7XG4gICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX2Fzc2lnbih7fSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHByb3BzKSwgeyBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgPyBcImljb24tbG9hZGluZyBcIiArIHByb3BzLmNsYXNzTmFtZVxuICAgICAgICAgICAgOiAnaWNvbi1sb2FkaW5nJywgZmlsbDogdW5kZWZpbmVkLCBmaWxsT3BhY2l0eTogdW5kZWZpbmVkLCBoZWlnaHQ6IChfZCA9IHByb3BzLmhlaWdodCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogMzgsIHNwZWVkOiB1bmRlZmluZWQsIHN0cm9rZTogdW5kZWZpbmVkLCBzdHJva2VPcGFjaXR5OiB1bmRlZmluZWQsIHN0cm9rZVdpZHRoOiB1bmRlZmluZWQsIHdpZHRoOiAoX2UgPSBwcm9wcy53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMzggfSksIHsgdmlld0JveDogXCIwIDAgMzggMzhcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkZWZzXCIsIG51bGwsXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpbmVhckdyYWRpZW50XCIsIHsgeDE6IFwiOC4wNDIlXCIsIHkxOiBcIjAlXCIsIHgyOiBcIjY1LjY4MiVcIiwgeTI6IFwiMjMuODY1JVwiLCBpZDogXCJwcmVmaXhfX2FcIiB9LFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3RvcFwiLCB7IHN0b3BPcGFjaXR5OiAwLCBvZmZzZXQ6IFwiMCVcIiB9KSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInN0b3BcIiwgeyBzdG9wT3BhY2l0eTogMC42MzEsIG9mZnNldDogXCI2My4xNDYlXCIgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdG9wXCIsIHsgb2Zmc2V0OiBcIjEwMCVcIiB9KSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImdcIiwgeyB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKDEgMSlcIiwgZmlsbDogXCJub25lXCIsIGZpbGxSdWxlOiBcImV2ZW5vZGRcIiB9LFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIF9fYXNzaWduKHsgZDogXCJNMzYgMThjMC05Ljk0LTguMDYtMTgtMTgtMThcIiB9LCB7IHN0cm9rZTogc3Ryb2tlLCBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHkgfSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlVHJhbnNmb3JtXCIsIHsgYXR0cmlidXRlTmFtZTogXCJ0cmFuc2Zvcm1cIiwgdHlwZTogXCJyb3RhdGVcIiwgZnJvbTogXCIwIDE4IDE4XCIsIHRvOiBcIjM2MCAxOCAxOFwiLCBkdXI6IDAuOSAvIHNwZWVkICsgXCJzXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7IGN4OiAzNiwgY3k6IDE4LCByOiAxIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlVHJhbnNmb3JtXCIsIHsgYXR0cmlidXRlTmFtZTogXCJ0cmFuc2Zvcm1cIiwgdHlwZTogXCJyb3RhdGVcIiwgZnJvbTogXCIwIDE4IDE4XCIsIHRvOiBcIjM2MCAxOCAxOFwiLCBkdXI6IDAuOSAvIHNwZWVkICsgXCJzXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSkpKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUYWlsU3BpbjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBUaHJlZURvdHMocHJvcHMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgdmFyIHNwZWVkID0gTnVtYmVyKFN0cmluZygoX2EgPSBwcm9wcy5zcGVlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkpO1xuICAgIHZhciBmaWxsID0gKF9iID0gcHJvcHMuZmlsbCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyNmZmYnO1xuICAgIHZhciBzdHJva2UgPSBwcm9wcy5zdHJva2U7XG4gICAgdmFyIGZpbGxPcGFjaXR5ID0gcHJvcHMuZmlsbE9wYWNpdHk7XG4gICAgdmFyIHN0cm9rZU9wYWNpdHkgPSBwcm9wcy5zdHJva2VPcGFjaXR5O1xuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19hc3NpZ24oe30sIF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcm9wcyksIHsgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWVcbiAgICAgICAgICAgID8gXCJpY29uLWxvYWRpbmcgXCIgKyBwcm9wcy5jbGFzc05hbWVcbiAgICAgICAgICAgIDogJ2ljb24tbG9hZGluZycsIGZpbGw6IHVuZGVmaW5lZCwgZmlsbE9wYWNpdHk6IHVuZGVmaW5lZCwgaGVpZ2h0OiAoX2MgPSBwcm9wcy5oZWlnaHQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDMwLCBzcGVlZDogdW5kZWZpbmVkLCBzdHJva2U6IHVuZGVmaW5lZCwgc3Ryb2tlT3BhY2l0eTogdW5kZWZpbmVkLCBzdHJva2VXaWR0aDogdW5kZWZpbmVkLCB3aWR0aDogKF9kID0gcHJvcHMud2lkdGgpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDEyMCB9KSwgeyB2aWV3Qm94OiBcIjAgMCAxMjAgMzBcIiB9KSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgX19hc3NpZ24oeyBjeDogMTUsIGN5OiAxNSwgcjogMTUgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJyXCIsIGZyb206IDE1LCB0bzogMTUsIGJlZ2luOiBcIjBzXCIsIGR1cjogMC44IC8gc3BlZWQgKyBcInNcIiwgdmFsdWVzOiBcIjE1Ozk7MTVcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGZyb206IDEsIHRvOiAxLCBiZWdpbjogXCIwc1wiLCBkdXI6IDAuOCAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxOy41OzFcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIsIF9fYXNzaWduKHsgY3g6IDYwLCBjeTogMTUsIHI6IDksIGZpbGxPcGFjaXR5OiAwLjMgfSwgeyBmaWxsOiBmaWxsLCBzdHJva2U6IHN0cm9rZSwgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LCBzdHJva2VPcGFjaXR5OiBzdHJva2VPcGFjaXR5IH0pLFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJhbmltYXRlXCIsIHsgYXR0cmlidXRlTmFtZTogXCJyXCIsIGZyb206IDksIHRvOiA5LCBiZWdpbjogXCIwc1wiLCBkdXI6IDAuOCAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCI5OzE1OzlcIiwgY2FsY01vZGU6IFwibGluZWFyXCIsIHJlcGVhdENvdW50OiBcImluZGVmaW5pdGVcIiB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiZmlsbC1vcGFjaXR5XCIsIGZyb206IDAuNSwgdG86IDAuNSwgYmVnaW46IFwiMHNcIiwgZHVyOiAwLjggLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiLjU7MTsuNVwiLCBjYWxjTW9kZTogXCJsaW5lYXJcIiwgcmVwZWF0Q291bnQ6IFwiaW5kZWZpbml0ZVwiIH0pKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgX19hc3NpZ24oeyBjeDogMTA1LCBjeTogMTUsIHI6IDE1IH0sIHsgZmlsbDogZmlsbCwgc3Ryb2tlOiBzdHJva2UsIGZpbGxPcGFjaXR5OiBmaWxsT3BhY2l0eSwgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSB9KSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYW5pbWF0ZVwiLCB7IGF0dHJpYnV0ZU5hbWU6IFwiclwiLCBmcm9tOiAxNSwgdG86IDE1LCBiZWdpbjogXCIwc1wiLCBkdXI6IDAuOCAvIHNwZWVkICsgXCJzXCIsIHZhbHVlczogXCIxNTs5OzE1XCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFuaW1hdGVcIiwgeyBhdHRyaWJ1dGVOYW1lOiBcImZpbGwtb3BhY2l0eVwiLCBmcm9tOiAxLCB0bzogMSwgYmVnaW46IFwiMHNcIiwgZHVyOiAwLjggLyBzcGVlZCArIFwic1wiLCB2YWx1ZXM6IFwiMTsuNTsxXCIsIGNhbGNNb2RlOiBcImxpbmVhclwiLCByZXBlYXRDb3VudDogXCJpbmRlZmluaXRlXCIgfSkpKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUaHJlZURvdHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGhyZWVEb3RzID0gZXhwb3J0cy5UYWlsU3BpbiA9IGV4cG9ydHMuU3Bpbm5pbmdDaXJjbGVzID0gZXhwb3J0cy5SaW5ncyA9IGV4cG9ydHMuUHVmZiA9IGV4cG9ydHMuT3ZhbCA9IGV4cG9ydHMuSGVhcnRzID0gZXhwb3J0cy5HcmlkID0gZXhwb3J0cy5DaXJjbGVzID0gZXhwb3J0cy5CYXJzID0gZXhwb3J0cy5CYWxsVHJpYW5nbGUgPSBleHBvcnRzLkF1ZGlvID0gdm9pZCAwO1xuLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbnZhciBhdWRpb18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYXVkaW9cIikpO1xudmFyIGJhbGxfdHJpYW5nbGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2JhbGwtdHJpYW5nbGVcIikpO1xudmFyIGJhcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2JhcnNcIikpO1xudmFyIGNpcmNsZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2NpcmNsZXNcIikpO1xudmFyIGdyaWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL2dyaWRcIikpO1xudmFyIGhlYXJ0c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvaGVhcnRzXCIpKTtcbnZhciBvdmFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9vdmFsXCIpKTtcbnZhciBwdWZmXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9wdWZmXCIpKTtcbnZhciByaW5nc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvcmluZ3NcIikpO1xudmFyIHNwaW5uaW5nX2NpcmNsZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL3NwaW5uaW5nLWNpcmNsZXNcIikpO1xudmFyIHRhaWxfc3Bpbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvdGFpbC1zcGluXCIpKTtcbnZhciB0aHJlZV9kb3RzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy90aHJlZS1kb3RzXCIpKTtcbmV4cG9ydHMuQXVkaW8gPSBhdWRpb18xLmRlZmF1bHQ7XG5leHBvcnRzLkJhbGxUcmlhbmdsZSA9IGJhbGxfdHJpYW5nbGVfMS5kZWZhdWx0O1xuZXhwb3J0cy5CYXJzID0gYmFyc18xLmRlZmF1bHQ7XG5leHBvcnRzLkNpcmNsZXMgPSBjaXJjbGVzXzEuZGVmYXVsdDtcbmV4cG9ydHMuR3JpZCA9IGdyaWRfMS5kZWZhdWx0O1xuZXhwb3J0cy5IZWFydHMgPSBoZWFydHNfMS5kZWZhdWx0O1xuZXhwb3J0cy5PdmFsID0gb3ZhbF8xLmRlZmF1bHQ7XG5leHBvcnRzLlB1ZmYgPSBwdWZmXzEuZGVmYXVsdDtcbmV4cG9ydHMuUmluZ3MgPSByaW5nc18xLmRlZmF1bHQ7XG5leHBvcnRzLlNwaW5uaW5nQ2lyY2xlcyA9IHNwaW5uaW5nX2NpcmNsZXNfMS5kZWZhdWx0O1xuZXhwb3J0cy5UYWlsU3BpbiA9IHRhaWxfc3Bpbl8xLmRlZmF1bHQ7XG5leHBvcnRzLlRocmVlRG90cyA9IHRocmVlX2RvdHNfMS5kZWZhdWx0O1xudmFyIExvYWRpbmdJY29ucyA9IHtcbiAgICBBdWRpbzogZXhwb3J0cy5BdWRpbyxcbiAgICBCYWxsVHJpYW5nbGU6IGV4cG9ydHMuQmFsbFRyaWFuZ2xlLFxuICAgIEJhcnM6IGV4cG9ydHMuQmFycyxcbiAgICBDaXJjbGVzOiBleHBvcnRzLkNpcmNsZXMsXG4gICAgR3JpZDogZXhwb3J0cy5HcmlkLFxuICAgIEhlYXJ0czogZXhwb3J0cy5IZWFydHMsXG4gICAgT3ZhbDogZXhwb3J0cy5PdmFsLFxuICAgIFB1ZmY6IGV4cG9ydHMuUHVmZixcbiAgICBSaW5nczogZXhwb3J0cy5SaW5ncyxcbiAgICBTcGlubmluZ0NpcmNsZXM6IGV4cG9ydHMuU3Bpbm5pbmdDaXJjbGVzLFxuICAgIFRhaWxTcGluOiBleHBvcnRzLlRhaWxTcGluLFxuICAgIFRocmVlRG90czogZXhwb3J0cy5UaHJlZURvdHMsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9hZGluZ0ljb25zO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4yXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBleHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gdm9pZCAwO1xuY29uc3QgaXNfYmluYXJ5XzEgPSByZXF1aXJlKFwiLi9pcy1iaW5hcnlcIik7XG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIHwgQmxvYiB8IEZpbGUgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0KSB7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgIGNvbnN0IHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgICBjb25zdCBwYWNrID0gcGFja2V0O1xuICAgIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJ1xuICAgIHJldHVybiB7IHBhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVycyB9O1xufVxuZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGRlY29uc3RydWN0UGFja2V0O1xuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChpc19iaW5hcnlfMS5pc0JpbmFyeShkYXRhKSkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IHsgX3BsYWNlaG9sZGVyOiB0cnVlLCBudW06IGJ1ZmZlcnMubGVuZ3RoIH07XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiByZWNvbnN0cnVjdFBhY2tldChwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgICBwYWNrZXQuZGF0YSA9IF9yZWNvbnN0cnVjdFBhY2tldChwYWNrZXQuZGF0YSwgYnVmZmVycyk7XG4gICAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gICAgcmV0dXJuIHBhY2tldDtcbn1cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSByZWNvbnN0cnVjdFBhY2tldDtcbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gICAgaWYgKCFkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLl9wbGFjZWhvbGRlcikge1xuICAgICAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGF0YVtpXSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVjb2RlciA9IGV4cG9ydHMuRW5jb2RlciA9IGV4cG9ydHMuUGFja2V0VHlwZSA9IGV4cG9ydHMucHJvdG9jb2wgPSB2b2lkIDA7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgYmluYXJ5XzEgPSByZXF1aXJlKFwiLi9iaW5hcnlcIik7XG5jb25zdCBpc19iaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2lzLWJpbmFyeVwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMucHJvdG9jb2wgPSA1O1xudmFyIFBhY2tldFR5cGU7XG4oZnVuY3Rpb24gKFBhY2tldFR5cGUpIHtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUXCJdID0gMF0gPSBcIkNPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJESVNDT05ORUNUXCJdID0gMV0gPSBcIkRJU0NPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJFVkVOVFwiXSA9IDJdID0gXCJFVkVOVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkFDS1wiXSA9IDNdID0gXCJBQ0tcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUX0VSUk9SXCJdID0gNF0gPSBcIkNPTk5FQ1RfRVJST1JcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfRVZFTlRcIl0gPSA1XSA9IFwiQklOQVJZX0VWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQklOQVJZX0FDS1wiXSA9IDZdID0gXCJCSU5BUllfQUNLXCI7XG59KShQYWNrZXRUeXBlID0gZXhwb3J0cy5QYWNrZXRUeXBlIHx8IChleHBvcnRzLlBhY2tldFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKi9cbmNsYXNzIEVuY29kZXIge1xuICAgIC8qKlxuICAgICAqIEVuY29kZSBhIHBhY2tldCBhcyBhIHNpbmdsZSBzdHJpbmcgaWYgbm9uLWJpbmFyeSwgb3IgYXMgYVxuICAgICAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIHBhY2tldCBvYmplY3RcbiAgICAgKi9cbiAgICBlbmNvZGUob2JqKSB7XG4gICAgICAgIGRlYnVnKFwiZW5jb2RpbmcgcGFja2V0ICVqXCIsIG9iaik7XG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVCB8fCBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5BQ0spIHtcbiAgICAgICAgICAgIGlmIChpc19iaW5hcnlfMS5oYXNCaW5hcnkob2JqKSkge1xuICAgICAgICAgICAgICAgIG9iai50eXBlID1cbiAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gUGFja2V0VHlwZS5CSU5BUllfRVZFTlRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogUGFja2V0VHlwZS5CSU5BUllfQUNLO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZUFzQmluYXJ5KG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0aGlzLmVuY29kZUFzU3RyaW5nKG9iaildO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAgICAgKi9cbiAgICBlbmNvZGVBc1N0cmluZyhvYmopIHtcbiAgICAgICAgLy8gZmlyc3QgaXMgdHlwZVxuICAgICAgICBsZXQgc3RyID0gXCJcIiArIG9iai50eXBlO1xuICAgICAgICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgICAgICAgaWYgKG9iai50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArIFwiLVwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgICAgICAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gICAgICAgIGlmIChvYmoubnNwICYmIFwiL1wiICE9PSBvYmoubnNwKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLm5zcCArIFwiLFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICAgICAgICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmouaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8ganNvbiBkYXRhXG4gICAgICAgIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgICAgICAgICBzdHIgKz0gSlNPTi5zdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZW5jb2RlZCAlaiBhcyAlc1wiLCBvYmosIHN0cik7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICAgICAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAgICAgKiBhIGxpc3Qgb2YgYnVmZmVycy5cbiAgICAgKi9cbiAgICBlbmNvZGVBc0JpbmFyeShvYmopIHtcbiAgICAgICAgY29uc3QgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnlfMS5kZWNvbnN0cnVjdFBhY2tldChvYmopO1xuICAgICAgICBjb25zdCBwYWNrID0gdGhpcy5lbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgICAgICBjb25zdCBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcbiAgICAgICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgICAgICByZXR1cm4gYnVmZmVyczsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gICAgfVxufVxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2Rlcjtcbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICovXG5jbGFzcyBEZWNvZGVyIGV4dGVuZHMgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYW4gZW5jb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAgICAgKi9cbiAgICBhZGQob2JqKSB7XG4gICAgICAgIGxldCBwYWNrZXQ7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYWNrZXQgPSB0aGlzLmRlY29kZVN0cmluZyhvYmopO1xuICAgICAgICAgICAgaWYgKHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgICAgIHBhY2tldC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgICAgICAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0LmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgICAgICAgICAgIHN1cGVyLmVtaXQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNfYmluYXJ5XzEuaXNCaW5hcnkob2JqKSB8fCBvYmouYmFzZTY0KSB7XG4gICAgICAgICAgICAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiICsgb2JqKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAgICAgKi9cbiAgICBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgLy8gbG9vayB1cCB0eXBlXG4gICAgICAgIGNvbnN0IHAgPSB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChQYWNrZXRUeXBlW3AudHlwZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBwYWNrZXQgdHlwZSBcIiArIHAudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICAgICAgICBpZiAocC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVCB8fFxuICAgICAgICAgICAgcC50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoc3RyLmNoYXJBdCgrK2kpICE9PSBcIi1cIiAmJiBpICE9IHN0ci5sZW5ndGgpIHsgfVxuICAgICAgICAgICAgY29uc3QgYnVmID0gc3RyLnN1YnN0cmluZyhzdGFydCwgaSk7XG4gICAgICAgICAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBhdHRhY2htZW50c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICAgICAgICBpZiAoXCIvXCIgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChcIixcIiA9PT0gYylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5uc3AgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHAubnNwID0gXCIvXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBpZFxuICAgICAgICBjb25zdCBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7XG4gICAgICAgIGlmIChcIlwiICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKCsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5pZCA9IE51bWJlcihzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gICAgICAgIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICAgICAgICAgIGlmIChEZWNvZGVyLmlzUGF5bG9hZFZhbGlkKHAudHlwZSwgcGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXlsb2FkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZGVjb2RlZCAlcyBhcyAlalwiLCBzdHIsIHApO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgc3RhdGljIGlzUGF5bG9hZFZhbGlkKHR5cGUsIHBheWxvYWQpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bG9hZCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXlsb2FkID09PSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJiBwYXlsb2FkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmluYXJ5UmVjb25zdHJ1Y3RvciB7XG4gICAgY29uc3RydWN0b3IocGFja2V0KSB7XG4gICAgICAgIHRoaXMucGFja2V0ID0gcGFja2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAgICAgKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICAgICAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gICAgICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgdGFrZUJpbmFyeURhdGEoYmluRGF0YSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgICAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldCA9IGJpbmFyeV8xLnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gICAgICovXG4gICAgZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQmluYXJ5ID0gZXhwb3J0cy5pc0JpbmFyeSA9IHZvaWQgMDtcbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNWaWV3ID0gKG9iaikgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKVxuICAgICAgICA6IG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICAodHlwZW9mIEZpbGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gXCJbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl1cIik7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBCdWZmZXIsIGFuIEFycmF5QnVmZmVyLCBhIEJsb2Igb3IgYSBGaWxlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICAgIHJldHVybiAoKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKTtcbn1cbmV4cG9ydHMuaXNCaW5hcnkgPSBpc0JpbmFyeTtcbmZ1bmN0aW9uIGhhc0JpbmFyeShvYmosIHRvSlNPTikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNCaW5hcnkob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9iai50b0pTT04gJiZcbiAgICAgICAgdHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaGFzQmluYXJ5ID0gaGFzQmluYXJ5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbyA9IGV4cG9ydHMuU29ja2V0ID0gZXhwb3J0cy5NYW5hZ2VyID0gZXhwb3J0cy5wcm90b2NvbCA9IHZvaWQgMDtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcIi4vdXJsXCIpO1xuY29uc3QgbWFuYWdlcl8xID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudFwiKTtcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cbmNvbnN0IGNhY2hlID0gKGV4cG9ydHMubWFuYWdlcnMgPSB7fSk7XG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBwYXJzZWQgPSAoMCwgdXJsXzEudXJsKSh1cmksIG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIik7XG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgICBjb25zdCBpZCA9IHBhcnNlZC5pZDtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkLnBhdGg7XG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XG4gICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHxcbiAgICAgICAgb3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdIHx8XG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxuICAgICAgICBzYW1lTmFtZXNwYWNlO1xuICAgIGxldCBpbztcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgICAgICBkZWJ1ZyhcImlnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXNcIiwgc291cmNlKTtcbiAgICAgICAgaW8gPSBuZXcgbWFuYWdlcl8xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIm5ldyBpbyBpbnN0YW5jZSBmb3IgJXNcIiwgc291cmNlKTtcbiAgICAgICAgICAgIGNhY2hlW2lkXSA9IG5ldyBtYW5hZ2VyXzEuTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlvID0gY2FjaGVbaWRdO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnlLZXk7XG4gICAgfVxuICAgIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuZXhwb3J0cy5pbyA9IGxvb2t1cDtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBzb2NrZXRfaW9fcGFyc2VyXzEgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInByb3RvY29sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2NrZXRfaW9fcGFyc2VyXzEucHJvdG9jb2w7IH0gfSk7XG4vKipcbiAqIGBjb25uZWN0YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuY29ubmVjdCA9IGxvb2t1cDtcbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbnZhciBtYW5hZ2VyXzIgPSByZXF1aXJlKFwiLi9tYW5hZ2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWFuYWdlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFuYWdlcl8yLk1hbmFnZXI7IH0gfSk7XG52YXIgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb2NrZXRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvY2tldF8xLlNvY2tldDsgfSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGxvb2t1cDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZWlvID0gcmVxdWlyZShcImVuZ2luZS5pby1jbGllbnRcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiZW5naW5lLmlvLWNsaWVudC9saWIvdXRpbFwiKTtcbmNvbnN0IHNvY2tldF8xID0gcmVxdWlyZShcIi4vc29ja2V0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5jb25zdCBvbl8xID0gcmVxdWlyZShcIi4vb25cIik7XG5jb25zdCBCYWNrb2ZmID0gcmVxdWlyZShcImJhY2tvMlwiKTtcbmNvbnN0IHR5cGVkX2V2ZW50c18xID0gcmVxdWlyZShcIi4vdHlwZWQtZXZlbnRzXCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXJcIik7XG5jbGFzcyBNYW5hZ2VyIGV4dGVuZHMgdHlwZWRfZXZlbnRzXzEuU3RyaWN0RXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5zcHMgPSB7fTtcbiAgICAgICAgdGhpcy5zdWJzID0gW107XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICAoMCwgdXRpbF8xLmluc3RhbGxUaW1lckZ1bmN0aW9ucykodGhpcywgb3B0cyk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uICE9PSBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMob3B0cy5yZWNvbm5lY3Rpb25BdHRlbXB0cyB8fCBJbmZpbml0eSk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheSB8fCAxMDAwKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heChvcHRzLnJlY29ubmVjdGlvbkRlbGF5TWF4IHx8IDUwMDApO1xuICAgICAgICB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKF9hID0gb3B0cy5yYW5kb21pemF0aW9uRmFjdG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwLjUpO1xuICAgICAgICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgICAgICAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcbiAgICAgICAgICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgICAgICAgICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICBjb25zdCBfcGFyc2VyID0gb3B0cy5wYXJzZXIgfHwgcGFyc2VyO1xuICAgICAgICB0aGlzLmVuY29kZXIgPSBuZXcgX3BhcnNlci5FbmNvZGVyKCk7XG4gICAgICAgIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcbiAgICAgICAgdGhpcy5fYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbih2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkF0dGVtcHRzKHYpIHtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXkodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWluKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmFuZG9taXphdGlvbkZhY3Rvcih2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO1xuICAgICAgICB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Sml0dGVyKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXlNYXgodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWF4KHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGltZW91dCh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICAgICAgICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICAgICAqIHN0YXJ0ZWQgcmVjb25uZWN0aW5nIHlldFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBtYXliZVJlY29ubmVjdE9uT3BlbigpIHtcbiAgICAgICAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICAgICAgICBpZiAoIXRoaXMuX3JlY29ubmVjdGluZyAmJlxuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uICYmXG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGtlZXBzIHJlY29ubmVjdGlvbiBmcm9tIGZpcmluZyB0d2ljZSBmb3IgdGhlIHNhbWUgcmVjb25uZWN0aW9uIGxvb3BcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIG9wdGlvbmFsLCBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvcGVuKGZuKSB7XG4gICAgICAgIGRlYnVnKFwicmVhZHlTdGF0ZSAlc1wiLCB0aGlzLl9yZWFkeVN0YXRlKTtcbiAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGRlYnVnKFwib3BlbmluZyAlc1wiLCB0aGlzLnVyaSk7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gKDAsIG9uXzEub24pKHNvY2tldCwgXCJvcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25vcGVuKCk7XG4gICAgICAgICAgICBmbiAmJiBmbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZW1pdCBgZXJyb3JgXG4gICAgICAgIGNvbnN0IGVycm9yU3ViID0gKDAsIG9uXzEub24pKHNvY2tldCwgXCJlcnJvclwiLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBkZWJ1ZyhcImVycm9yXCIpO1xuICAgICAgICAgICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgICAgICAgICBzZWxmLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICAgIGZuKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgaXMgbm8gZm4gdG8gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB3aWxsIHRpbWVvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7XG4gICAgICAgICAgICBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7IC8vIHByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2l0aCB0aGUgJ29wZW4nIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgdGltZXJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZFwiLCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICBvcGVuU3ViRGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKFwidGltZW91dFwiKSk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWJEZXN0cm95KTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIG9wZW4oKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbm5lY3QoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbihmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIGRlYnVnKFwib3BlblwiKTtcbiAgICAgICAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIC8vIG1hcmsgYXMgb3BlblxuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwib3BlblwiKTtcbiAgICAgICAgLy8gYWRkIG5ldyBzdWJzXG4gICAgICAgIGNvbnN0IHNvY2tldCA9IHRoaXMuZW5naW5lO1xuICAgICAgICB0aGlzLnN1YnMucHVzaCgoMCwgb25fMS5vbikoc29ja2V0LCBcInBpbmdcIiwgdGhpcy5vbnBpbmcuYmluZCh0aGlzKSksICgwLCBvbl8xLm9uKShzb2NrZXQsIFwiZGF0YVwiLCB0aGlzLm9uZGF0YS5iaW5kKHRoaXMpKSwgKDAsIG9uXzEub24pKHNvY2tldCwgXCJlcnJvclwiLCB0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksICgwLCBvbl8xLm9uKShzb2NrZXQsIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLCAoMCwgb25fMS5vbikodGhpcy5kZWNvZGVyLCBcImRlY29kZWRcIiwgdGhpcy5vbmRlY29kZWQuYmluZCh0aGlzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGluZygpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kZWNvZGVkKHBhY2tldCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGRlYnVnKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U29ja2V0fVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzb2NrZXQobnNwLCBvcHRzKSB7XG4gICAgICAgIGxldCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICAgIHNvY2tldCA9IG5ldyBzb2NrZXRfMS5Tb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICAgICAgICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Rlc3Ryb3koc29ja2V0KSB7XG4gICAgICAgIGNvbnN0IG5zcHMgPSBPYmplY3Qua2V5cyh0aGlzLm5zcHMpO1xuICAgICAgICBmb3IgKGNvbnN0IG5zcCBvZiBuc3BzKSB7XG4gICAgICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJzb2NrZXQgJXMgaXMgc3RpbGwgYWN0aXZlLCBza2lwcGluZyBjbG9zZVwiLCBuc3ApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFja2V0KHBhY2tldCkge1xuICAgICAgICBkZWJ1ZyhcIndyaXRpbmcgcGFja2V0ICVqXCIsIHBhY2tldCk7XG4gICAgICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICBkZWJ1ZyhcImNsZWFudXBcIik7XG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnN1YnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xvc2UoKSB7XG4gICAgICAgIGRlYnVnKFwiZGlzY29ubmVjdFwiKTtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5fcmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgICAgICAgICAgLy8gYW4gb3BlbiBldmVudCBuZXZlciBoYXBwZW5lZFxuICAgICAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUpXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2xvc2UoKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICBkZWJ1ZyhcIm9uY2xvc2VcIik7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY2xvc2VcIiwgcmVhc29uKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGZhaWxlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgICAgICAgICAgZGVidWcoXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcIiwgZGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImF0dGVtcHRpbmcgcmVjb25uZWN0XCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2F0dGVtcHRcIiwgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBhZ2FpbiBmb3IgdGhlIGNhc2Ugc29ja2V0IGNsb3NlZCBpbiBhYm92ZSBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgc2VsZi5vcGVuKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJyZWNvbm5lY3QgYXR0ZW1wdCBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25yZWNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnN0IGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RcIiwgYXR0ZW1wdCk7XG4gICAgfVxufVxuZXhwb3J0cy5NYW5hZ2VyID0gTWFuYWdlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIG9uKG9iaiwgZXYsIGZuKSB7XG4gICAgb2JqLm9uKGV2LCBmbik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgIG9iai5vZmYoZXYsIGZuKTtcbiAgICB9O1xufVxuZXhwb3J0cy5vbiA9IG9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNvY2tldCA9IHZvaWQgMDtcbmNvbnN0IHNvY2tldF9pb19wYXJzZXJfMSA9IHJlcXVpcmUoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO1xuY29uc3Qgb25fMSA9IHJlcXVpcmUoXCIuL29uXCIpO1xuY29uc3QgdHlwZWRfZXZlbnRzXzEgPSByZXF1aXJlKFwiLi90eXBlZC1ldmVudHNcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6c29ja2V0XCIpO1xuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqL1xuY29uc3QgUkVTRVJWRURfRVZFTlRTID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgY29ubmVjdDogMSxcbiAgICBjb25uZWN0X2Vycm9yOiAxLFxuICAgIGRpc2Nvbm5lY3Q6IDEsXG4gICAgZGlzY29ubmVjdGluZzogMSxcbiAgICAvLyBFdmVudEVtaXR0ZXIgcmVzZXJ2ZWQgZXZlbnRzOiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c19ldmVudF9uZXdsaXN0ZW5lclxuICAgIG5ld0xpc3RlbmVyOiAxLFxuICAgIHJlbW92ZUxpc3RlbmVyOiAxLFxufSk7XG5jbGFzcyBTb2NrZXQgZXh0ZW5kcyB0eXBlZF9ldmVudHNfMS5TdHJpY3RFdmVudEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlvLCBuc3AsIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xuICAgICAgICB0aGlzLm5zcCA9IG5zcDtcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5hdXRoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGggPSBvcHRzLmF1dGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgKDAsIG9uXzEub24pKGlvLCBcIm9wZW5cIiwgdGhpcy5vbm9wZW4uYmluZCh0aGlzKSksXG4gICAgICAgICAgICAoMCwgb25fMS5vbikoaW8sIFwicGFja2V0XCIsIHRoaXMub25wYWNrZXQuYmluZCh0aGlzKSksXG4gICAgICAgICAgICAoMCwgb25fMS5vbikoaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgKDAsIG9uXzEub24pKGlvLCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgU29ja2V0IHdpbGwgdHJ5IHRvIHJlY29ubmVjdCB3aGVuIGl0cyBNYW5hZ2VyIGNvbm5lY3RzIG9yIHJlY29ubmVjdHNcbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN1YnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFwiT3BlbnNcIiB0aGUgc29ja2V0LlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB0aGlzLnN1YkV2ZW50cygpO1xuICAgICAgICBpZiAoIXRoaXMuaW9bXCJfcmVjb25uZWN0aW5nXCJdKVxuICAgICAgICAgICAgdGhpcy5pby5vcGVuKCk7IC8vIGVuc3VyZSBvcGVuXG4gICAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5pby5fcmVhZHlTdGF0ZSlcbiAgICAgICAgICAgIHRoaXMub25vcGVuKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY29ubmVjdCgpXG4gICAgICovXG4gICAgb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIGBtZXNzYWdlYCBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzZW5kKC4uLmFyZ3MpIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KFwibWVzc2FnZVwiKTtcbiAgICAgICAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgYGVtaXRgLlxuICAgICAqIElmIHRoZSBldmVudCBpcyBpbiBgZXZlbnRzYCwgaXQncyBlbWl0dGVkIG5vcm1hbGx5LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGVtaXQoZXYsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKFJFU0VSVkVEX0VWRU5UUy5oYXNPd25Qcm9wZXJ0eShldikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgZXYgKyAnXCIgaXMgYSByZXNlcnZlZCBldmVudCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy51bnNoaWZ0KGV2KTtcbiAgICAgICAgY29uc3QgcGFja2V0ID0ge1xuICAgICAgICAgICAgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRVZFTlQsXG4gICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICB9O1xuICAgICAgICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICAgICAgICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9IHRoaXMuZmxhZ3MuY29tcHJlc3MgIT09IGZhbHNlO1xuICAgICAgICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgZGVidWcoXCJlbWl0dGluZyBwYWNrZXQgd2l0aCBhY2sgaWQgJWRcIiwgdGhpcy5pZHMpO1xuICAgICAgICAgICAgdGhpcy5hY2tzW3RoaXMuaWRzXSA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICBwYWNrZXQuaWQgPSB0aGlzLmlkcysrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzVHJhbnNwb3J0V3JpdGFibGUgPSB0aGlzLmlvLmVuZ2luZSAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0ICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQud3JpdGFibGU7XG4gICAgICAgIGNvbnN0IGRpc2NhcmRQYWNrZXQgPSB0aGlzLmZsYWdzLnZvbGF0aWxlICYmICghaXNUcmFuc3BvcnRXcml0YWJsZSB8fCAhdGhpcy5jb25uZWN0ZWQpO1xuICAgICAgICBpZiAoZGlzY2FyZFBhY2tldCkge1xuICAgICAgICAgICAgZGVidWcoXCJkaXNjYXJkIHBhY2tldCBhcyB0aGUgdHJhbnNwb3J0IGlzIG5vdCBjdXJyZW50bHkgd3JpdGFibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcGFja2V0KHBhY2tldCkge1xuICAgICAgICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gICAgICAgIHRoaXMuaW8uX3BhY2tldChwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIGRlYnVnKFwidHJhbnNwb3J0IGlzIG9wZW4gLSBjb25uZWN0aW5nXCIpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYXV0aCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVCwgZGF0YSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNULCBkYXRhOiB0aGlzLmF1dGggfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIG9yIG1hbmFnZXIgYGVycm9yYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlcnJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYXNvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25jbG9zZShyZWFzb24pIHtcbiAgICAgICAgZGVidWcoXCJjbG9zZSAoJXMpXCIsIHJlYXNvbik7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaWQ7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZGlzY29ubmVjdFwiLCByZWFzb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBzb2NrZXQgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBwYWNrZXQubnNwID09PSB0aGlzLm5zcDtcbiAgICAgICAgaWYgKCFzYW1lTmFtZXNwYWNlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICYmIHBhY2tldC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhY2tldC5kYXRhLnNpZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNvbm5lY3QoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIG5ldyBFcnJvcihcIkl0IHNlZW1zIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWNoIGEgU29ja2V0LklPIHNlcnZlciBpbiB2Mi54IHdpdGggYSB2My54IGNsaWVudCwgYnV0IHRoZXkgYXJlIG5vdCBjb21wYXRpYmxlIChtb3JlIGluZm9ybWF0aW9uIGhlcmU6IGh0dHBzOi8vc29ja2V0LmlvL2RvY3MvdjMvbWlncmF0aW5nLWZyb20tMi14LXRvLTMtMC8pXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5CSU5BUllfRVZFTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkFDSzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgIHRoaXMub25kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKHBhY2tldC5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBlcnIuZGF0YSA9IHBhY2tldC5kYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmV2ZW50KHBhY2tldCkge1xuICAgICAgICBjb25zdCBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gICAgICAgIGRlYnVnKFwiZW1pdHRpbmcgZXZlbnQgJWpcIiwgYXJncyk7XG4gICAgICAgIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgICAgICAgICAgZGVidWcoXCJhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50XCIpO1xuICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChPYmplY3QuZnJlZXplKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbWl0RXZlbnQoYXJncykge1xuICAgICAgICBpZiAodGhpcy5fYW55TGlzdGVuZXJzICYmIHRoaXMuX2FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlci5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhY2soaWQpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBzZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgICAgICAgICBpZiAoc2VudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlYnVnKFwic2VuZGluZyBhY2sgJWpcIiwgYXJncyk7XG4gICAgICAgICAgICBzZWxmLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQUNLLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGFja25vd2xlZ2VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25hY2socGFja2V0KSB7XG4gICAgICAgIGNvbnN0IGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWNrKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcImNhbGxpbmcgYWNrICVzIHdpdGggJWpcIiwgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYWNrc1twYWNrZXQuaWRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVidWcoXCJiYWQgYWNrICVzXCIsIHBhY2tldC5pZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY29ubmVjdChpZCkge1xuICAgICAgICBkZWJ1ZyhcInNvY2tldCBjb25uZWN0ZWQgd2l0aCBpZCAlc1wiLCBpZCk7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGVtaXRCdWZmZXJlZCgpIHtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLmZvckVhY2goKGFyZ3MpID0+IHRoaXMuZW1pdEV2ZW50KGFyZ3MpKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKChwYWNrZXQpID0+IHRoaXMucGFja2V0KHBhY2tldCkpO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGlzY29ubmVjdCgpIHtcbiAgICAgICAgZGVidWcoXCJzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpXCIsIHRoaXMubnNwKTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMub25jbG9zZShcImlvIHNlcnZlciBkaXNjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICAgICAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gICAgICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpIHtcbiAgICAgICAgICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pb1tcIl9kZXN0cm95XCJdKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgZGVidWcoXCJwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7XG4gICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkRJU0NPTk5FQ1QgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgLy8gZmlyZSBldmVudHNcbiAgICAgICAgICAgIHRoaXMub25jbG9zZShcImlvIGNsaWVudCBkaXNjb25uZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgZGlzY29ubmVjdCgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wcmVzcyAtIGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbXByZXNzKGNvbXByZXNzKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGV2ZW50IG1lc3NhZ2Ugd2lsbCBiZSBkcm9wcGVkIHdoZW4gdGhpcyBzb2NrZXQgaXMgbm90XG4gICAgICogcmVhZHkgdG8gc2VuZCBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IHZvbGF0aWxlKCkge1xuICAgICAgICB0aGlzLmZsYWdzLnZvbGF0aWxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvbkFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay4gVGhlIGxpc3RlbmVyIGlzIGFkZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3RlbmVycyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwcmVwZW5kQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb2ZmQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5fYW55TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRoYXQgYXJlIGxpc3RlbmluZyBmb3IgYW55IGV2ZW50IHRoYXQgaXMgc3BlY2lmaWVkLiBUaGlzIGFycmF5IGNhbiBiZSBtYW5pcHVsYXRlZCxcbiAgICAgKiBlLmcuIHRvIHJlbW92ZSBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlzdGVuZXJzQW55KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuU29ja2V0ID0gU29ja2V0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmljdEV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG4vKipcbiAqIFN0cmljdGx5IHR5cGVkIHZlcnNpb24gb2YgYW4gYEV2ZW50RW1pdHRlcmAuIEEgYFR5cGVkRXZlbnRFbWl0dGVyYCB0YWtlcyB0eXBlXG4gKiBwYXJhbWV0ZXJzIGZvciBtYXBwaW5ncyBvZiBldmVudCBuYW1lcyB0byBldmVudCBkYXRhIHR5cGVzLCBhbmQgc3RyaWN0bHlcbiAqIHR5cGVzIG1ldGhvZCBjYWxscyB0byB0aGUgYEV2ZW50RW1pdHRlcmAgYWNjb3JkaW5nIHRvIHRoZXNlIGV2ZW50IG1hcHMuXG4gKlxuICogQHR5cGVQYXJhbSBMaXN0ZW5FdmVudHMgLSBgRXZlbnRzTWFwYCBvZiB1c2VyLWRlZmluZWQgZXZlbnRzIHRoYXQgY2FuIGJlXG4gKiBsaXN0ZW5lZCB0byB3aXRoIGBvbmAgb3IgYG9uY2VgXG4gKiBAdHlwZVBhcmFtIEVtaXRFdmVudHMgLSBgRXZlbnRzTWFwYCBvZiB1c2VyLWRlZmluZWQgZXZlbnRzIHRoYXQgY2FuIGJlXG4gKiBlbWl0dGVkIHdpdGggYGVtaXRgXG4gKiBAdHlwZVBhcmFtIFJlc2VydmVkRXZlbnRzIC0gYEV2ZW50c01hcGAgb2YgcmVzZXJ2ZWQgZXZlbnRzLCB0aGF0IGNhbiBiZVxuICogZW1pdHRlZCBieSBzb2NrZXQuaW8gd2l0aCBgZW1pdFJlc2VydmVkYCwgYW5kIGNhbiBiZSBsaXN0ZW5lZCB0byB3aXRoXG4gKiBgbGlzdGVuYC5cbiAqL1xuY2xhc3MgU3RyaWN0RXZlbnRFbWl0dGVyIGV4dGVuZHMgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgYGxpc3RlbmVyYCBmdW5jdGlvbiBhcyBhbiBldmVudCBsaXN0ZW5lciBmb3IgYGV2YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldiBOYW1lIG9mIHRoZSBldmVudFxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIG9uKGV2LCBsaXN0ZW5lcikge1xuICAgICAgICBzdXBlci5vbihldiwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG9uZS10aW1lIGBsaXN0ZW5lcmAgZnVuY3Rpb24gYXMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGBldmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgTmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbmNlKGV2LCBsaXN0ZW5lcikge1xuICAgICAgICBzdXBlci5vbmNlKGV2LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldiBOYW1lIG9mIHRoZSBldmVudFxuICAgICAqIEBwYXJhbSBhcmdzIFZhbHVlcyB0byBzZW5kIHRvIGxpc3RlbmVycyBvZiB0aGlzIGV2ZW50XG4gICAgICovXG4gICAgZW1pdChldiwgLi4uYXJncykge1xuICAgICAgICBzdXBlci5lbWl0KGV2LCAuLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXRzIGEgcmVzZXJ2ZWQgZXZlbnQuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBgcHJvdGVjdGVkYCwgc28gdGhhdCBvbmx5IGEgY2xhc3MgZXh0ZW5kaW5nXG4gICAgICogYFN0cmljdEV2ZW50RW1pdHRlcmAgY2FuIGVtaXQgaXRzIG93biByZXNlcnZlZCBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgUmVzZXJ2ZWQgZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byBlbWl0IGFsb25nIHdpdGggdGhlIGV2ZW50XG4gICAgICovXG4gICAgZW1pdFJlc2VydmVkKGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIHN1cGVyLmVtaXQoZXYsIC4uLmFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCBFdmVudCBuYW1lXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgbGlzdGVuZXJzIHN1YnNjcmliZWQgdG8gYGV2ZW50YFxuICAgICAqL1xuICAgIGxpc3RlbmVycyhldmVudCkge1xuICAgICAgICByZXR1cm4gc3VwZXIubGlzdGVuZXJzKGV2ZW50KTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmljdEV2ZW50RW1pdHRlciA9IFN0cmljdEV2ZW50RW1pdHRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cmwgPSB2b2lkIDA7XG5jb25zdCBwYXJzZXVyaSA9IHJlcXVpcmUoXCJwYXJzZXVyaVwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudDp1cmxcIik7XG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHVyaSAtIHVybFxuICogQHBhcmFtIHBhdGggLSB0aGUgcmVxdWVzdCBwYXRoIG9mIHRoZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gbG9jIC0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVybCh1cmksIHBhdGggPSBcIlwiLCBsb2MpIHtcbiAgICBsZXQgb2JqID0gdXJpO1xuICAgIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gICAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24pO1xuICAgIGlmIChudWxsID09IHVyaSlcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgICAgICAgZGVidWcoXCJwcm90b2NvbC1sZXNzIHVybCAlc1wiLCB1cmkpO1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBcImh0dHBzOi8vXCIgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGFyc2VcbiAgICAgICAgZGVidWcoXCJwYXJzZSAlc1wiLCB1cmkpO1xuICAgICAgICBvYmogPSBwYXJzZXVyaSh1cmkpO1xuICAgIH1cbiAgICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgICBpZiAoIW9iai5wb3J0KSB7XG4gICAgICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjgwXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiNDQzXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCBcIi9cIjtcbiAgICBjb25zdCBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgIGNvbnN0IGhvc3QgPSBpcHY2ID8gXCJbXCIgKyBvYmouaG9zdCArIFwiXVwiIDogb2JqLmhvc3Q7XG4gICAgLy8gZGVmaW5lIHVuaXF1ZSBpZFxuICAgIG9iai5pZCA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgXCI6XCIgKyBvYmoucG9ydCArIHBhdGg7XG4gICAgLy8gZGVmaW5lIGhyZWZcbiAgICBvYmouaHJlZiA9XG4gICAgICAgIG9iai5wcm90b2NvbCArXG4gICAgICAgICAgICBcIjovL1wiICtcbiAgICAgICAgICAgIGhvc3QgK1xuICAgICAgICAgICAgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyBcIlwiIDogXCI6XCIgKyBvYmoucG9ydCk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydHMudXJsID0gdXJsO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgdmFyIHVuc3Vic2NyaWJlO1xuICB2YXIgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWI6IGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzOiBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXI6IGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkOiBpc1N1YnNjcmliZWQsXG4gICAgdHJ5U3Vic2NyaWJlOiB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlLFxuICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCBiaW5kQWN0aW9uQ3JlYXRvcnMgZnJvbSAnLi4vdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgX2xvb3Aoa2V5KTtcbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl07XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIF9leGNsdWRlZCk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBfZXhjbHVkZWQpO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXHJcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29udGV4dFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPSAvKiNfX1BVUkVfXyovY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPSAvKiNfX1BVUkVfXyovY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBzdG9yZVN0YXRlICE9PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpOyAvLyBlbnN1cmUgbGF0ZXN0IHNlbGVjdGVkIHN0YXRlIGlzIHJldXNlZCBzbyB0aGF0IGEgY3VzdG9tIGVxdWFsaXR5IGZ1bmN0aW9uIGNhbiByZXN1bHQgaW4gaWRlbnRpY2FsIHJlZmVyZW5jZXNcblxuICAgICAgaWYgKGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9PT0gdW5kZWZpbmVkIHx8ICFlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTsgLy8gQXZvaWQgY2FsbGluZyBzZWxlY3RvciBtdWx0aXBsZSB0aW1lcyBpZiB0aGUgc3RvcmUncyBzdGF0ZSBoYXMgbm90IGNoYW5nZWRcblxuICAgICAgICBpZiAobmV3U3RvcmVTdGF0ZSA9PT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9uZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChuZXdTdG9yZVN0YXRlKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihfbmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IF9uZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBuZXdTdG9yZVN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJleHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJzsgLy8gRW5hYmxlIGJhdGNoZWQgdXBkYXRlcyBpbiBvdXIgc3Vic2NyaXB0aW9ucyBmb3IgdXNlXG4vLyB3aXRoIHN0YW5kYXJkIFJlYWN0IHJlbmRlcmVycyAoUmVhY3RET00sIFJlYWN0IE5hdGl2ZSlcblxuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgYmF0Y2ggfTsiLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG52YXIgY29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3Rlbikge1xuICAgICAgdGhpcy51bmxpc3RlbigpO1xuICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIGlzRHVwbGljYXRlTmF2aWdhdGlvbiA9IGNyZWF0ZVBhdGgoY29udGV4dC5sb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgobm9ybWFsaXplVG9Mb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSB8fCBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc05hbWVQcm9wKGlzQWN0aXZlKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKGlzQWN0aXZlKSA6IHN0eWxlUHJvcDtcblxuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgY2xhc3NOYW1lID0gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIiwgXCJmYWxzZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnR7dHlwZU9mIGFzIGUsaXNFbGVtZW50IGFzIHQsaXNWYWxpZEVsZW1lbnRUeXBlIGFzIG59ZnJvbVwicmVhY3QtaXNcIjtpbXBvcnQgcix7dXNlU3RhdGUgYXMgbyx1c2VDb250ZXh0IGFzIHMsdXNlTWVtbyBhcyBpLHVzZUVmZmVjdCBhcyBhLHVzZVJlZiBhcyBjLGNyZWF0ZUVsZW1lbnQgYXMgdSx1c2VEZWJ1Z1ZhbHVlIGFzIGwsdXNlTGF5b3V0RWZmZWN0IGFzIGR9ZnJvbVwicmVhY3RcIjtpbXBvcnQgaCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgZiBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBtIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgeSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHYoKXtyZXR1cm4odj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBnPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxTPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LHc9T2JqZWN0LmZyZWV6ZShbXSksRT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiYocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFJ8fHByb2Nlc3MuZW52LlNDX0FUVFIpfHxcImRhdGEtc3R5bGVkXCIsQz1cIjUuMy4xXCIsST1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcIkhUTUxFbGVtZW50XCJpbiB3aW5kb3csUD1Cb29sZWFuKFwiYm9vbGVhblwiPT10eXBlb2YgU0NfRElTQUJMRV9TUEVFRFk/U0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViksTz17fSxSPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ezE6XCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsMjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLDM6XCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIiw0OlwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIiw1OlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIiw2OlwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIiw3OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXCJ0aGVtZVwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcbicsODonVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcInRoZW1lXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuJyw5OlwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLDEwOlwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIiwxMTpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsMTI6XCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIiwxMzpcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cXG5cIiwxNDonVGhlbWVQcm92aWRlcjogXCJ0aGVtZVwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuJywxNTpcIkEgc3R5bGlzIHBsdWdpbiBoYXMgYmVlbiBzdXBwbGllZCB0aGF0IGlzIG5vdCBuYW1lZC4gV2UgbmVlZCBhIG5hbWUgZm9yIGVhY2ggcGx1Z2luIHRvIGJlIGFibGUgdG8gcHJldmVudCBzdHlsaW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBkaWZmZXJlbnQgc3R5bGlzIGNvbmZpZ3VyYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBhcHAuIEJlZm9yZSB5b3UgcGFzcyB5b3VyIHBsdWdpbiB0byBgPFN0eWxlU2hlZXRNYW5hZ2VyIHN0eWxpc1BsdWdpbnM9e1tdfT5gLCBwbGVhc2UgbWFrZSBzdXJlIGVhY2ggcGx1Z2luIGlzIHVuaXF1ZWx5LW5hbWVkLCBlLmcuXFxuXFxuYGBganNcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1wb3J0ZWRQbHVnaW4sICduYW1lJywgeyB2YWx1ZTogJ3NvbWUtdW5pcXVlLW5hbWUnIH0pO1xcbmBgYFxcblxcblwiLDE2OlwiUmVhY2hlZCB0aGUgbGltaXQgb2YgaG93IG1hbnkgc3R5bGVkIGNvbXBvbmVudHMgbWF5IGJlIGNyZWF0ZWQgYXQgZ3JvdXAgJXMuXFxuWW91IG1heSBvbmx5IGNyZWF0ZSB1cCB0byAxLDA3Myw3NDEsODI0IGNvbXBvbmVudHMuIElmIHlvdSdyZSBjcmVhdGluZyBjb21wb25lbnRzIGR5bmFtaWNhbGx5LFxcbmFzIGZvciBpbnN0YW5jZSBpbiB5b3VyIHJlbmRlciBtZXRob2QgdGhlbiB5b3UgbWF5IGJlIHJ1bm5pbmcgaW50byB0aGlzIGxpbWl0YXRpb24uXFxuXFxuXCIsMTc6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9Ont9O2Z1bmN0aW9uIEQoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLHQ9W10sbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bis9MSl0LnB1c2gobjwwfHxhcmd1bWVudHMubGVuZ3RoPD1uP3ZvaWQgMDphcmd1bWVudHNbbl0pO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2U9ZS5yZXBsYWNlKC8lW2Etel0vLHQpfSkpLGV9ZnVuY3Rpb24gaihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dGhyb3dcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WP25ldyBFcnJvcihcIkFuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXQuaW8vSlVJYUUjXCIrZStcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIisobi5sZW5ndGg+MD9cIiBBcmdzOiBcIituLmpvaW4oXCIsIFwiKTpcIlwiKSk6bmV3IEVycm9yKEQuYXBwbHkodm9pZCAwLFtSW2VdXS5jb25jYXQobikpLnRyaW0oKSl9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkoNTEyKSx0aGlzLmxlbmd0aD01MTIsdGhpcy50YWc9ZX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbmRleE9mR3JvdXA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj0wO248ZTtuKyspdCs9dGhpcy5ncm91cFNpemVzW25dO3JldHVybiB0fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxyPW4ubGVuZ3RoLG89cjtlPj1vOykobzw8PTEpPDAmJmooMTYsXCJcIitlKTt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KG8pLHRoaXMuZ3JvdXBTaXplcy5zZXQobiksdGhpcy5sZW5ndGg9bztmb3IodmFyIHM9cjtzPG87cysrKXRoaXMuZ3JvdXBTaXplc1tzXT0wfWZvcih2YXIgaT10aGlzLmluZGV4T2ZHcm91cChlKzEpLGE9MCxjPXQubGVuZ3RoO2E8YzthKyspdGhpcy50YWcuaW5zZXJ0UnVsZShpLHRbYV0pJiYodGhpcy5ncm91cFNpemVzW2VdKyssaSsrKX0sdC5jbGVhckdyb3VwPWZ1bmN0aW9uKGUpe2lmKGU8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXMuZ3JvdXBTaXplc1tlXSxuPXRoaXMuaW5kZXhPZkdyb3VwKGUpLHI9bit0O3RoaXMuZ3JvdXBTaXplc1tlXT0wO2Zvcih2YXIgbz1uO288cjtvKyspdGhpcy50YWcuZGVsZXRlUnVsZShuKX19LHQuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLHI9dGhpcy5pbmRleE9mR3JvdXAoZSksbz1yK24scz1yO3M8bztzKyspdCs9dGhpcy50YWcuZ2V0UnVsZShzKStcIi8qIXNjKi9cXG5cIjtyZXR1cm4gdH0sZX0oKSxrPW5ldyBNYXAseD1uZXcgTWFwLFY9MSxCPWZ1bmN0aW9uKGUpe2lmKGsuaGFzKGUpKXJldHVybiBrLmdldChlKTtmb3IoO3guaGFzKFYpOylWKys7dmFyIHQ9VisrO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigoMHx0KTwwfHx0PjE8PDMwKSYmaigxNixcIlwiK3QpLGsuc2V0KGUsdCkseC5zZXQodCxlKSx0fSxNPWZ1bmN0aW9uKGUpe3JldHVybiB4LmdldChlKX0sej1mdW5jdGlvbihlLHQpe3Q+PVYmJihWPXQrMSksay5zZXQoZSx0KSx4LnNldCh0LGUpfSxMPVwic3R5bGVbXCIrQSsnXVtkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjFcIl0nLEc9bmV3IFJlZ0V4cChcIl5cIitBKydcXFxcLmcoXFxcXGQrKVxcXFxbaWQ9XCIoW1xcXFx3XFxcXGQtXSspXCJcXFxcXS4qP1wiKFteXCJdKiknKSxGPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHIsbz1uLnNwbGl0KFwiLFwiKSxzPTAsaT1vLmxlbmd0aDtzPGk7cysrKShyPW9bc10pJiZlLnJlZ2lzdGVyTmFtZSh0LHIpfSxZPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSh0LmlubmVySFRNTHx8XCJcIikuc3BsaXQoXCIvKiFzYyovXFxuXCIpLHI9W10sbz0wLHM9bi5sZW5ndGg7bzxzO28rKyl7dmFyIGk9bltvXS50cmltKCk7aWYoaSl7dmFyIGE9aS5tYXRjaChHKTtpZihhKXt2YXIgYz0wfHBhcnNlSW50KGFbMV0sMTApLHU9YVsyXTswIT09YyYmKHoodSxjKSxGKGUsdSxhWzNdKSxlLmdldFRhZygpLmluc2VydFJ1bGVzKGMscikpLHIubGVuZ3RoPTB9ZWxzZSByLnB1c2goaSl9fX0scT1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJnZvaWQgMCE9PXdpbmRvdy5fX3dlYnBhY2tfbm9uY2VfXz93aW5kb3cuX193ZWJwYWNrX25vbmNlX186bnVsbH0sSD1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oZWFkLG49ZXx8dCxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoaWxkTm9kZXMsbj10Lmxlbmd0aDtuPj0wO24tLSl7dmFyIHI9dFtuXTtpZihyJiYxPT09ci5ub2RlVHlwZSYmci5oYXNBdHRyaWJ1dGUoQSkpcmV0dXJuIHJ9fShuKSxzPXZvaWQgMCE9PW8/by5uZXh0U2libGluZzpudWxsO3Iuc2V0QXR0cmlidXRlKEEsXCJhY3RpdmVcIiksci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI1LjMuMVwiKTt2YXIgaT1xKCk7cmV0dXJuIGkmJnIuc2V0QXR0cmlidXRlKFwibm9uY2VcIixpKSxuLmluc2VydEJlZm9yZShyLHMpLHJ9LCQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpLHRoaXMuc2hlZXQ9ZnVuY3Rpb24oZSl7aWYoZS5zaGVldClyZXR1cm4gZS5zaGVldDtmb3IodmFyIHQ9ZG9jdW1lbnQuc3R5bGVTaGVldHMsbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtpZihvLm93bmVyTm9kZT09PWUpcmV0dXJuIG99aigxNyl9KHQpLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gdGhpcy5zaGVldC5pbnNlcnRSdWxlKHQsZSksdGhpcy5sZW5ndGgrKywhMH1jYXRjaChlKXtyZXR1cm4hMX19LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnNoZWV0LmRlbGV0ZVJ1bGUoZSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc2hlZXQuY3NzUnVsZXNbZV07cmV0dXJuIHZvaWQgMCE9PXQmJlwic3RyaW5nXCI9PXR5cGVvZiB0LmNzc1RleHQ/dC5jc3NUZXh0OlwiXCJ9LGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dGhpcy5ub2Rlcz10LmNoaWxkTm9kZXMsdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7aWYoZTw9dGhpcy5sZW5ndGgmJmU+PTApe3ZhciBuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpLHI9dGhpcy5ub2Rlc1tlXTtyZXR1cm4gdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShuLHJ8fG51bGwpLHRoaXMubGVuZ3RoKyssITB9cmV0dXJuITF9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ub2Rlc1tlXSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMubm9kZXNbZV0udGV4dENvbnRlbnQ6XCJcIn0sZX0oKSxVPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLnJ1bGVzPVtdLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3JldHVybiBlPD10aGlzLmxlbmd0aCYmKHRoaXMucnVsZXMuc3BsaWNlKGUsMCx0KSx0aGlzLmxlbmd0aCsrLCEwKX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMucnVsZXMuc3BsaWNlKGUsMSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMucnVsZXNbZV06XCJcIn0sZX0oKSxKPUksWD17aXNTZXJ2ZXI6IUksdXNlQ1NTT01JbmplY3Rpb246IVB9LFo9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1FKSx2b2lkIDA9PT10JiYodD17fSksdGhpcy5vcHRpb25zPXYoe30sWCx7fSxlKSx0aGlzLmdzPXQsdGhpcy5uYW1lcz1uZXcgTWFwKG4pLHRoaXMuc2VydmVyPSEhZS5pc1NlcnZlciwhdGhpcy5zZXJ2ZXImJkkmJkomJihKPSExLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKEwpLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07byYmXCJhY3RpdmVcIiE9PW8uZ2V0QXR0cmlidXRlKEEpJiYoWShlLG8pLG8ucGFyZW50Tm9kZSYmby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pKX19KHRoaXMpKX1lLnJlZ2lzdGVySWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIEIoZSl9O3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnJlY29uc3RydWN0V2l0aE9wdGlvbnM9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITApLG5ldyBlKHYoe30sdGhpcy5vcHRpb25zLHt9LHQpLHRoaXMuZ3MsbiYmdGhpcy5uYW1lc3x8dm9pZCAwKX0sdC5hbGxvY2F0ZUdTSW5zdGFuY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ3NbZV09KHRoaXMuZ3NbZV18fDApKzF9LHQuZ2V0VGFnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFnfHwodGhpcy50YWc9KG49KHQ9dGhpcy5vcHRpb25zKS5pc1NlcnZlcixyPXQudXNlQ1NTT01JbmplY3Rpb24sbz10LnRhcmdldCxlPW4/bmV3IFUobyk6cj9uZXcgJChvKTpuZXcgVyhvKSxuZXcgVChlKSkpO3ZhciBlLHQsbixyLG99LHQuaGFzTmFtZUZvcklkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5oYXModCl9LHQucmVnaXN0ZXJOYW1lPWZ1bmN0aW9uKGUsdCl7aWYoQihlKSx0aGlzLm5hbWVzLmhhcyhlKSl0aGlzLm5hbWVzLmdldChlKS5hZGQodCk7ZWxzZXt2YXIgbj1uZXcgU2V0O24uYWRkKHQpLHRoaXMubmFtZXMuc2V0KGUsbil9fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnJlZ2lzdGVyTmFtZShlLHQpLHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoQihlKSxuKX0sdC5jbGVhck5hbWVzPWZ1bmN0aW9uKGUpe3RoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5jbGVhcigpfSx0LmNsZWFyUnVsZXM9ZnVuY3Rpb24oZSl7dGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKEIoZSkpLHRoaXMuY2xlYXJOYW1lcyhlKX0sdC5jbGVhclRhZz1mdW5jdGlvbigpe3RoaXMudGFnPXZvaWQgMH0sdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5nZXRUYWcoKSxuPXQubGVuZ3RoLHI9XCJcIixvPTA7bzxuO28rKyl7dmFyIHM9TShvKTtpZih2b2lkIDAhPT1zKXt2YXIgaT1lLm5hbWVzLmdldChzKSxhPXQuZ2V0R3JvdXAobyk7aWYoaSYmYSYmaS5zaXplKXt2YXIgYz1BK1wiLmdcIitvKydbaWQ9XCInK3MrJ1wiXScsdT1cIlwiO3ZvaWQgMCE9PWkmJmkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5sZW5ndGg+MCYmKHUrPWUrXCIsXCIpfSkpLHIrPVwiXCIrYStjKyd7Y29udGVudDpcIicrdSsnXCJ9Lyohc2MqL1xcbid9fX1yZXR1cm4gcn0odGhpcyl9LGV9KCksSz0vKGEpKGQpL2dpLFE9ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZSsoZT4yNT8zOTo5NykpfTtmdW5jdGlvbiBlZShlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPVEodCU1MikrbjtyZXR1cm4oUSh0JTUyKStuKS5yZXBsYWNlKEssXCIkMS0kMlwiKX12YXIgdGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSxuZT1mdW5jdGlvbihlKXtyZXR1cm4gdGUoNTM4MSxlKX07ZnVuY3Rpb24gcmUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKGIobikmJiFOKG4pKXJldHVybiExfXJldHVybiEwfXZhciBvZT1uZShcIjUuMy4xXCIpLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dGhpcy5ydWxlcz1lLHRoaXMuc3RhdGljUnVsZXNJZD1cIlwiLHRoaXMuaXNTdGF0aWM9XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZvaWQgMD09PW58fG4uaXNTdGF0aWMpJiZyZShlKSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5iYXNlSGFzaD10ZShvZSx0KSx0aGlzLmJhc2VTdHlsZT1uLFoucmVnaXN0ZXJJZCh0KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuY29tcG9uZW50SWQsbz1bXTtpZih0aGlzLmJhc2VTdHlsZSYmby5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGUsdCxuKSksdGhpcy5pc1N0YXRpYyYmIW4uaGFzaClpZih0aGlzLnN0YXRpY1J1bGVzSWQmJnQuaGFzTmFtZUZvcklkKHIsdGhpcy5zdGF0aWNSdWxlc0lkKSlvLnB1c2godGhpcy5zdGF0aWNSdWxlc0lkKTtlbHNle3ZhciBzPU5lKHRoaXMucnVsZXMsZSx0LG4pLmpvaW4oXCJcIiksaT1lZSh0ZSh0aGlzLmJhc2VIYXNoLHMpPj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsaSkpe3ZhciBhPW4ocyxcIi5cIitpLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsaSxhKX1vLnB1c2goaSksdGhpcy5zdGF0aWNSdWxlc0lkPWl9ZWxzZXtmb3IodmFyIGM9dGhpcy5ydWxlcy5sZW5ndGgsdT10ZSh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9dGUodSxoK2QpKTtlbHNlIGlmKGgpe3ZhciBwPU5lKGgsZSx0LG4pLGY9QXJyYXkuaXNBcnJheShwKT9wLmpvaW4oXCJcIik6cDt1PXRlKHUsZitkKSxsKz1mfX1pZihsKXt2YXIgbT1lZSh1Pj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsbSkpe3ZhciB5PW4obCxcIi5cIittLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsbSx5KX1vLnB1c2gobSl9fXJldHVybiBvLmpvaW4oXCIgXCIpfSxlfSgpLGllPS9eXFxzKlxcL1xcLy4qJC9nbSxhZT1bXCI6XCIsXCJbXCIsXCIuXCIsXCIjXCJdO2Z1bmN0aW9uIGNlKGUpe3ZhciB0LG4scixvLHM9dm9pZCAwPT09ZT9FOmUsaT1zLm9wdGlvbnMsYT12b2lkIDA9PT1pP0U6aSxjPXMucGx1Z2lucyx1PXZvaWQgMD09PWM/dzpjLGw9bmV3IHAoYSksZD1bXSxoPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7aWYodCl0cnl7ZSh0K1wifVwiKX1jYXRjaChlKXt9fXJldHVybiBmdW5jdGlvbihuLHIsbyxzLGksYSxjLHUsbCxkKXtzd2l0Y2gobil7Y2FzZSAxOmlmKDA9PT1sJiY2ND09PXIuY2hhckNvZGVBdCgwKSlyZXR1cm4gZShyK1wiO1wiKSxcIlwiO2JyZWFrO2Nhc2UgMjppZigwPT09dSlyZXR1cm4gcitcIi8qfCovXCI7YnJlYWs7Y2FzZSAzOnN3aXRjaCh1KXtjYXNlIDEwMjpjYXNlIDExMjpyZXR1cm4gZShvWzBdK3IpLFwiXCI7ZGVmYXVsdDpyZXR1cm4gcisoMD09PWQ/XCIvKnwqL1wiOlwiXCIpfWNhc2UtMjpyLnNwbGl0KFwiLyp8Ki99XCIpLmZvckVhY2godCl9fX0oKGZ1bmN0aW9uKGUpe2QucHVzaChlKX0pKSxmPWZ1bmN0aW9uKGUscixzKXtyZXR1cm4gMD09PXImJi0xIT09YWUuaW5kZXhPZihzW24ubGVuZ3RoXSl8fHMubWF0Y2gobyk/ZTpcIi5cIit0fTtmdW5jdGlvbiBtKGUscyxpLGEpe3ZvaWQgMD09PWEmJihhPVwiJlwiKTt2YXIgYz1lLnJlcGxhY2UoaWUsXCJcIiksdT1zJiZpP2krXCIgXCIrcytcIiB7IFwiK2MrXCIgfVwiOmM7cmV0dXJuIHQ9YSxuPXMscj1uZXcgUmVnRXhwKFwiXFxcXFwiK24rXCJcXFxcYlwiLFwiZ1wiKSxvPW5ldyBSZWdFeHAoXCIoXFxcXFwiK24rXCJcXFxcYil7Mix9XCIpLGwoaXx8IXM/XCJcIjpzLHUpfXJldHVybiBsLnVzZShbXS5jb25jYXQodSxbZnVuY3Rpb24oZSx0LG8pezI9PT1lJiZvLmxlbmd0aCYmb1swXS5sYXN0SW5kZXhPZihuKT4wJiYob1swXT1vWzBdLnJlcGxhY2UocixmKSl9LGgsZnVuY3Rpb24oZSl7aWYoLTI9PT1lKXt2YXIgdD1kO3JldHVybiBkPVtdLHR9fV0pKSxtLmhhc2g9dS5sZW5ndGg/dS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZXx8aigxNSksdGUoZSx0Lm5hbWUpfSksNTM4MSkudG9TdHJpbmcoKTpcIlwiLG19dmFyIHVlPXIuY3JlYXRlQ29udGV4dCgpLGxlPXVlLkNvbnN1bWVyLGRlPXIuY3JlYXRlQ29udGV4dCgpLGhlPShkZS5Db25zdW1lcixuZXcgWikscGU9Y2UoKTtmdW5jdGlvbiBmZSgpe3JldHVybiBzKHVlKXx8aGV9ZnVuY3Rpb24gbWUoKXtyZXR1cm4gcyhkZSl8fHBlfWZ1bmN0aW9uIHllKGUpe3ZhciB0PW8oZS5zdHlsaXNQbHVnaW5zKSxuPXRbMF0scz10WzFdLGM9ZmUoKSx1PWkoKGZ1bmN0aW9uKCl7dmFyIHQ9YztyZXR1cm4gZS5zaGVldD90PWUuc2hlZXQ6ZS50YXJnZXQmJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dGFyZ2V0OmUudGFyZ2V0fSwhMSkpLGUuZGlzYWJsZUNTU09NSW5qZWN0aW9uJiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3VzZUNTU09NSW5qZWN0aW9uOiExfSkpLHR9KSxbZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24sZS5zaGVldCxlLnRhcmdldF0pLGw9aSgoZnVuY3Rpb24oKXtyZXR1cm4gY2Uoe29wdGlvbnM6e3ByZWZpeDohZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXN9LHBsdWdpbnM6bn0pfSksW2UuZGlzYWJsZVZlbmRvclByZWZpeGVzLG5dKTtyZXR1cm4gYSgoZnVuY3Rpb24oKXtoKG4sZS5zdHlsaXNQbHVnaW5zKXx8cyhlLnN0eWxpc1BsdWdpbnMpfSksW2Uuc3R5bGlzUGx1Z2luc10pLHIuY3JlYXRlRWxlbWVudCh1ZS5Qcm92aWRlcix7dmFsdWU6dX0sci5jcmVhdGVFbGVtZW50KGRlLlByb3ZpZGVyLHt2YWx1ZTpsfSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3IuQ2hpbGRyZW4ub25seShlLmNoaWxkcmVuKTplLmNoaWxkcmVuKSl9dmFyIHZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuPXRoaXM7dGhpcy5pbmplY3Q9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD1wZSk7dmFyIHI9bi5uYW1lK3QuaGFzaDtlLmhhc05hbWVGb3JJZChuLmlkLHIpfHxlLmluc2VydFJ1bGVzKG4uaWQscix0KG4ucnVsZXMscixcIkBrZXlmcmFtZXNcIikpfSx0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGooMTIsU3RyaW5nKG4ubmFtZSkpfSx0aGlzLm5hbWU9ZSx0aGlzLmlkPVwic2Mta2V5ZnJhbWVzLVwiK2UsdGhpcy5ydWxlcz10fXJldHVybiBlLnByb3RvdHlwZS5nZXROYW1lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1wZSksdGhpcy5uYW1lK2UuaGFzaH0sZX0oKSxnZT0vKFtBLVpdKS8sU2U9LyhbQS1aXSkvZyx3ZT0vXm1zLS8sRWU9ZnVuY3Rpb24oZSl7cmV0dXJuXCItXCIrZS50b0xvd2VyQ2FzZSgpfTtmdW5jdGlvbiBiZShlKXtyZXR1cm4gZ2UudGVzdChlKT9lLnJlcGxhY2UoU2UsRWUpLnJlcGxhY2Uod2UsXCItbXMtXCIpOmV9dmFyIF9lPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfHwhMT09PWV8fFwiXCI9PT1lfTtmdW5jdGlvbiBOZShlLG4scixvKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHMsaT1bXSxhPTAsYz1lLmxlbmd0aDthPGM7YSs9MSlcIlwiIT09KHM9TmUoZVthXSxuLHIsbykpJiYoQXJyYXkuaXNBcnJheShzKT9pLnB1c2guYXBwbHkoaSxzKTppLnB1c2gocykpO3JldHVybiBpfWlmKF9lKGUpKXJldHVyblwiXCI7aWYoTihlKSlyZXR1cm5cIi5cIitlLnN0eWxlZENvbXBvbmVudElkO2lmKGIoZSkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mKGw9ZSl8fGwucHJvdG90eXBlJiZsLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50fHwhbilyZXR1cm4gZTt2YXIgdT1lKG4pO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnQodSkmJmNvbnNvbGUud2FybihfKGUpK1wiIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cIiksTmUodSxuLHIsbyl9dmFyIGw7cmV0dXJuIGUgaW5zdGFuY2VvZiB2ZT9yPyhlLmluamVjdChyLG8pLGUuZ2V0TmFtZShvKSk6ZTpTKGUpP2Z1bmN0aW9uIGUodCxuKXt2YXIgcixvLHM9W107Zm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmIV9lKHRbaV0pJiYoQXJyYXkuaXNBcnJheSh0W2ldKSYmdFtpXS5pc0Nzc3x8Yih0W2ldKT9zLnB1c2goYmUoaSkrXCI6XCIsdFtpXSxcIjtcIik6Uyh0W2ldKT9zLnB1c2guYXBwbHkocyxlKHRbaV0saSkpOnMucHVzaChiZShpKStcIjogXCIrKHI9aSxudWxsPT0obz10W2ldKXx8XCJib29sZWFuXCI9PXR5cGVvZiBvfHxcIlwiPT09bz9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiBvfHwwPT09b3x8ciBpbiBmP1N0cmluZyhvKS50cmltKCk6bytcInB4XCIpK1wiO1wiKSk7cmV0dXJuIG4/W24rXCIge1wiXS5jb25jYXQocyxbXCJ9XCJdKTpzfShlKTplLnRvU3RyaW5nKCl9dmFyIEFlPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoZS5pc0Nzcz0hMCksZX07ZnVuY3Rpb24gQ2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBiKGUpfHxTKGUpP0FlKE5lKGcodyxbZV0uY29uY2F0KG4pKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOkFlKE5lKGcoZSxuKSkpfXZhciBJZT0vaW52YWxpZCBob29rIGNhbGwvaSxQZT1uZXcgU2V0LE9lPWZ1bmN0aW9uKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49XCJUaGUgY29tcG9uZW50IFwiK2UrKHQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCIpK1wiIGhhcyBiZWVuIGNyZWF0ZWQgZHluYW1pY2FsbHkuXFxuWW91IG1heSBzZWUgdGhpcyB3YXJuaW5nIGJlY2F1c2UgeW91J3ZlIGNhbGxlZCBzdHlsZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxcblRvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuXCIscj1jb25zb2xlLmVycm9yO3RyeXt2YXIgbz0hMDtjb25zb2xlLmVycm9yPWZ1bmN0aW9uKGUpe2lmKEllLnRlc3QoZSkpbz0hMSxQZS5kZWxldGUobik7ZWxzZXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKXNbaS0xXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChzKSl9fSxjKCksbyYmIVBlLmhhcyhuKSYmKGNvbnNvbGUud2FybihuKSxQZS5hZGQobikpfWNhdGNoKGUpe0llLnRlc3QoZS5tZXNzYWdlKSYmUGUuZGVsZXRlKG4pfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1yfX19LFJlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49RSksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LERlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csamU9LyheLXwtJCkvZztmdW5jdGlvbiBUZShlKXtyZXR1cm4gZS5yZXBsYWNlKERlLFwiLVwiKS5yZXBsYWNlKGplLFwiXCIpfXZhciBrZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUobmUoZSk+Pj4wKX07ZnVuY3Rpb24geGUoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxlLmNoYXJBdCgwKT09PWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpfXZhciBWZT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJiFBcnJheS5pc0FycmF5KGUpfSxCZT1mdW5jdGlvbihlKXtyZXR1cm5cIl9fcHJvdG9fX1wiIT09ZSYmXCJjb25zdHJ1Y3RvclwiIT09ZSYmXCJwcm90b3R5cGVcIiE9PWV9O2Z1bmN0aW9uIE1lKGUsdCxuKXt2YXIgcj1lW25dO1ZlKHQpJiZWZShyKT96ZShyLHQpOmVbbl09dH1mdW5jdGlvbiB6ZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07Zm9yKHZhciBvPTAscz1uO288cy5sZW5ndGg7bysrKXt2YXIgaT1zW29dO2lmKFZlKGkpKWZvcih2YXIgYSBpbiBpKUJlKGEpJiZNZShlLGlbYV0sYSl9cmV0dXJuIGV9dmFyIExlPXIuY3JlYXRlQ29udGV4dCgpLEdlPUxlLkNvbnN1bWVyO2Z1bmN0aW9uIEZlKGUpe3ZhciB0PXMoTGUpLG49aSgoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm4gaigxNCk7aWYoYihlKSl7dmFyIG49ZSh0KTtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxudWxsIT09biYmIUFycmF5LmlzQXJyYXkobikmJlwib2JqZWN0XCI9PXR5cGVvZiBuP246aig3KX1yZXR1cm4gQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGU/aig4KTp0P3Yoe30sdCx7fSxlKTplfShlLnRoZW1lLHQpfSksW2UudGhlbWUsdF0pO3JldHVybiBlLmNoaWxkcmVuP3IuY3JlYXRlRWxlbWVudChMZS5Qcm92aWRlcix7dmFsdWU6bn0sZS5jaGlsZHJlbik6bnVsbH12YXIgWWU9e307ZnVuY3Rpb24gcWUoZSx0LG4pe3ZhciBvPU4oZSksaT0heGUoZSksYT10LmF0dHJzLGM9dm9pZCAwPT09YT93OmEsZD10LmNvbXBvbmVudElkLGg9dm9pZCAwPT09ZD9mdW5jdGlvbihlLHQpe3ZhciBuPVwic3RyaW5nXCIhPXR5cGVvZiBlP1wic2NcIjpUZShlKTtZZVtuXT0oWWVbbl18fDApKzE7dmFyIHI9bitcIi1cIitrZShcIjUuMy4xXCIrbitZZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6ZCxwPXQuZGlzcGxheU5hbWUsZj12b2lkIDA9PT1wP2Z1bmN0aW9uKGUpe3JldHVybiB4ZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK18oZSkrXCIpXCJ9KGUpOnAsZz10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP1RlKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8aCxTPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLEE9dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoQT10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scixvKXtyZXR1cm4gZS5zaG91bGRGb3J3YXJkUHJvcChuLHIsbykmJnQuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQyxJPW5ldyBzZShuLGcsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksUD1JLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsTz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsZD1lLnNob3VsZEZvcndhcmRQcm9wLGg9ZS5zdHlsZWRDb21wb25lbnRJZCxwPWUudGFyZ2V0O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaCk7dmFyIGY9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpO3ZhciByPXYoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBiKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShSZSh0LHMoTGUpLGEpfHxFLHQsbykseT1mWzBdLGc9ZlsxXSxTPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWZlKCkscz1tZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEUsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJiF0JiZyJiZyKGkpLGl9KGkscix5LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ZS53YXJuVG9vTWFueUNsYXNzZXM6dm9pZCAwKSx3PW4sXz1nLiRhc3x8dC4kYXN8fGcuYXN8fHQuYXN8fHAsTj14ZShfKSxBPWchPT10P3Yoe30sdCx7fSxnKTp0LEM9e307Zm9yKHZhciBJIGluIEEpXCIkXCIhPT1JWzBdJiZcImFzXCIhPT1JJiYoXCJmb3J3YXJkZWRBc1wiPT09ST9DLmFzPUFbSV06KGQ/ZChJLG0sXyk6IU58fG0oSSkpJiYoQ1tJXT1BW0ldKSk7cmV0dXJuIHQuc3R5bGUmJmcuc3R5bGUhPT10LnN0eWxlJiYoQy5zdHlsZT12KHt9LHQuc3R5bGUse30sZy5zdHlsZSkpLEMuY2xhc3NOYW1lPUFycmF5LnByb3RvdHlwZS5jb25jYXQoYyxoLFMhPT1oP1M6bnVsbCx0LmNsYXNzTmFtZSxnLmNsYXNzTmFtZSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLEMucmVmPXcsdShfLEMpfShDLGUsdCxQKX07cmV0dXJuIE8uZGlzcGxheU5hbWU9ZiwoQz1yLmZvcndhcmRSZWYoTykpLmF0dHJzPVMsQy5jb21wb25lbnRTdHlsZT1JLEMuZGlzcGxheU5hbWU9ZixDLnNob3VsZEZvcndhcmRQcm9wPUEsQy5mb2xkZWRDb21wb25lbnRJZHM9bz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuZm9sZGVkQ29tcG9uZW50SWRzLGUuc3R5bGVkQ29tcG9uZW50SWQpOncsQy5zdHlsZWRDb21wb25lbnRJZD1nLEMudGFyZ2V0PW8/ZS50YXJnZXQ6ZSxDLndpdGhDb21wb25lbnQ9ZnVuY3Rpb24oZSl7dmFyIHI9dC5jb21wb25lbnRJZCxvPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLG89e30scz1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8cy5sZW5ndGg7cisrKW49c1tyXSx0LmluZGV4T2Yobik+PTB8fChvW25dPWVbbl0pO3JldHVybiBvfSh0LFtcImNvbXBvbmVudElkXCJdKSxzPXImJnIrXCItXCIrKHhlKGUpP2U6VGUoXyhlKSkpO3JldHVybiBxZShlLHYoe30sbyx7YXR0cnM6Uyxjb21wb25lbnRJZDpzfSksbil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFwiZGVmYXVsdFByb3BzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHN9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM9bz96ZSh7fSxlLmRlZmF1bHRQcm9wcyx0KTp0fX0pLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihPZShmLGcpLEMud2FyblRvb01hbnlDbGFzc2VzPWZ1bmN0aW9uKGUsdCl7dmFyIG49e30scj0hMTtyZXR1cm4gZnVuY3Rpb24obyl7aWYoIXImJihuW29dPSEwLE9iamVjdC5rZXlzKG4pLmxlbmd0aD49MjAwKSl7dmFyIHM9dD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIjtjb25zb2xlLndhcm4oXCJPdmVyIDIwMCBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgXCIrZStzK1wiLlxcbkNvbnNpZGVyIHVzaW5nIHRoZSBhdHRycyBtZXRob2QsIHRvZ2V0aGVyIHdpdGggYSBzdHlsZSBvYmplY3QgZm9yIGZyZXF1ZW50bHkgY2hhbmdlZCBzdHlsZXMuXFxuRXhhbXBsZTpcXG4gIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4gICAgc3R5bGU6IHtcXG4gICAgICBiYWNrZ3JvdW5kOiBwcm9wcy5iYWNrZ3JvdW5kLFxcbiAgICB9LFxcbiAgfSkpYHdpZHRoOiAxMDAlO2BcXG5cXG4gIDxDb21wb25lbnQgLz5cIikscj0hMCxuPXt9fX19KGYsZykpLEMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIi5cIitDLnN0eWxlZENvbXBvbmVudElkfSxpJiZ5KEMsZSx7YXR0cnM6ITAsY29tcG9uZW50U3R5bGU6ITAsZGlzcGxheU5hbWU6ITAsZm9sZGVkQ29tcG9uZW50SWRzOiEwLHNob3VsZEZvcndhcmRQcm9wOiEwLHN0eWxlZENvbXBvbmVudElkOiEwLHRhcmdldDohMCx3aXRoQ29tcG9uZW50OiEwfSksQ312YXIgSGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG8pe2lmKHZvaWQgMD09PW8mJihvPUUpLCFuKHIpKXJldHVybiBqKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiB0KHIsbyxDZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7fSxuKSl9LHMuYXR0cnM9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLG4pLmZpbHRlcihCb29sZWFuKX0pKX0sc30ocWUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtIZVtlXT1IZShlKX0pKTt2YXIgJGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPXJlKGUpLFoucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKE5lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiBXZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIra2UoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3ICRlKGksYSk7ZnVuY3Rpb24gbChlKXt2YXIgdD1mZSgpLG49bWUoKSxvPXMoTGUpLGw9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmaChsLGUsdCxvLG4pLGQoKGZ1bmN0aW9uKCl7aWYoIXQuc2VydmVyKXJldHVybiBoKGwsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMobCx0KX19KSxbbCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLE8sbixvKTtlbHNle3ZhciBzPXYoe30sdCx7dGhlbWU6UmUodCxyLGwuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZPZShhKSxyLm1lbW8obCl9ZnVuY3Rpb24gVWUoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz1rZShvKTtyZXR1cm4gbmV3IHZlKHMsbyl9dmFyIEplPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49cSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxBKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjFcIiddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKStcIj5cIit0K1wiPC9zdHlsZT5cIn0sdGhpcy5nZXRTdHlsZVRhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWFsZWQ/aigyKTplLl9lbWl0U2hlZXRDU1MoKX0sdGhpcy5nZXRTdHlsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtpZihlLnNlYWxlZClyZXR1cm4gaigyKTt2YXIgbj0oKHQ9e30pW0FdPVwiXCIsdFtcImRhdGEtc3R5bGVkLXZlcnNpb25cIl09XCI1LjMuMVwiLHQuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e19faHRtbDplLmluc3RhbmNlLnRvU3RyaW5nKCl9LHQpLG89cSgpO3JldHVybiBvJiYobi5ub25jZT1vKSxbci5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix2KHt9LG4se2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IFooe2lzU2VydmVyOiEwfSksdGhpcy5zZWFsZWQ9ITF9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY29sbGVjdFN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZWFsZWQ/aigyKTpyLmNyZWF0ZUVsZW1lbnQoeWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSx0LmludGVybGVhdmVXaXRoTm9kZVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gaigzKX0sZX0oKSxYZT1mdW5jdGlvbihlKXt2YXIgdD1yLmZvcndhcmRSZWYoKGZ1bmN0aW9uKHQsbil7dmFyIG89cyhMZSksaT1lLmRlZmF1bHRQcm9wcyxhPVJlKHQsbyxpKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1hJiZjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJytfKGUpKydcIicpLHIuY3JlYXRlRWxlbWVudChlLHYoe30sdCx7dGhlbWU6YSxyZWY6bn0pKX0pKTtyZXR1cm4geSh0LGUpLHQuZGlzcGxheU5hbWU9XCJXaXRoVGhlbWUoXCIrXyhlKStcIilcIix0fSxaZT1mdW5jdGlvbigpe3JldHVybiBzKExlKX0sS2U9e1N0eWxlU2hlZXQ6WixtYXN0ZXJTaGVldDpoZX07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgeW91J3ZlIGltcG9ydGVkICdzdHlsZWQtY29tcG9uZW50cycgb24gUmVhY3QgTmF0aXZlLlxcblBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblJlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmVcIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ0ZXN0XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdPXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdfHwwLDE9PT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyB0byBub3QgcmVuZGVyIHByb3Blcmx5LCBlcnJvcnMgZHVyaW5nIHRoZSByZWh5ZHJhdGlvbiBwcm9jZXNzLCBhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby5cIiksd2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0rPTEpO2V4cG9ydCBkZWZhdWx0IEhlO2V4cG9ydHtKZSBhcyBTZXJ2ZXJTdHlsZVNoZWV0LGxlIGFzIFN0eWxlU2hlZXRDb25zdW1lcix1ZSBhcyBTdHlsZVNoZWV0Q29udGV4dCx5ZSBhcyBTdHlsZVNoZWV0TWFuYWdlcixHZSBhcyBUaGVtZUNvbnN1bWVyLExlIGFzIFRoZW1lQ29udGV4dCxGZSBhcyBUaGVtZVByb3ZpZGVyLEtlIGFzIF9fUFJJVkFURV9fLFdlIGFzIGNyZWF0ZUdsb2JhbFN0eWxlLENlIGFzIGNzcyxOIGFzIGlzU3R5bGVkQ29tcG9uZW50LFVlIGFzIGtleWZyYW1lcyxaZSBhcyB1c2VUaGVtZSxDIGFzIHZlcnNpb24sWGUgYXMgd2l0aFRoZW1lfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzLm1hcFxuIiwiZXhwb3J0IGNvbnN0IGRhcmsgPSBcIiMxODE4MUFcIjtcbmV4cG9ydCBjb25zdCBtaWxkID0gXCIjMzEzMDMwXCI7XG5leHBvcnQgY29uc3QgbWlsZGVyID0gXCIjNTE1MTUxXCI7XG5leHBvcnQgY29uc3QgbGlnaHQgPSBcIiM2NjZcIjtcbmV4cG9ydCBjb25zdCBsaWdodGVyID0gXCIjY2NjXCI7XG5leHBvcnQgY29uc3QgYmx1ZSA9IFwiIzQ4NzZlZVwiO1xuZXhwb3J0IGNvbnN0IGxpZ2h0Qmx1ZSA9IFwiIzg3YTRmMVwiO1xuZXhwb3J0IGNvbnN0IHdoaXRlID0gXCIjZmFmYWZhXCI7XG5leHBvcnQgY29uc3QgcmVkID0gXCIjZmY1YzU4XCI7XG5leHBvcnQgY29uc3QgZGFya1JlZCA9IFwiI2ZmMDQwOVwiO1xuIiwiaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IGRhcmsgfSBmcm9tIFwiLi9jb2xvcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlR2xvYmFsU3R5bGVgXG4gICAgOnJvb3Qge1xuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIC5tb2JpbGUtb25seSB7IGRpc3BsYXk6IG5vbmU7IH1cbiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzKSxcbiAgICAgICAgICAgICAgICAgICAgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLFxuICAgICAgICAgICAgICAgICAgICBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMvMSksXG4gICAgICAgICAgICAgICAgICAgIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMykge1xuICAgICAgICAgICAgZm9udC1zaXplOiAyOXB4O1xuICAgICAgICAgICAgLm1vYmlsZS1sYXN0IHtcbiAgICAgICAgICAgICAgICBvcmRlcjogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5tb2JpbGUtaGlkZGVuIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLm1vYmlsZS1vbmx5IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAqLCAqOjpiZWZvcmUsICo6OmFmdGVyIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuICAgIGJvZHkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rhcmt9O1xuICAgICAgICAqIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBSdWJpaztcbiAgICAgICAgfVxuICAgICAgICAqOjpwbGFjZWhvbGRlciB7XG4gICAgICAgICAgICBmb250LXdlaWdodDogbGlnaHRlcjtcbiAgICAgICAgfVxuICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgfVxuICAgIC51cC1tb3Rpb24ge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwJSk7XG4gICAgICAgIGFuaW1hdGlvbjogdXAtbW90aW9uIDFzIGVhc2Utb3V0IGZvcndhcmRzO1xuICAgIH1cbiAgICBAa2V5ZnJhbWVzIHVwLW1vdGlvbiB7XG4gICAgICAgIGZyb20ge1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcbiAgICAgICAgfVxuICAgICAgICB0byB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC5wb3Atb24ge1xuICAgICAgICBhbmltYXRpb246IHBvcC1vbiAwLjFzIGN1YmljLWJlemllcigwLjA5LCAwLjU5LCAwLjE4LCAxLjE5KSBmb3J3YXJkcztcbiAgICB9XG4gICAgQGtleWZyYW1lcyBwb3Atb24ge1xuICAgICAgICBmcm9tIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdG8ge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICAgICAgfVxuICAgIH1cbmA7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBibHVlLCBsaWdodGVyLCBtaWxkIH0gZnJvbSBcIi4vY29sb3JzXCI7XG5cbmV4cG9ydCBjb25zdCBGbGV4Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgJi50cmFuc3BhcmVudCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgJi53cmFwIHtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgZ2FwOiAxZW07XG4gIH1cbiAgcGFkZGluZzogMWVtO1xuICBnYXA6IDAuMmVtIDFlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHttaWxkfTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAmLmNlbnRlci15IHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG4gICYuYmFzZWxpbmUteSB7XG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICB9XG4gICYuc3BiLXgge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxuICAmLmdhcC14LWhhbGYge1xuICAgIGdhcDogMC4yZW0gMC41ZW07XG4gIH1cbiAgJi5wYWRkLXgge1xuICAgIHBhZGRpbmc6IDAgMmVtO1xuICB9XG4gICYucGFkZC15IHtcbiAgICBwYWRkaW5nOiAwLjJlbSAwO1xuICB9XG4gICYucGFkZC0wIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gICYucGFkZC0xLTIge1xuICAgIHBhZGRpbmc6IDFlbSAyZW07XG4gIH1cbiAgJi5wYWRkLWhhbGYge1xuICAgIHBhZGRpbmc6IDAuNWVtIDFlbTtcbiAgfVxuICAmLnNjcm9sbC14IHtcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIH1cbiAgOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgaGVpZ2h0OiAxMHB4O1xuICB9XG4gIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7bWlsZH07XG4gIH1cbiAgOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtsaWdodGVyfTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbiAgJi5yZXZlcnNlZCB7XG4gICAgZmxleC1mbG93OiByb3ctcmV2ZXJzZTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXgtd2lkdGg6IDExMDBweDtcbmA7XG5cbmV4cG9ydCBjb25zdCBDaXJjbGVDb250YWluZXIgPSBzdHlsZWQoTGluaylgXG4gIGZsZXgtc2hyaW5rOiAwO1xuICB3aWR0aDogM2VtO1xuICBoZWlnaHQ6IDNlbTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3JkZXI6IDAuMmVtIHNvbGlkICR7Ymx1ZX07XG4gICYubGFyZ2Uge1xuICAgIHdpZHRoOiA2ZW07XG4gICAgaGVpZ2h0OiA2ZW07XG4gICAgYm9yZGVyOiAwLjRlbSBzb2xpZCAke2JsdWV9O1xuICB9XG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMyksXG4gICAgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMy8xKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpIHtcbiAgICB3aWR0aDogMy41cmVtO1xuICAgIGhlaWdodDogMy41cmVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGZsZXgtZ3JvdzogMTtcbiAgJi5jZW50ZXIge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbiAgJi5nYXAteSB7XG4gICAgZ2FwOiAwLjVlbTtcbiAgfVxuICAmLmludmVydCB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJpZ0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDgwMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogMCAxZW07XG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMyksXG4gICAgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMy8xKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpIHtcbiAgICBtYXgtd2lkdGg6IDExMDBweDtcbiAgfVxuYDtcbiIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheSh0PjE/dC0xOjApLGU9MTtlPHQ7ZSsrKXJbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwscik6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisoci5sZW5ndGg/XCIgXCIrci5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gdChuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiByKG4pe3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXQpcmV0dXJuITA7dmFyIHI9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yO3JldHVybiByPT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHIpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISFuLmNvbnN0cnVjdG9yW0xdfHxzKG4pfHx2KG4pKX1mdW5jdGlvbiBlKHIpe3JldHVybiB0KHIpfHxuKDIzLHIpLHJbUV0udH1mdW5jdGlvbiBpKG4sdCxyKXt2b2lkIDA9PT1yJiYocj0hMSksMD09PW8obik/KHI/T2JqZWN0LmtleXM6bm4pKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ImJlwic3ltYm9sXCI9PXR5cGVvZiBlfHx0KGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHQoZSxyLG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHQ9bltRXTtyZXR1cm4gdD90Lmk+Mz90LmktNDp0Lmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4sdCl7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHQpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHQpfWZ1bmN0aW9uIGEobix0KXtyZXR1cm4gMj09PW8obik/bi5nZXQodCk6blt0XX1mdW5jdGlvbiBmKG4sdCxyKXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHQscik6Mz09PWU/KG4uZGVsZXRlKHQpLG4uYWRkKHIpKTpuW3RdPXJ9ZnVuY3Rpb24gYyhuLHQpe3JldHVybiBuPT09dD8wIT09bnx8MS9uPT0xL3Q6biE9biYmdCE9dH1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgdD10bihuKTtkZWxldGUgdFtRXTtmb3IodmFyIHI9bm4odCksZT0wO2U8ci5sZW5ndGg7ZSsrKXt2YXIgaT1yW2VdLG89dFtpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHRbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHQpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHQobil8fCFyKG4pP246KG8obik+MSYmKG4uc2V0PW4uYWRkPW4uY2xlYXI9bi5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZShuKSxlJiZpKG4sKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGQodCwhMCl9KSwhMCksbil9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHQpe3ZhciByPXJuW3RdO3JldHVybiByfHxuKDE4LHQpLHJ9ZnVuY3Rpb24gbShuLHQpe3JuW25dfHwocm5bbl09dCl9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fG4oMCksVX1mdW5jdGlvbiBqKG4sdCl7dCYmKGIoXCJQYXRjaGVzXCIpLG4udT1bXSxuLnM9W10sbi52PXQpfWZ1bmN0aW9uIE8obil7ZyhuKSxuLnAuZm9yRWFjaChTKSxuLnA9bnVsbH1mdW5jdGlvbiBnKG4pe249PT1VJiYoVT1uLmwpfWZ1bmN0aW9uIHcobil7cmV0dXJuIFU9e3A6W10sbDpVLGg6bixtOiEwLF86MH19ZnVuY3Rpb24gUyhuKXt2YXIgdD1uW1FdOzA9PT10Lml8fDE9PT10Lmk/dC5qKCk6dC5PPSEwfWZ1bmN0aW9uIFAodCxlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT10JiZ0IT09aTtyZXR1cm4gZS5oLmd8fGIoXCJFUzVcIikuUyhlLHQsbyksbz8oaVtRXS5QJiYoTyhlKSxuKDQpKSxyKHQpJiYodD1NKGUsdCksZS5sfHx4KGUsdCkpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLHQsZS51LGUucykpOnQ9TShlLGksW10pLE8oZSksZS51JiZlLnYoZS51LGUucyksdCE9PUg/dDp2b2lkIDB9ZnVuY3Rpb24gTShuLHQscil7aWYoeSh0KSlyZXR1cm4gdDt2YXIgZT10W1FdO2lmKCFlKXJldHVybiBpKHQsKGZ1bmN0aW9uKGksbyl7cmV0dXJuIEEobixlLHQsaSxvLHIpfSksITApLHQ7aWYoZS5BIT09bilyZXR1cm4gdDtpZighZS5QKXJldHVybiB4KG4sZS50LCEwKSxlLnQ7aWYoIWUuSSl7ZS5JPSEwLGUuQS5fLS07dmFyIG89ND09PWUuaXx8NT09PWUuaT9lLm89bChlLmspOmUubztpKDM9PT1lLmk/bmV3IFNldChvKTpvLChmdW5jdGlvbih0LGkpe3JldHVybiBBKG4sZSxvLHQsaSxyKX0pKSx4KG4sbywhMSksciYmbi51JiZiKFwiUGF0Y2hlc1wiKS5SKGUscixuLnUsbi5zKX1yZXR1cm4gZS5vfWZ1bmN0aW9uIEEoZSxpLG8sYSxjLHMpe2lmKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmM9PT1vJiZuKDUpLHQoYykpe3ZhciB2PU0oZSxjLHMmJmkmJjMhPT1pLmkmJiF1KGkuRCxhKT9zLmNvbmNhdChhKTp2b2lkIDApO2lmKGYobyxhLHYpLCF0KHYpKXJldHVybjtlLm09ITF9aWYocihjKSYmIXkoYykpe2lmKCFlLmguRiYmZS5fPDEpcmV0dXJuO00oZSxjKSxpJiZpLkEubHx8eChlLGMpfX1mdW5jdGlvbiB4KG4sdCxyKXt2b2lkIDA9PT1yJiYocj0hMSksbi5oLkYmJm4ubSYmZCh0LHIpfWZ1bmN0aW9uIHoobix0KXt2YXIgcj1uW1FdO3JldHVybihyP3Aocik6bilbdF19ZnVuY3Rpb24gSShuLHQpe2lmKHQgaW4gbilmb3IodmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKG4pO3I7KXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7aWYoZSlyZXR1cm4gZTtyPU9iamVjdC5nZXRQcm90b3R5cGVPZihyKX19ZnVuY3Rpb24gayhuKXtuLlB8fChuLlA9ITAsbi5sJiZrKG4ubCkpfWZ1bmN0aW9uIEUobil7bi5vfHwobi5vPWwobi50KSl9ZnVuY3Rpb24gUihuLHQscil7dmFyIGU9cyh0KT9iKFwiTWFwU2V0XCIpLk4odCxyKTp2KHQpP2IoXCJNYXBTZXRcIikuVCh0LHIpOm4uZz9mdW5jdGlvbihuLHQpe3ZhciByPUFycmF5LmlzQXJyYXkobiksZT17aTpyPzE6MCxBOnQ/dC5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnQsdDpuLGs6bnVsbCxvOm51bGwsajpudWxsLEM6ITF9LGk9ZSxvPWVuO3ImJihpPVtlXSxvPW9uKTt2YXIgdT1Qcm94eS5yZXZvY2FibGUoaSxvKSxhPXUucmV2b2tlLGY9dS5wcm94eTtyZXR1cm4gZS5rPWYsZS5qPWEsZn0odCxyKTpiKFwiRVM1XCIpLkoodCxyKTtyZXR1cm4ocj9yLkE6XygpKS5wLnB1c2goZSksZX1mdW5jdGlvbiBEKGUpe3JldHVybiB0KGUpfHxuKDIyLGUpLGZ1bmN0aW9uIG4odCl7aWYoIXIodCkpcmV0dXJuIHQ7dmFyIGUsdT10W1FdLGM9byh0KTtpZih1KXtpZighdS5QJiYodS5pPDR8fCFiKFwiRVM1XCIpLksodSkpKXJldHVybiB1LnQ7dS5JPSEwLGU9Rih0LGMpLHUuST0hMX1lbHNlIGU9Rih0LGMpO3JldHVybiBpKGUsKGZ1bmN0aW9uKHQscil7dSYmYSh1LnQsdCk9PT1yfHxmKGUsdCxuKHIpKX0pKSwzPT09Yz9uZXcgU2V0KGUpOmV9KGUpfWZ1bmN0aW9uIEYobix0KXtzd2l0Y2godCl7Y2FzZSAyOnJldHVybiBuZXcgTWFwKG4pO2Nhc2UgMzpyZXR1cm4gQXJyYXkuZnJvbShuKX1yZXR1cm4gbChuKX1mdW5jdGlvbiBOKCl7ZnVuY3Rpb24gcihuLHQpe3ZhciByPXNbbl07cmV0dXJuIHI/ci5lbnVtZXJhYmxlPXQ6c1tuXT1yPXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTp0LGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXNbUV07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZih0KSxlbi5nZXQodCxuKX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciByPXRoaXNbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmZihyKSxlbi5zZXQocixuLHQpfX0scn1mdW5jdGlvbiBlKG4pe2Zvcih2YXIgdD1uLmxlbmd0aC0xO3Q+PTA7dC0tKXt2YXIgcj1uW3RdW1FdO2lmKCFyLlApc3dpdGNoKHIuaSl7Y2FzZSA1OmEocikmJmsocik7YnJlYWs7Y2FzZSA0Om8ocikmJmsocil9fX1mdW5jdGlvbiBvKG4pe2Zvcih2YXIgdD1uLnQscj1uLmssZT1ubihyKSxpPWUubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBvPWVbaV07aWYobyE9PVEpe3ZhciBhPXRbb107aWYodm9pZCAwPT09YSYmIXUodCxvKSlyZXR1cm4hMDt2YXIgZj1yW29dLHM9ZiYmZltRXTtpZihzP3MudCE9PWE6IWMoZixhKSlyZXR1cm4hMH19dmFyIHY9ISF0W1FdO3JldHVybiBlLmxlbmd0aCE9PW5uKHQpLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEobil7dmFyIHQ9bi5rO2lmKHQubGVuZ3RoIT09bi50Lmxlbmd0aClyZXR1cm4hMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsdC5sZW5ndGgtMSk7cmV0dXJuISghcnx8ci5nZXQpfWZ1bmN0aW9uIGYodCl7dC5PJiZuKDMsSlNPTi5zdHJpbmdpZnkocCh0KSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbihuLHQpe3ZhciBlPUFycmF5LmlzQXJyYXkobiksaT1mdW5jdGlvbihuLHQpe2lmKG4pe2Zvcih2YXIgZT1BcnJheSh0Lmxlbmd0aCksaT0wO2k8dC5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSxyKGksITApKTtyZXR1cm4gZX12YXIgbz10bih0KTtkZWxldGUgb1tRXTtmb3IodmFyIHU9bm4obyksYT0wO2E8dS5sZW5ndGg7YSsrKXt2YXIgZj11W2FdO29bZl09cihmLG58fCEhb1tmXS5lbnVtZXJhYmxlKX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodCksbyl9KGUsbiksbz17aTplPzU6NCxBOnQ/dC5BOl8oKSxQOiExLEk6ITEsRDp7fSxsOnQsdDpuLGs6aSxvOm51bGwsTzohMSxDOiExfTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGksUSx7dmFsdWU6byx3cml0YWJsZTohMH0pLGl9LFM6ZnVuY3Rpb24obixyLG8pe28/dChyKSYmcltRXS5BPT09biYmZShuLnApOihuLnUmJmZ1bmN0aW9uIG4odCl7aWYodCYmXCJvYmplY3RcIj09dHlwZW9mIHQpe3ZhciByPXRbUV07aWYocil7dmFyIGU9ci50LG89ci5rLGY9ci5ELGM9ci5pO2lmKDQ9PT1jKWkobywoZnVuY3Rpb24odCl7dCE9PVEmJih2b2lkIDAhPT1lW3RdfHx1KGUsdCk/Zlt0XXx8bihvW3RdKTooZlt0XT0hMCxrKHIpKSl9KSksaShlLChmdW5jdGlvbihuKXt2b2lkIDAhPT1vW25dfHx1KG8sbil8fChmW25dPSExLGsocikpfSkpO2Vsc2UgaWYoNT09PWMpe2lmKGEocikmJihrKHIpLGYubGVuZ3RoPSEwKSxvLmxlbmd0aDxlLmxlbmd0aClmb3IodmFyIHM9by5sZW5ndGg7czxlLmxlbmd0aDtzKyspZltzXT0hMTtlbHNlIGZvcih2YXIgdj1lLmxlbmd0aDt2PG8ubGVuZ3RoO3YrKylmW3ZdPSEwO2Zvcih2YXIgcD1NYXRoLm1pbihvLmxlbmd0aCxlLmxlbmd0aCksbD0wO2w8cDtsKyspdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighcihuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciB0PU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbil0W2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHRbTF09bltMXSksdH1mdW5jdGlvbiBmKG4pe3JldHVybiB0KG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24odCxyKXtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihyKXtmb3IodmFyIGk9ci5wYXRoLHU9ci5vcCxmPXQscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1cIlwiK2lbc107MCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8bigyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJm4oMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJm4oMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUoci52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHIudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSksdH0sUjpmdW5jdGlvbihuLHQscixlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obix0LHIsZSl7dmFyIG89bi50LHM9bi5vO2kobi5ELChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD10LmNvbmNhdChuKTtyLnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4sdCxyLGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4sdCxyLGUpe3ZhciBpPW4udCxvPW4uRCx1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSxyXTtyPXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD10LmNvbmNhdChbdl0pO3IucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD10LmNvbmNhdChbbF0pO3IucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6dC5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHQscixlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4sdCxyLGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXQuY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89dC5jb25jYXQoW3VdKTtyLnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4sdCxyLGUpfX0sTTpmdW5jdGlvbihuLHQscixlKXtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6dD09PUg/dm9pZCAwOnR9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bi50fSl9fSl9ZnVuY3Rpb24gQygpe2Z1bmN0aW9uIHQobix0KXtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj1ufWEobix0KSxuLnByb3RvdHlwZT0oci5wcm90b3R5cGU9dC5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIGUobil7bi5vfHwobi5EPW5ldyBNYXAsbi5vPW5ldyBNYXAobi50KSl9ZnVuY3Rpb24gbyhuKXtuLm98fChuLm89bmV3IFNldCxuLnQuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYocih0KSl7dmFyIGU9UihuLkEuaCx0LG4pO24ucC5zZXQodCxlKSxuLm8uYWRkKGUpfWVsc2Ugbi5vLmFkZCh0KX0pKSl9ZnVuY3Rpb24gdSh0KXt0Lk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHQpKSl9dmFyIGE9ZnVuY3Rpb24obix0KXtyZXR1cm4oYT1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24obix0KXtuLl9fcHJvdG9fXz10fXx8ZnVuY3Rpb24obix0KXtmb3IodmFyIHIgaW4gdCl0Lmhhc093blByb3BlcnR5KHIpJiYobltyXT10W3JdKX0pKG4sdCl9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sdCl7cmV0dXJuIHRoaXNbUV09e2k6MixsOnQsQTp0P3QuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLEQ6dm9pZCAwLHQ6bixrOnRoaXMsQzohMSxPOiExfSx0aGlzfXQobixNYXApO3ZhciBvPW4ucHJvdG90eXBlO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHAodGhpc1tRXSkuc2l6ZX19KSxvLmhhcz1mdW5jdGlvbihuKXtyZXR1cm4gcCh0aGlzW1FdKS5oYXMobil9LG8uc2V0PWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxwKHIpLmhhcyhuKSYmcChyKS5nZXQobik9PT10fHwoZShyKSxrKHIpLHIuRC5zZXQobiwhMCksci5vLnNldChuLHQpLHIuRC5zZXQobiwhMCkpLHRoaXN9LG8uZGVsZXRlPWZ1bmN0aW9uKG4pe2lmKCF0aGlzLmhhcyhuKSlyZXR1cm4hMTt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLGUodCksayh0KSx0LkQuc2V0KG4sITEpLHQuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbih0KXtuLkQuc2V0KHQsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4sdCl7dmFyIHI9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHQsci5nZXQoaSksaSxyKX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHQ9dGhpc1tRXTt1KHQpO3ZhciBpPXAodCkuZ2V0KG4pO2lmKHQuSXx8IXIoaSkpcmV0dXJuIGk7aWYoaSE9PXQudC5nZXQobikpcmV0dXJuIGk7dmFyIG89Uih0LkEuaCxpLHQpO3JldHVybiBlKHQpLHQuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4sdD10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHQudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXIubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTp0LmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHQ9dGhpcyxyPXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiB0LmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49ci5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXQuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQpe3JldHVybiB0aGlzW1FdPXtpOjMsbDp0LEE6dD90LkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxPOiExLEM6ITF9LHRoaXN9dChuLFNldCk7dmFyIHI9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHIuaGFzPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksdC5vPyEhdC5vLmhhcyhuKXx8ISghdC5wLmhhcyhuKXx8IXQuby5oYXModC5wLmdldChuKSkpOnQudC5oYXMobil9LHIuYWRkPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksdGhpcy5oYXMobil8fChvKHQpLGsodCksdC5vLmFkZChuKSksdGhpc30sci5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksbyh0KSxrKHQpLHQuby5kZWxldGUobil8fCEhdC5wLmhhcyhuKSYmdC5vLmRlbGV0ZSh0LnAuZ2V0KG4pKX0sci5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSxyLnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHIuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSxyLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0scltWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyLmZvckVhY2g9ZnVuY3Rpb24obix0KXtmb3IodmFyIHI9dGhpcy52YWx1ZXMoKSxlPXIubmV4dCgpOyFlLmRvbmU7KW4uY2FsbCh0LGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXIubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7TjpmdW5jdGlvbihuLHQpe3JldHVybiBuZXcgZihuLHQpfSxUOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5ldyBjKG4sdCl9fSl9ZnVuY3Rpb24gSigpe04oKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHRuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgdD17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24ocil7dFtyXT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4scil9KSksdH0scm49e30sZW49e2dldDpmdW5jdGlvbihuLHQpe2lmKHQ9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSx0KSlyZXR1cm4gZnVuY3Rpb24obix0LHIpe3ZhciBlLGk9SSh0LHIpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSx0KTt2YXIgaT1lW3RdO3JldHVybiBuLkl8fCFyKGkpP2k6aT09PXoobi50LHQpPyhFKG4pLG4ub1t0XT1SKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHQpe3JldHVybiB0IGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1JKHAobiksdCk7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHIpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSx0KSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09cilyZXR1cm4gbi5vW3RdPXIsbi5EW3RdPSExLCEwO2lmKGMocixpKSYmKHZvaWQgMCE9PXJ8fHUobi50LHQpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1t0XT09PXImJlwibnVtYmVyXCIhPXR5cGVvZiByJiYodm9pZCAwIT09cnx8dCBpbiBuLm8pfHwobi5vW3RdPXIsbi5EW3RdPSEwLCEwKX0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obix0KXtyZXR1cm4gdm9pZCAwIT09eihuLnQsdCl8fHQgaW4gbi50PyhuLkRbdF09ITEsRShuKSxrKG4pKTpkZWxldGUgbi5EW3RdLG4ubyYmZGVsZXRlIG4ub1t0XSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4sdCl7dmFyIHI9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09dCxlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTpyW3RdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxvbj17fTtpKGVuLChmdW5jdGlvbihuLHQpe29uW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLG9uLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHQscil7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDEzKSxlbi5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsdFswXSxyKX0sb24uc2V0PWZ1bmN0aW9uKHQscixlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09ciYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDE0KSxlbi5zZXQuY2FsbCh0aGlzLHRbMF0scixlLHRbMF0pfTt2YXIgdW49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBlPXRoaXM7dGhpcy5nPUIsdGhpcy5GPSEwLHRoaXMucHJvZHVjZT1mdW5jdGlvbih0LGksbyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSl7dmFyIHU9aTtpPXQ7dmFyIGE9ZTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHQ9dGhpczt2b2lkIDA9PT1uJiYobj11KTtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHI+MT9yLTE6MCksbz0xO288cjtvKyspZVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gYS5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3ZhciByO3JldHVybihyPWkpLmNhbGwuYXBwbHkocixbdCxuXS5jb25jYXQoZSkpfSkpfX12YXIgZjtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBpJiZuKDYpLHZvaWQgMCE9PW8mJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8mJm4oNykscih0KSl7dmFyIGM9dyhlKSxzPVIoZSx0LHZvaWQgMCksdj0hMDt0cnl7Zj1pKHMpLHY9ITF9ZmluYWxseXt2P08oYyk6ZyhjKX1yZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZiBpbnN0YW5jZW9mIFByb21pc2U/Zi50aGVuKChmdW5jdGlvbihuKXtyZXR1cm4gaihjLG8pLFAobixjKX0pLChmdW5jdGlvbihuKXt0aHJvdyBPKGMpLG59KSk6KGooYyxvKSxQKGYsYykpfWlmKCF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCl7aWYoKGY9aSh0KSk9PT1IKXJldHVybjtyZXR1cm4gdm9pZCAwPT09ZiYmKGY9dCksZS5GJiZkKGYsITApLGZ9bigyMSx0KX0sdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24obix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP2Z1bmN0aW9uKHQpe2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkocj4xP3ItMTowKSxvPTE7bzxyO28rKylpW28tMV09YXJndW1lbnRzW29dO3JldHVybiBlLnByb2R1Y2VXaXRoUGF0Y2hlcyh0LChmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh2b2lkIDAsW3RdLmNvbmNhdChpKSl9KSl9OltlLnByb2R1Y2Uobix0LChmdW5jdGlvbihuLHQpe3I9bixpPXR9KSkscixpXTt2YXIgcixpfSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXQ/dm9pZCAwOnQudXNlUHJveGllcykmJnRoaXMuc2V0VXNlUHJveGllcyh0LnVzZVByb3hpZXMpLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dC5hdXRvRnJlZXplKSYmdGhpcy5zZXRBdXRvRnJlZXplKHQuYXV0b0ZyZWV6ZSl9dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7cihlKXx8big4KSx0KGUpJiYoZT1EKGUpKTt2YXIgaT13KHRoaXMpLG89Uih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLGcoaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbih0LHIpe3ZhciBlPXQmJnRbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8big5KSxlLkkmJm4oMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSxyKSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKG4pe3RoaXMuRj1ufSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24odCl7dCYmIUImJm4oMjApLHRoaXMuZz10fSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbihuLHIpe3ZhciBlO2ZvcihlPXIubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXJbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7bj1pLnZhbHVlO2JyZWFrfX12YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiB0KG4pP28obixyKTp0aGlzLnByb2R1Y2UobiwoZnVuY3Rpb24obil7cmV0dXJuIG8obixyLnNsaWNlKGUrMSkpfSkpfSxlfSgpLGFuPW5ldyB1bixmbj1hbi5wcm9kdWNlLGNuPWFuLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKGFuKSxzbj1hbi5zZXRBdXRvRnJlZXplLmJpbmQoYW4pLHZuPWFuLnNldFVzZVByb3hpZXMuYmluZChhbikscG49YW4uYXBwbHlQYXRjaGVzLmJpbmQoYW4pLGxuPWFuLmNyZWF0ZURyYWZ0LmJpbmQoYW4pLGRuPWFuLmZpbmlzaERyYWZ0LmJpbmQoYW4pO2V4cG9ydCBkZWZhdWx0IGZuO2V4cG9ydHt1biBhcyBJbW1lcixwbiBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLGxuIGFzIGNyZWF0ZURyYWZ0LEQgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsTiBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsVCBhcyBlbmFibGVQYXRjaGVzLGRuIGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLHQgYXMgaXNEcmFmdCxyIGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLGZuIGFzIHByb2R1Y2UsY24gYXMgcHJvZHVjZVdpdGhQYXRjaGVzLHNuIGFzIHNldEF1dG9GcmVlemUsdm4gYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iLCJmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBwcmV2LCBuZXh0KSB7XG4gIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRG8gdGhpcyBpbiBhIGZvciBsb29wIChhbmQgbm90IGEgYGZvckVhY2hgIG9yIGFuIGBldmVyeWApIHNvIHdlIGNhbiBkZXRlcm1pbmUgZXF1YWxpdHkgYXMgZmFzdCBhcyBwb3NzaWJsZS5cbiAgdmFyIGxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbGl0eUNoZWNrKHByZXZbaV0sIG5leHRbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jKSB7XG4gIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RXF1YWxpdHlDaGVjaztcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgbGFzdEFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICB2YXIgbGVuZ3RoID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgYW5kIG11dGF0ZSBhIGxvY2FsIGxpc3Qgb2YgcGFyYW1zIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IucmVzdWx0RnVuYyA9IHJlc3VsdEZ1bmM7XG4gICAgc2VsZWN0b3IuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycykge1xuICB2YXIgc2VsZWN0b3JDcmVhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjcmVhdGVTZWxlY3RvcjtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKCd3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAnICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIHZhbHVlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG5cbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMic7XG5cbi8qKlxuICogQWRhcHRlZCBmcm9tIFJlYWN0OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2hhcmVkL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UuanNcbiAqXG4gKiBEbyBub3QgcmVxdWlyZSB0aGlzIG1vZHVsZSBkaXJlY3RseSEgVXNlIG5vcm1hbCB0aHJvdyBlcnJvciBjYWxscy4gVGhlc2UgbWVzc2FnZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGVycm9yIGNvZGVzXG4gKiBkdXJpbmcgYnVpbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVkdXggZXJyb3IgI1wiICsgY29kZSArIFwiOyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT1cIiArIGNvZGUgKyBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciBcIiArICd1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzLiAnO1xufVxuXG4vLyBJbmxpbmVkIHZlcnNpb24gb2YgdGhlIGBzeW1ib2wtb2JzZXJ2YWJsZWAgcG9seWZpbGxcbnZhciAkJG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJztcbn0pKCk7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG5mdW5jdGlvbiBtaW5pS2luZE9mKHZhbCkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHJldHVybiAndW5kZWZpbmVkJztcbiAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgaWYgKGlzRGF0ZSh2YWwpKSByZXR1cm4gJ2RhdGUnO1xuICBpZiAoaXNFcnJvcih2YWwpKSByZXR1cm4gJ2Vycm9yJztcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgc3dpdGNoIChjb25zdHJ1Y3Rvck5hbWUpIHtcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgIGNhc2UgJ1dlYWtNYXAnOlxuICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgIGNhc2UgJ01hcCc6XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH0gLy8gb3RoZXJcblxuXG4gIHJldHVybiB0eXBlLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB2YWwubWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgdmFsLnRvRGF0ZVN0cmluZyA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLmdldERhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIHZhciB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJmdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufTtcclxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcclxudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcclxudmFyIF9fZ2V0T3duUHJvcERlc2NzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XHJcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcclxudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbnZhciBfX3Byb3BJc0VudW0gPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG52YXIgX19kZWZOb3JtYWxQcm9wID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlOyB9O1xyXG52YXIgX19zcHJlYWRWYWx1ZXMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBiIHx8IChiID0ge30pKVxyXG4gICAgICAgIGlmIChfX2hhc093blByb3AuY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgaWYgKF9fZ2V0T3duUHJvcFN5bWJvbHMpXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IF9fZ2V0T3duUHJvcFN5bWJvbHMoYik7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wID0gX2JbX2ldO1xyXG4gICAgICAgICAgICBpZiAoX19wcm9wSXNFbnVtLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbnZhciBfX3NwcmVhZFByb3BzID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIF9fZGVmUHJvcHMoYSwgX19nZXRPd25Qcm9wRGVzY3MoYikpOyB9O1xyXG52YXIgX19hc3luYyA9IGZ1bmN0aW9uIChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdmFyIGZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciByZWplY3RlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc3RlcCA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH07XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8vIHNyYy9pbmRleC50c1xyXG5pbXBvcnQgeyBlbmFibGVFUzUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcInJlZHV4XCI7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgZGVmYXVsdDIsIGN1cnJlbnQgYXMgY3VycmVudDIsIGZyZWV6ZSwgb3JpZ2luYWwsIGlzRHJhZnQgYXMgaXNEcmFmdDQgfSBmcm9tIFwiaW1tZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgYXMgY3JlYXRlU2VsZWN0b3IyIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbi8vIHNyYy9jcmVhdGVEcmFmdFNhZmVTZWxlY3Rvci50c1xyXG5pbXBvcnQgeyBjdXJyZW50LCBpc0RyYWZ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSBcInJlc2VsZWN0XCI7XHJcbnZhciBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBzZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgYXJncyk7XHJcbiAgICB2YXIgd3JhcHBlZFNlbGVjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3QgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtpc0RyYWZ0KHZhbHVlKSA/IGN1cnJlbnQodmFsdWUpIDogdmFsdWVdLCByZXN0KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHdyYXBwZWRTZWxlY3RvcjtcclxufTtcclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21wb3NlIGFzIGNvbXBvc2UyLCBhcHBseU1pZGRsZXdhcmUsIGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG4vLyBzcmMvZGV2dG9vbHNFeHRlbnNpb24udHNcclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xyXG52YXIgY29tcG9zZVdpdGhEZXZUb29scyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgcmV0dXJuIGNvbXBvc2U7XHJcbiAgICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgZGV2VG9vbHNFbmhhbmNlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm9vcCkge1xyXG4gICAgICAgIHJldHVybiBub29wO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2lzUGxhaW5PYmplY3QudHNcclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSB2YWx1ZTtcclxuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IHByb3RvO1xyXG59XHJcbi8vIHNyYy9nZXREZWZhdWx0TWlkZGxld2FyZS50c1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG4vLyBzcmMvdXRpbHMudHNcclxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XHJcbiAgICB2YXIgZWxhcHNlZCA9IDA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbnZhciBNaWRkbGV3YXJlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWlkZGxld2FyZUFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWRkbGV3YXJlQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcclxuICAgIH07XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnJbMF0uY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbn0oQXJyYXkpKTtcclxuLy8gc3JjL2ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG52YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG52YXIgcHJlZml4ID0gXCJJbnZhcmlhbnQgZmFpbGVkXCI7XHJcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgXCJcIikpO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIsIGluZGVudCwgZGVjeWNsZXIpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlciksIGluZGVudCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSB7XHJcbiAgICB2YXIgc3RhY2sgPSBbXSwga2V5cyA9IFtdO1xyXG4gICAgaWYgKCFkZWN5Y2xlcilcclxuICAgICAgICBkZWN5Y2xlciA9IGZ1bmN0aW9uIChfLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH5dXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIjtcclxuICAgICAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY3ljbGVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIgPT0gbnVsbCA/IHZhbHVlIDogc2VyaWFsaXplci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0ltbXV0YWJsZURlZmF1bHQodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcclxuICAgIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmosIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciB0cmFja2VkID0geyB2YWx1ZTogb2JqIH07XHJcbiAgICBpZiAoIWlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhY2tlZDtcclxufVxyXG5mdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkgeyBzYW1lUGFyZW50UmVmID0gZmFsc2U7IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdm9pZCAwO1xyXG4gICAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiB0cnVlLCBwYXRoOiBwYXRoIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbiAgICB9XHJcbiAgICB2YXIga2V5c1RvRGV0ZWN0ID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBrZXlzVG9EZXRlY3QpIHtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYiA9IG9wdGlvbnMuaXNJbW11dGFibGUsIGlzSW1tdXRhYmxlID0gX2IgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9iLCBpZ25vcmVkUGF0aHMgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgX2MgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2MgPT09IHZvaWQgMCA/IDMyIDogX2MsIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xyXG4gICAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcclxuICAgIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgdmFyIGdldFN0YXRlID0gX2IuZ2V0U3RhdGU7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XHJcbiAgICAgICAgfTsgfTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xyXG4gICAgcmV0dXJuIHR5cGUgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsID09PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocykge1xyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHsgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluOyB9XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGVudHJpZXNfMSA9IGVudHJpZXM7IF9pIDwgZW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBfYiA9IGVudHJpZXNfMVtfaV0sIGtleSA9IF9iWzBdLCBuZXN0ZWRWYWx1ZSA9IF9iWzFdO1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzICYmIGlnbm9yZWRQYXRocy5pbmRleE9mKG5lc3RlZFBhdGgpID49IDApIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYiA9IG9wdGlvbnMuaXNTZXJpYWxpemFibGUsIGlzU2VyaWFsaXphYmxlID0gX2IgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfYiwgZ2V0RW50cmllcyA9IG9wdGlvbnMuZ2V0RW50cmllcywgX2MgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25zLCBpZ25vcmVkQWN0aW9ucyA9IF9jID09PSB2b2lkIDAgPyBbXSA6IF9jLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLCBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfZCA9PT0gdm9pZCAwID8gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0gOiBfZCwgX2UgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgaWdub3JlZFBhdGhzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9mID09PSB2b2lkIDAgPyAzMiA6IF9mLCBfZyA9IG9wdGlvbnMuaWdub3JlU3RhdGUsIGlnbm9yZVN0YXRlID0gX2cgPT09IHZvaWQgMCA/IGZhbHNlIDogX2c7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTsgfTsgfTtcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJib29sZWFuXCI7XHJcbn1cclxuZnVuY3Rpb24gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYiA9IG9wdGlvbnMudGh1bmssIHRodW5rID0gX2IgPT09IHZvaWQgMCA/IHRydWUgOiBfYiwgX2MgPSBvcHRpb25zLmltbXV0YWJsZUNoZWNrLCBpbW11dGFibGVDaGVjayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjaywgc2VyaWFsaXphYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kO1xyXG4gICAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcclxuICAgIGlmICh0aHVuaykge1xyXG4gICAgICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcclxufVxyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxudmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcclxuICAgIHZhciBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCk7XHJcbiAgICB2YXIgX2IgPSBvcHRpb25zIHx8IHt9LCBfYyA9IF9iLnJlZHVjZXIsIHJlZHVjZXIgPSBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MsIF9kID0gX2IubWlkZGxld2FyZSwgbWlkZGxld2FyZSA9IF9kID09PSB2b2lkIDAgPyBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSA6IF9kLCBfZSA9IF9iLmRldlRvb2xzLCBkZXZUb29scyA9IF9lID09PSB2b2lkIDAgPyB0cnVlIDogX2UsIF9mID0gX2IucHJlbG9hZGVkU3RhdGUsIHByZWxvYWRlZFN0YXRlID0gX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLCBfZyA9IF9iLmVuaGFuY2VycywgZW5oYW5jZXJzID0gX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nO1xyXG4gICAgdmFyIHJvb3RSZWR1Y2VyO1xyXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICByb290UmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHJlZHVjZXIpKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZTtcclxuICAgIGlmICh0eXBlb2YgZmluYWxNaWRkbGV3YXJlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBmaW5hbE1pZGRsZXdhcmUgPSBmaW5hbE1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKTtcclxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuIHVzaW5nIGEgbWlkZGxld2FyZSBidWlsZGVyIGZ1bmN0aW9uLCBhbiBhcnJheSBvZiBtaWRkbGV3YXJlIG11c3QgYmUgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFJU19QUk9EVUNUSU9OICYmIGZpbmFsTWlkZGxld2FyZS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiB0eXBlb2YgaXRlbSAhPT0gXCJmdW5jdGlvblwiOyB9KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlLmFwcGx5KHZvaWQgMCwgZmluYWxNaWRkbGV3YXJlKTtcclxuICAgIHZhciBmaW5hbENvbXBvc2UgPSBjb21wb3NlMjtcclxuICAgIGlmIChkZXZUb29scykge1xyXG4gICAgICAgIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VXaXRoRGV2VG9vbHMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT05cclxuICAgICAgICB9LCB0eXBlb2YgZGV2VG9vbHMgPT09IFwib2JqZWN0XCIgJiYgZGV2VG9vbHMpKTtcclxuICAgIH1cclxuICAgIHZhciBzdG9yZUVuaGFuY2VycyA9IFttaWRkbGV3YXJlRW5oYW5jZXJdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gX19zcHJlYWRBcnJheShbbWlkZGxld2FyZUVuaGFuY2VyXSwgZW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBlbmhhbmNlcnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIHZhciBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlLmFwcGx5KHZvaWQgMCwgc3RvcmVFbmhhbmNlcnMpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgY29tcG9zZWRFbmhhbmNlcik7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZUFjdGlvbi50c1xyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xyXG4gICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcmVBY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAoIXByZXBhcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWRcclxuICAgICAgICAgICAgfSwgXCJtZXRhXCIgaW4gcHJlcGFyZWQgJiYgeyBtZXRhOiBwcmVwYXJlZC5tZXRhIH0pLCBcImVycm9yXCIgaW4gcHJlcGFyZWQgJiYgeyBlcnJvcjogcHJlcGFyZWQuZXJyb3IgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IGFyZ3NbMF0gfTtcclxuICAgIH1cclxuICAgIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlwiICsgdHlwZTsgfTtcclxuICAgIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGU7XHJcbiAgICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnR5cGUgPT09IHR5cGU7IH07XHJcbiAgICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcclxufVxyXG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcclxuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSBcInN0cmluZ1wiICYmIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSk7XHJcbn1cclxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcclxuICAgIHJldHVybiBbXCJ0eXBlXCIsIFwicGF5bG9hZFwiLCBcImVycm9yXCIsIFwibWV0YVwiXS5pbmRleE9mKGtleSkgPiAtMTtcclxufVxyXG5mdW5jdGlvbiBnZXRUeXBlKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgIHJldHVybiBcIlwiICsgYWN0aW9uQ3JlYXRvcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5pbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDIsIGlzRHJhZnRhYmxlIH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXIoaW5pdGlhbFN0YXRlLCBtYXBPckJ1aWxkZXJDYWxsYmFjaywgYWN0aW9uTWF0Y2hlcnMsIGRlZmF1bHRDYXNlUmVkdWNlcikge1xyXG4gICAgaWYgKGFjdGlvbk1hdGNoZXJzID09PSB2b2lkIDApIHsgYWN0aW9uTWF0Y2hlcnMgPSBbXTsgfVxyXG4gICAgdmFyIF9iID0gdHlwZW9mIG1hcE9yQnVpbGRlckNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgPyBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhtYXBPckJ1aWxkZXJDYWxsYmFjaykgOiBbbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdLCBhY3Rpb25zTWFwID0gX2JbMF0sIGZpbmFsQWN0aW9uTWF0Y2hlcnMgPSBfYlsxXSwgZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIgPSBfYlsyXTtcclxuICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGUgPSBjcmVhdGVOZXh0U3RhdGUoaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7IHN0YXRlID0gZnJvemVuSW5pdGlhbFN0YXRlOyB9XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VycyA9IF9fc3ByZWFkQXJyYXkoW1xyXG4gICAgICAgICAgICBhY3Rpb25zTWFwW2FjdGlvbi50eXBlXVxyXG4gICAgICAgIF0sIGZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hlciA9IF9iLm1hdGNoZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICB2YXIgcmVkdWNlciA9IF9iLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0RyYWZ0YWJsZShwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihwcmV2aW91c1N0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZShwcmV2aW91c1N0YXRlLCBmdW5jdGlvbiAoZHJhZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgIH0sIHN0YXRlKTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVNsaWNlLnRzXHJcbmZ1bmN0aW9uIGdldFR5cGUyKHNsaWNlLCBhY3Rpb25LZXkpIHtcclxuICAgIHJldHVybiBzbGljZSArIFwiL1wiICsgYWN0aW9uS2V5O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcclxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLCBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImBuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2VcIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVkdWNlcnMgPSBvcHRpb25zLnJlZHVjZXJzIHx8IHt9O1xyXG4gICAgdmFyIF9iID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfYyA9IF9iWzBdLCBleHRyYVJlZHVjZXJzID0gX2MgPT09IHZvaWQgMCA/IHt9IDogX2MsIF9kID0gX2JbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gX2JbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZTtcclxuICAgIHZhciByZWR1Y2VyTmFtZXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUgPSB7fTtcclxuICAgIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xyXG4gICAgdmFyIGFjdGlvbkNyZWF0b3JzID0ge307XHJcbiAgICByZWR1Y2VyTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocmVkdWNlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUgPSByZWR1Y2Vyc1tyZWR1Y2VyTmFtZV07XHJcbiAgICAgICAgdmFyIHR5cGUgPSBnZXRUeXBlMihuYW1lLCByZWR1Y2VyTmFtZSk7XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHZhciBwcmVwYXJlQ2FsbGJhY2s7XHJcbiAgICAgICAgaWYgKFwicmVkdWNlclwiIGluIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcclxuICAgICAgICAgICAgcHJlcGFyZUNhbGxiYWNrID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucHJlcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW3JlZHVjZXJOYW1lXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlW3R5cGVdID0gY2FzZVJlZHVjZXI7XHJcbiAgICAgICAgYWN0aW9uQ3JlYXRvcnNbcmVkdWNlck5hbWVdID0gcHJlcGFyZUNhbGxiYWNrID8gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVDYWxsYmFjaykgOiBjcmVhdGVBY3Rpb24odHlwZSk7XHJcbiAgICB9KTtcclxuICAgIHZhciBmaW5hbENhc2VSZWR1Y2VycyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBleHRyYVJlZHVjZXJzKSwgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUpO1xyXG4gICAgdmFyIHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZmluYWxDYXNlUmVkdWNlcnMsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIHJlZHVjZXI6IHJlZHVjZXIsXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvZW50aXR5X3N0YXRlLnRzXHJcbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBlbnRpdGllczoge31cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcclxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZShhZGRpdGlvbmFsU3RhdGUpIHtcclxuICAgICAgICBpZiAoYWRkaXRpb25hbFN0YXRlID09PSB2b2lkIDApIHsgYWRkaXRpb25hbFN0YXRlID0ge307IH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihnZXRJbml0aWFsRW50aXR5U3RhdGUoKSwgYWRkaXRpb25hbFN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX3NlbGVjdG9ycy50c1xyXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JzKHNlbGVjdFN0YXRlKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuaWRzOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuZW50aXRpZXM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEFsbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgc2VsZWN0RW50aXRpZXMsIGZ1bmN0aW9uIChpZHMsIGVudGl0aWVzKSB7IHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9KTsgfSk7XHJcbiAgICAgICAgdmFyIHNlbGVjdElkID0gZnVuY3Rpb24gKF8sIGlkKSB7IHJldHVybiBpZDsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QnlJZCA9IGZ1bmN0aW9uIChlbnRpdGllcywgaWQpIHsgcmV0dXJuIGVudGl0aWVzW2lkXTsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0VG90YWwgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RJZHMsIGZ1bmN0aW9uIChpZHMpIHsgcmV0dXJuIGlkcy5sZW5ndGg7IH0pO1xyXG4gICAgICAgIGlmICghc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdElkczogc2VsZWN0SWRzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsOiBzZWxlY3RBbGwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RUb3RhbDogc2VsZWN0VG90YWwsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdElkczogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdElkcyksXHJcbiAgICAgICAgICAgIHNlbGVjdEVudGl0aWVzOiBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsXHJcbiAgICAgICAgICAgIHNlbGVjdEFsbDogY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXHJcbiAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0VG90YWwpLFxyXG4gICAgICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMsIHNlbGVjdElkLCBzZWxlY3RCeUlkKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBnZXRTZWxlY3RvcnM6IGdldFNlbGVjdG9ycyB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zdGF0ZV9hZGFwdGVyLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUyLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDMgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHZhciBvcGVyYXRvciA9IGNyZWF0ZVN0YXRlT3BlcmF0b3IoZnVuY3Rpb24gKF8sIHN0YXRlKSB7IHJldHVybiBtdXRhdG9yKHN0YXRlKTsgfSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB2b2lkIDApO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZzIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzRlNBKGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcnVuTXV0YXRvciA9IGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcucGF5bG9hZCwgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRvcihhcmcsIGRyYWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGlzRHJhZnQzKHN0YXRlKSkge1xyXG4gICAgICAgICAgICBydW5NdXRhdG9yKHN0YXRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIoc3RhdGUsIHJ1bk11dGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3V0aWxzLnRzXHJcbmZ1bmN0aW9uIHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCkge1xyXG4gICAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIGtleSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGVudGl0eSBwYXNzZWQgdG8gdGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24gcmV0dXJuZWQgdW5kZWZpbmVkLlwiLCBcIllvdSBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB5b3VyIG93biBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uLlwiLCBcIlRoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOlwiLCBlbnRpdHksIFwiVGhlIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb246XCIsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVFbnRpdGllc0FycmF5KGVudGl0aWVzKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XHJcbiAgICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRpdGllcztcclxufVxyXG5mdW5jdGlvbiBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpIHtcclxuICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICB2YXIgYWRkZWQgPSBbXTtcclxuICAgIHZhciB1cGRhdGVkID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzEgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBuZXdFbnRpdGllc18xW19pXTtcclxuICAgICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmIChpZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICB1cGRhdGVkLnB1c2goeyBpZDogaWQsIGNoYW5nZXM6IGVudGl0eSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZGVkLnB1c2goZW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW2FkZGVkLCB1cGRhdGVkXTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdW5zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCkge1xyXG4gICAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmlkcy5wdXNoKGtleSk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18yID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzJbX2ldO1xyXG4gICAgICAgICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xyXG4gICAgICAgIGlmICghKGtleSBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNba2V5XSA9IGVudGl0eTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdFbnRpdGllc18zID0gbmV3RW50aXRpZXM7IF9pIDwgbmV3RW50aXRpZXNfMy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzNbX2ldO1xyXG4gICAgICAgICAgICBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xyXG4gICAgICAgICAgICAgICAgZGlkTXV0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChkaWRNdXRhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVBbGxNdXRhYmx5KHN0YXRlKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwge1xyXG4gICAgICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgICAgICBlbnRpdGllczoge31cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbDIgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwyLCB1cGRhdGUuY2hhbmdlcyk7XHJcbiAgICAgICAgdmFyIG5ld0tleSA9IHNlbGVjdElkVmFsdWUodXBkYXRlZCwgc2VsZWN0SWQpO1xyXG4gICAgICAgIHZhciBoYXNOZXdLZXkgPSBuZXdLZXkgIT09IHVwZGF0ZS5pZDtcclxuICAgICAgICBpZiAoaGFzTmV3S2V5KSB7XHJcbiAgICAgICAgICAgIGtleXNbdXBkYXRlLmlkXSA9IG5ld0tleTtcclxuICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzW25ld0tleV0gPSB1cGRhdGVkO1xyXG4gICAgICAgIHJldHVybiBoYXNOZXdLZXk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG5ld0tleXMgPSB7fTtcclxuICAgICAgICB2YXIgdXBkYXRlc1BlckVudGl0eSA9IHt9O1xyXG4gICAgICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdXBkYXRlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXM6IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwpLCB1cGRhdGUuY2hhbmdlcylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZUVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7IHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpOyB9KS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICBpZiAoZGlkTXV0YXRlSWRzKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gbmV3S2V5c1tpZF0gfHwgaWQ7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgX2IgPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpLCBhZGRlZCA9IF9iWzBdLCB1cGRhdGVkID0gX2JbMV07XHJcbiAgICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZUFsbDogY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKHJlbW92ZUFsbE11dGFibHkpLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9zb3J0ZWRfc3RhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnQpIHtcclxuICAgIHZhciBfYiA9IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSwgcmVtb3ZlT25lID0gX2IucmVtb3ZlT25lLCByZW1vdmVNYW55ID0gX2IucmVtb3ZlTWFueSwgcmVtb3ZlQWxsID0gX2IucmVtb3ZlQWxsO1xyXG4gICAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHZhciBtb2RlbHMgPSBuZXdFbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24gKG1vZGVsKSB7IHJldHVybiAhKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSBpbiBzdGF0ZS5lbnRpdGllcyk7IH0pO1xyXG4gICAgICAgIGlmIChtb2RlbHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIG1lcmdlKG1vZGVscywgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBzZXRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBpZiAobmV3RW50aXRpZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIG1lcmdlKG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgc3RhdGUuaWRzID0gW107XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZVVwZGF0ZWRNb2RlbChtb2RlbHMsIHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICBpZiAoISh1cGRhdGUuaWQgaW4gc3RhdGUuZW50aXRpZXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgbW9kZWxzLnB1c2godXBkYXRlZCk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbW9kZWxzID0gW107XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VVcGRhdGVkTW9kZWwobW9kZWxzLCB1cGRhdGUsIHN0YXRlKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgX2IgPSBzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzKG5ld0VudGl0aWVzLCBzZWxlY3RJZCwgc3RhdGUpLCBhZGRlZCA9IF9iWzBdLCB1cGRhdGVkID0gX2JbMV07XHJcbiAgICAgICAgdXBkYXRlTWFueU11dGFibHkodXBkYXRlZCwgc3RhdGUpO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KGFkZGVkLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhcmVBcnJheXNFcXVhbChhLCBiKSB7XHJcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFbaV0gPT09IGJbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtZXJnZShtb2RlbHMsIHN0YXRlKSB7XHJcbiAgICAgICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmVudGl0aWVzW3NlbGVjdElkKG1vZGVsKV0gPSBtb2RlbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgYWxsRW50aXRpZXMgPSBPYmplY3QudmFsdWVzKHN0YXRlLmVudGl0aWVzKTtcclxuICAgICAgICBhbGxFbnRpdGllcy5zb3J0KHNvcnQpO1xyXG4gICAgICAgIHZhciBuZXdTb3J0ZWRJZHMgPSBhbGxFbnRpdGllcy5tYXAoc2VsZWN0SWQpO1xyXG4gICAgICAgIHZhciBpZHMgPSBzdGF0ZS5pZHM7XHJcbiAgICAgICAgaWYgKCFhcmVBcnJheXNFcXVhbChpZHMsIG5ld1NvcnRlZElkcykpIHtcclxuICAgICAgICAgICAgc3RhdGUuaWRzID0gbmV3U29ydGVkSWRzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlT25lOiByZW1vdmVPbmUsXHJcbiAgICAgICAgcmVtb3ZlTWFueTogcmVtb3ZlTWFueSxcclxuICAgICAgICByZW1vdmVBbGw6IHJlbW92ZUFsbCxcclxuICAgICAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9jcmVhdGVfYWRhcHRlci50c1xyXG5mdW5jdGlvbiBjcmVhdGVFbnRpdHlBZGFwdGVyKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2IgPSBfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc29ydENvbXBhcmVyOiBmYWxzZSxcclxuICAgICAgICBzZWxlY3RJZDogZnVuY3Rpb24gKGluc3RhbmNlKSB7IHJldHVybiBpbnN0YW5jZS5pZDsgfVxyXG4gICAgfSwgb3B0aW9ucyksIHNlbGVjdElkID0gX2Iuc2VsZWN0SWQsIHNvcnRDb21wYXJlciA9IF9iLnNvcnRDb21wYXJlcjtcclxuICAgIHZhciBzdGF0ZUZhY3RvcnkgPSBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCk7XHJcbiAgICB2YXIgc2VsZWN0b3JzRmFjdG9yeSA9IGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKTtcclxuICAgIHZhciBzdGF0ZUFkYXB0ZXIgPSBzb3J0Q29tcGFyZXIgPyBjcmVhdGVTb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQsIHNvcnRDb21wYXJlcikgOiBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCk7XHJcbiAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgIHNlbGVjdElkOiBzZWxlY3RJZCxcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IHNvcnRDb21wYXJlclxyXG4gICAgfSwgc3RhdGVGYWN0b3J5KSwgc2VsZWN0b3JzRmFjdG9yeSksIHN0YXRlQWRhcHRlcik7XHJcbn1cclxuLy8gc3JjL25hbm9pZC50c1xyXG52YXIgdXJsQWxwaGFiZXQgPSBcIk1vZHVsZVN5bWJoYXNPd25Qci0wMTIzNDU2Nzg5QUJDREVGR0hOUlZmZ2N0aVV2el9LcVlUSmtMeHBaWElqUVdcIjtcclxudmFyIG5hbm9pZCA9IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7IHNpemUgPSAyMTsgfVxyXG4gICAgdmFyIGlkID0gXCJcIjtcclxuICAgIHZhciBpID0gc2l6ZTtcclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICBpZCArPSB1cmxBbHBoYWJldFtNYXRoLnJhbmRvbSgpICogNjQgfCAwXTtcclxuICAgIH1cclxuICAgIHJldHVybiBpZDtcclxufTtcclxuLy8gc3JjL2NyZWF0ZUFzeW5jVGh1bmsudHNcclxudmFyIGNvbW1vblByb3BlcnRpZXMgPSBbXHJcbiAgICBcIm5hbWVcIixcclxuICAgIFwibWVzc2FnZVwiLFxyXG4gICAgXCJzdGFja1wiLFxyXG4gICAgXCJjb2RlXCJcclxuXTtcclxudmFyIFJlamVjdFdpdGhWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlamVjdFdpdGhWYWx1ZShwYXlsb2FkLCBtZXRhKSB7XHJcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcclxuICAgICAgICB0aGlzLm1ldGEgPSBtZXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlamVjdFdpdGhWYWx1ZTtcclxufSgpKTtcclxudmFyIEZ1bGZpbGxXaXRoTWV0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZ1bGZpbGxXaXRoTWV0YShwYXlsb2FkLCBtZXRhKSB7XHJcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcclxuICAgICAgICB0aGlzLm1ldGEgPSBtZXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEZ1bGZpbGxXaXRoTWV0YTtcclxufSgpKTtcclxudmFyIG1pbmlTZXJpYWxpemVFcnJvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIHZhciBzaW1wbGVFcnJvciA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29tbW9uUHJvcGVydGllc18xID0gY29tbW9uUHJvcGVydGllczsgX2kgPCBjb21tb25Qcm9wZXJ0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IGNvbW1vblByb3BlcnRpZXNfMVtfaV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcGVydHldID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNpbXBsZUVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgbWVzc2FnZTogU3RyaW5nKHZhbHVlKSB9O1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgZnVsZmlsbGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9mdWxmaWxsZWRcIiwgZnVuY3Rpb24gKHBheWxvYWQsIHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcImZ1bGZpbGxlZFwiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciBwZW5kaW5nID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9wZW5kaW5nXCIsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiB2b2lkIDAsXHJcbiAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcInBlbmRpbmdcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9KTsgfSk7XHJcbiAgICB2YXIgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3JlamVjdGVkXCIsIGZ1bmN0aW9uIChlcnJvciwgcmVxdWVzdElkLCBhcmcsIHBheWxvYWQsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBlcnJvcjogKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemVFcnJvciB8fCBtaW5pU2VyaWFsaXplRXJyb3IpKGVycm9yIHx8IFwiUmVqZWN0ZWRcIiksXHJcbiAgICAgICAgbWV0YTogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbWV0YSB8fCB7fSksIHtcclxuICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICByZWplY3RlZFdpdGhWYWx1ZTogISFwYXlsb2FkLFxyXG4gICAgICAgICAgICByZXF1ZXN0U3RhdHVzOiBcInJlamVjdGVkXCIsXHJcbiAgICAgICAgICAgIGFib3J0ZWQ6IChlcnJvciA9PSBudWxsID8gdm9pZCAwIDogZXJyb3IubmFtZSkgPT09IFwiQWJvcnRFcnJvclwiLFxyXG4gICAgICAgICAgICBjb25kaXRpb246IChlcnJvciA9PSBudWxsID8gdm9pZCAwIDogZXJyb3IubmFtZSkgPT09IFwiQ29uZGl0aW9uRXJyb3JcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9KTsgfSk7XHJcbiAgICB2YXIgZGlzcGxheWVkV2FybmluZyA9IGZhbHNlO1xyXG4gICAgdmFyIEFDID0gdHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIiA/IEFib3J0Q29udHJvbGxlciA6IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpZ25hbCA9IHtcclxuICAgICAgICAgICAgICAgIGFib3J0ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25hYm9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZGlzcGxheWVkV2FybmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlRoaXMgcGxhdGZvcm0gZG9lcyBub3QgaW1wbGVtZW50IEFib3J0Q29udHJvbGxlci4gXFxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBBYm9ydENvbnRyb2xsZXIgdG8gcmVhY3QgdG8gYGFib3J0YCBldmVudHMsIHBsZWFzZSBjb25zaWRlciBpbXBvcnRpbmcgYSBwb2x5ZmlsbCBsaWtlICdhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwvZGlzdC9hYm9ydGNvbnRyb2xsZXItcG9seWZpbGwtb25seScuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgIH0oKSk7XHJcbiAgICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAoKF9hID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgIT0gbnVsbCA/IF9hIDogbmFub2lkKSgpO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gbmV3IEFDKCk7XHJcbiAgICAgICAgICAgIHZhciBhYm9ydFJlYXNvbjtcclxuICAgICAgICAgICAgdmFyIGFib3J0ZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KHsgbmFtZTogXCJBYm9ydEVycm9yXCIsIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8IFwiQWJvcnRlZFwiIH0pOyB9KTsgfSk7XHJcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydFJlYXNvbiA9IHJlYXNvbjtcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2EyLCBmaW5hbEFjdGlvbiwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDIsICwgM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29uZGl0aW9uICYmIG9wdGlvbnMuY29uZGl0aW9uKGFyZywgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb25kaXRpb25FcnJvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBYm9ydGVkIGR1ZSB0byBjb25kaXRpb24gY2FsbGJhY2sgcmV0dXJuaW5nIGZhbHNlLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBlbmRpbmcocmVxdWVzdElkLCBhcmcsIChfYTIgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFBlbmRpbmdNZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbi8vIHNyYy90c0hlbHBlcnMudHNcclxudmFyIGhhc01hdGNoRnVuY3Rpb24gPSBmdW5jdGlvbiAodikge1xyXG4gICAgcmV0dXJuIHYgJiYgdHlwZW9mIHYubWF0Y2ggPT09IFwiZnVuY3Rpb25cIjtcclxufTtcclxuLy8gc3JjL21hdGNoZXJzLnRzXHJcbnZhciBtYXRjaGVzID0gZnVuY3Rpb24gKG1hdGNoZXIsIGFjdGlvbikge1xyXG4gICAgaWYgKGhhc01hdGNoRnVuY3Rpb24obWF0Y2hlcikpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5tYXRjaChhY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gaXNBbnlPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuc29tZShmdW5jdGlvbiAobWF0Y2hlcikgeyByZXR1cm4gbWF0Y2hlcyhtYXRjaGVyLCBhY3Rpb24pOyB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBbGxPZigpIHtcclxuICAgIHZhciBtYXRjaGVycyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBtYXRjaGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlcnMuZXZlcnkoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgdmFsaWRTdGF0dXMpIHtcclxuICAgIGlmICghYWN0aW9uIHx8ICFhY3Rpb24ubWV0YSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgaGFzVmFsaWRSZXF1ZXN0SWQgPSB0eXBlb2YgYWN0aW9uLm1ldGEucmVxdWVzdElkID09PSBcInN0cmluZ1wiO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdFN0YXR1cyA9IHZhbGlkU3RhdHVzLmluZGV4T2YoYWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykgPiAtMTtcclxuICAgIHJldHVybiBoYXNWYWxpZFJlcXVlc3RJZCAmJiBoYXNWYWxpZFJlcXVlc3RTdGF0dXM7XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQXJyYXkoYSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhWzBdID09PSBcImZ1bmN0aW9uXCIgJiYgXCJwZW5kaW5nXCIgaW4gYVswXSAmJiBcImZ1bGZpbGxlZFwiIGluIGFbMF0gJiYgXCJyZWplY3RlZFwiIGluIGFbMF07XHJcbn1cclxuZnVuY3Rpb24gaXNQZW5kaW5nKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1BlbmRpbmcoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5wZW5kaW5nOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJyZWplY3RlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlamVjdGVkKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucmVqZWN0ZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNSZWplY3RlZFdpdGhWYWx1ZSgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhc0ZsYWcgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjdGlvbiAmJiBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtcclxuICAgIH07XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZFdpdGhWYWx1ZSgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQWxsT2YoaXNSZWplY3RlZC5hcHBseSh2b2lkIDAsIGFzeW5jVGh1bmtzKSwgaGFzRmxhZyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0Z1bGZpbGxlZCgpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcImZ1bGZpbGxlZFwiXSk7IH07XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzQXN5bmNUaHVua0FycmF5KGFzeW5jVGh1bmtzKSkge1xyXG4gICAgICAgIHJldHVybiBpc0Z1bGZpbGxlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLmZ1bGZpbGxlZDsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc0FzeW5jVGh1bmtBY3Rpb24oKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJwZW5kaW5nXCIsIFwiZnVsZmlsbGVkXCIsIFwicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNBc3luY1RodW5rQWN0aW9uKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFzeW5jVGh1bmtzXzEgPSBhc3luY1RodW5rczsgX2kgPCBhc3luY1RodW5rc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYXN5bmNUaHVuayA9IGFzeW5jVGh1bmtzXzFbX2ldO1xyXG4gICAgICAgICAgICBtYXRjaGVycy5wdXNoKGFzeW5jVGh1bmsucGVuZGluZywgYXN5bmNUaHVuay5yZWplY3RlZCwgYXN5bmNUaHVuay5mdWxmaWxsZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9pbmRleC50c1xyXG5lbmFibGVFUzUoKTtcclxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBjb25maWd1cmVTdG9yZSwgY3JlYXRlQWN0aW9uLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciwgY3JlYXRlRW50aXR5QWRhcHRlciwgY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCB1bndyYXBSZXN1bHQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuZXhwb3J0IGNvbnN0IGxvYWRpbmdTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogXCJsb2FkaW5nXCIsXG4gIGluaXRpYWxTdGF0ZToge1xuICAgIHZhbHVlOiBmYWxzZSxcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICB0b2dnbGVMb2FkaW5nKHN0YXRlKSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9ICFzdGF0ZS52YWx1ZTtcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB7IHRvZ2dsZUxvYWRpbmcgfSA9IGxvYWRpbmdTbGljZS5hY3Rpb25zO1xuXG5leHBvcnQgZGVmYXVsdCBsb2FkaW5nU2xpY2UucmVkdWNlcjtcbiIsImV4cG9ydCBjb25zdCBmZXRjaEZlZWQgPSAodG9rZW4sIGlkLCBlbGVtZW50KSA9PiB7XG4gIGxldCB1cmw7XG4gIHN3aXRjaCAoZWxlbWVudCkge1xuICAgIGNhc2UgXCJwb3N0XCI6XG4gICAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vcG9zdHMvJHtpZH0vYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJub3RpZmljYXRpb25zXCI6XG4gICAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtpZH0vbm90aWZpY2F0aW9uc2A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hhdHJvb21zXCI6XG4gICAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtpZH0vY2hhdHJvb21zYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ1c2VyXCI6XG4gICAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtpZH0vYDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtpZH0vZmVlZGA7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgbW9kZTogXCJjb3JzXCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgfSkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kRGF0YSA9IChtZXRob2QsIHVybCwgdG9rZW4sIGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZS50YXJnZXQpO1xuICBpZiAodXJsLmluZGV4T2YoXCJjb21tZW50c1wiKSAhPT0gLTEgfHwgdXJsLmluZGV4T2YoXCJjaGF0cm9vbXNcIikgIT09IC0xKSB7XG4gICAgY29uc3QgZW50cmllcyA9IGZvcm1EYXRhLmVudHJpZXMoKTtcbiAgICBmb3JtRGF0YSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICBtb2RlOiBcImNvcnNcIixcbiAgICBtZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgICBib2R5OiBmb3JtRGF0YSxcbiAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgY29uc29sZS5sb2cocmVzKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWFuYWdlTGlrZXMgPSAobWV0aG9kLCBwb3N0SWQsIHRva2VuKSA9PiB7XG4gIHJldHVybiBmZXRjaChgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vcG9zdHMvJHtwb3N0SWR9L2xpa2VzYCwge1xuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIG1ldGhvZCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICB9LFxuICB9KS50aGVuKChyZXMpID0+IHtcbiAgICBjb25zb2xlLmxvZyhyZXMpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxldGVDb21tZW50cyA9ICh0b2tlbiwgcG9zdElkLCBjb21tZW50SWQpID0+IHtcbiAgcmV0dXJuIGZldGNoKFxuICAgIGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS9wb3N0cy8ke3Bvc3RJZH0vY29tbWVudHMvJHtjb21tZW50SWR9YCxcbiAgICB7XG4gICAgICBtb2RlOiBcImNvcnNcIixcbiAgICAgIG1ldGhvZDogXCJkZWxldGVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICB9LFxuICAgIH1cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxldGVQb3N0ID0gKHRva2VuLCBwb3N0SWQsIHVzZXJJZCkgPT4ge1xuICByZXR1cm4gZmV0Y2goXG4gICAgYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3VzZXJzLyR7dXNlcklkfS9wb3N0cy8ke3Bvc3RJZH1gLFxuICAgIHtcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgbWV0aG9kOiBcImRlbGV0ZVwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgIH0sXG4gICAgfVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IG1hbmFnZUNvbW1lbnRMaWtlcyA9ICh0b2tlbiwgcG9zdElkLCBjb21tZW50SWQsIG1ldGhvZCkgPT4ge1xuICByZXR1cm4gZmV0Y2goXG4gICAgYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3Bvc3RzLyR7cG9zdElkfS9jb21tZW50cy8ke2NvbW1lbnRJZH0vbGlrZXNgLFxuICAgIHtcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgbWV0aG9kLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgIH0sXG4gICAgfVxuICApLnRoZW4oKHJlcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IG1hbmFnZU5vdGlmaWNhdGlvbnMgPSAodG9rZW4sIG1ldGhvZCwgdXNlcklkLCBub3RpSWQgPSBcIlwiKSA9PiB7XG4gIGNvbnN0IHVybCA9IGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS91c2Vycy8ke3VzZXJJZH0vbm90aWZpY2F0aW9ucy8ke25vdGlJZH1gO1xuICBmZXRjaCh1cmwsIHtcbiAgICBtZXRob2QsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgfSkudGhlbigocmVzKSA9PiBjb25zb2xlLmxvZyhyZXMpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDaGF0cm9vbSA9ICh0b2tlbiwgdXNlcklkKSA9PiB7XG4gIGNvbnN0IHVybCA9IGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS91c2Vycy8ke3VzZXJJZH0vY2hhdHJvb21zYDtcbiAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgaGFuZGxlRnJpZW5kcyA9ICh0b2tlbiwgbWV0aG9kLCBmaWVsZCwgY3VycklkLCBmcmllbmRJZCkgPT4ge1xuICBsZXQgdXJsO1xuICBjb25zdCBib2R5ID0ge307XG4gIGlmIChmaWVsZCA9PT0gXCJmcmllbmRzXCIpIHtcbiAgICB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtjdXJySWR9L2ZyaWVuZHNgO1xuICAgIGJvZHkuZnJpZW5kSWQgPSBmcmllbmRJZDtcbiAgICBpZiAobWV0aG9kID09PSBcImRlbGV0ZVwiKVxuICAgICAgdXJsID0gYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3VzZXJzLyR7Y3VycklkfS9mcmllbmRzLyR7ZnJpZW5kSWR9YDtcbiAgfVxuICBpZiAoZmllbGQgPT09IFwic2VudF9yZXF1ZXN0c1wiKSB7XG4gICAgdXJsID0gYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3VzZXJzLyR7ZnJpZW5kSWR9L3JlcXVlc3RzYDtcbiAgICBpZiAobWV0aG9kID09PSBcImRlbGV0ZVwiKSBib2R5LnNlbmRlciA9IFwidHJ1ZVwiO1xuICB9XG4gIGlmIChmaWVsZCA9PT0gXCJyZWNlaXZlZF9yZXF1ZXN0c1wiKSB7XG4gICAgdXJsID0gYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3VzZXJzLyR7ZnJpZW5kSWR9L3JlcXVlc3RzYDtcbiAgICBpZiAobWV0aG9kID09PSBcImRlbGV0ZVwiKSBib2R5LnNlbmRlciA9IFwiZmFsc2VcIjtcbiAgfVxuICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgfSkudGhlbihjb25zb2xlLmxvZyk7XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcbmltcG9ydCB7IGhhbmRsZUZyaWVuZHMgfSBmcm9tIFwiLi4vLi4vbGliL2FwaVwiO1xuXG5leHBvcnQgY29uc3Qgc2Vzc2lvblNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcInNlc3Npb25cIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgdmFsdWU6IFwiXCIsXG4gIH0sXG4gIHJlZHVjZXJzOiB7XG4gICAgd3JpdGVTZXNzaW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiZnJlbmRzX3Nlc3Npb25cIiwgSlNPTi5zdHJpbmdpZnkoYWN0aW9uLnBheWxvYWQpKTtcbiAgICAgIHN0YXRlLnZhbHVlID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgICBkZWxldGVTZXNzaW9uKHN0YXRlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImZyZW5kc19zZXNzaW9uXCIsIFwiXCIpO1xuICAgICAgc3RhdGUudmFsdWUgPSBcIlwiO1xuICAgIH0sXG4gICAgc2F2ZVNlc3Npb24oc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUudmFsdWUgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICAgIGFkZFVzZXJHZW5lcmFsKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGhhbmRsZUZyaWVuZHMoXG4gICAgICAgIHN0YXRlLnZhbHVlLnRva2VuLFxuICAgICAgICBcInBvc3RcIixcbiAgICAgICAgYWN0aW9uLnBheWxvYWQuZmllbGQsXG4gICAgICAgIHN0YXRlLnZhbHVlLnVzZXIuX2lkLFxuICAgICAgICBhY3Rpb24ucGF5bG9hZC5lbElkXG4gICAgICApO1xuICAgICAgc3RhdGUudmFsdWUudXNlclthY3Rpb24ucGF5bG9hZC5maWVsZF0ucHVzaChhY3Rpb24ucGF5bG9hZC5lbElkKTtcbiAgICB9LFxuICAgIHJlbW92ZVVzZXJHZW5lcmFsKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIGhhbmRsZUZyaWVuZHMoXG4gICAgICAgIHN0YXRlLnZhbHVlLnRva2VuLFxuICAgICAgICBcImRlbGV0ZVwiLFxuICAgICAgICBhY3Rpb24ucGF5bG9hZC5maWVsZCxcbiAgICAgICAgc3RhdGUudmFsdWUudXNlci5faWQsXG4gICAgICAgIGFjdGlvbi5wYXlsb2FkLmVsSWRcbiAgICAgICk7XG4gICAgICBzdGF0ZS52YWx1ZS51c2VyW2FjdGlvbi5wYXlsb2FkLmZpZWxkXSA9IHN0YXRlLnZhbHVlLnVzZXJbXG4gICAgICAgIGFjdGlvbi5wYXlsb2FkLmZpZWxkXG4gICAgICBdLmZpbHRlcigoZWwpID0+IGVsICE9PSBhY3Rpb24ucGF5bG9hZC5lbElkKTtcbiAgICB9LFxuICAgIHNldEFsbFJlcXVlc3RzKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnZhbHVlLnVzZXIuZnJpZW5kcyA9IGFjdGlvbi5wYXlsb2FkLmZyaWVuZHM7XG4gICAgICBzdGF0ZS52YWx1ZS51c2VyLnNlbnRfcmVxdWVzdHMgPSBhY3Rpb24ucGF5bG9hZC5zZW50X3JlcXVlc3RzO1xuICAgICAgc3RhdGUudmFsdWUudXNlci5yZWNlaXZlZF9yZXF1ZXN0cyA9IGFjdGlvbi5wYXlsb2FkLnJlY2VpdmVkX3JlcXVlc3RzO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHtcbiAgc2F2ZVNlc3Npb24sXG4gIGRlbGV0ZVNlc3Npb24sXG4gIHdyaXRlU2Vzc2lvbixcbiAgYWRkTGlrZSxcbiAgYWRkVXNlckdlbmVyYWwsXG4gIHJlbW92ZVVzZXJHZW5lcmFsLFxuICBzZXRBbGxSZXF1ZXN0cyxcbn0gPSBzZXNzaW9uU2xpY2UuYWN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgc2Vzc2lvblNsaWNlLnJlZHVjZXI7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgYmx1ZSxcbiAgZGFya1JlZCxcbiAgbGlnaHQsXG4gIGxpZ2h0Qmx1ZSxcbiAgbGlnaHRlcixcbiAgbWlsZCxcbiAgbWlsZGVyLFxuICByZWQsXG4gIHdoaXRlLFxufSBmcm9tIFwiLi9jb2xvcnNcIjtcblxuZXhwb3J0IGNvbnN0IFJvdW5kZWRJbnB1dEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGZsZXgtZ3JvdzogMTtcbiAgcGFkZGluZzogMC4zZW0gMWVtO1xuICBib3JkZXItcmFkaXVzOiA1ZW07XG4gIGJhY2tncm91bmQtY29sb3I6ICR7bWlsZGVyfTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMS4yZW07XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBjb2xvcjogJHtsaWdodGVyfTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogZmlsdGVyLCBiYWNrZ3JvdW5kLWNvbG9yO1xuICA6aG92ZXIge1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtsaWdodH07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBSb3VuZGVkSW5wdXRGaWVsZCA9IHN0eWxlZC5pbnB1dGBcbiAgZmxleC1ncm93OiAxO1xuICBwYWRkaW5nOiAwLjlyZW0gMXJlbTtcbiAgYm9yZGVyLXJhZGl1czogNWVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGRlcn07XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogZmlsdGVyLCBiYWNrZ3JvdW5kLWNvbG9yO1xuICA6OnBsYWNlaG9sZGVyLFxuICAmIHtcbiAgICBjb2xvcjogJHtsaWdodGVyfTtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICB9XG4gIDpob3ZlcixcbiAgOmFjdGl2ZSB7XG4gICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2xpZ2h0fTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFJlZ3VsYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICBmbGV4LWdyb3c6IDE7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgcGFkZGluZzogMC41ZW0gMS41ZW07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHt3aGl0ZX07XG4gIGZpbHRlcjogYnJpZ2h0bmVzcygxKTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1vdXQ7XG4gIHRyYW5zaXRpb24tcHJvcGVydHk6IGZpbHRlciwgYmFja2dyb3VuZC1jb2xvcjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgOmhvdmVyIHtcbiAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgIGZpbHRlcjogYnJpZ2h0bmVzcygwLjgpO1xuICB9XG4gICYuaGFsZi1wIHtcbiAgICB3aWR0aDogNTAlO1xuICB9XG4gICYuYmx1ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtibHVlfTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAke2xpZ2h0Qmx1ZX07XG4gICAgY29sb3I6ICR7d2hpdGV9O1xuICAgIDpob3ZlciB7XG4gICAgICBmaWx0ZXI6IGJyaWdodG5lc3MoMS4yKTtcbiAgICB9XG4gIH1cbiAgJi5yZWQge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cmVkfTtcbiAgICBjb2xvcjogJHt3aGl0ZX07XG4gICAgYm9yZGVyOiAycHggc29saWQgJHtkYXJrUmVkfTtcbiAgICA6aG92ZXIge1xuICAgICAgZmlsdGVyOiBicmlnaHRuZXNzKDAuOCk7XG4gICAgfVxuICB9XG4gICYudHJhbnNwYXJlbnQge1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICR7bGlnaHR9O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7bWlsZGVyfTtcbiAgICBjb2xvcjogJHtsaWdodGVyfTtcbiAgICA6aG92ZXIsXG4gICAgJi5zZWxlY3RlZCB7XG4gICAgICBmaWx0ZXI6IGJyaWdodG5lc3MoMSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2xpZ2h0fTtcbiAgICB9XG4gIH1cbiAgJi5uby1ncm93IHtcbiAgICBmbGV4LWdyb3c6IDA7XG4gIH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMyksXG4gICAgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzLzEpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMykge1xuICAgIHBhZGRpbmc6IDFyZW07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGb3JtRmxleENvbnRhaW5lciA9IHN0eWxlZC5mb3JtYFxuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogMTAwJTtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHttaWxkfTtcbiAgcGFkZGluZzogMXJlbTtcbiAgZ2FwOiAxcmVtO1xuYDtcblxuZXhwb3J0IGNvbnN0IFNxdWFyZWRJbnB1dCA9IHN0eWxlZC5pbnB1dGBcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGRlcn07XG4gIHBhZGRpbmc6IDFyZW07XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBjb2xvcjogJHtsaWdodGVyfTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgOjpwbGFjZWhvbGRlciB7XG4gICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgY29sb3I6ICR7bGlnaHRlcn07XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFNxdWFyZWRUZXh0QXJlYSA9IHN0eWxlZC50ZXh0YXJlYWBcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGRlcn07XG4gIHBhZGRpbmc6IDFyZW07XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBjb2xvcjogJHtsaWdodGVyfTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbWluLWhlaWdodDogMTByZW07XG4gIDo6cGxhY2Vob2xkZXIge1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIGNvbG9yOiAke2xpZ2h0ZXJ9O1xuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIH1cbmA7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgYmx1ZSwgZGFyaywgd2hpdGUgfSBmcm9tIFwiLi9jb2xvcnNcIjtcblxuY29uc3QgTG9naW5Cb2R5ID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMHZ3O1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtkYXJrfTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgOjpiZWZvcmUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiaHR0cHM6Ly93d3cudHJhbnNwYXJlbnR0ZXh0dXJlcy5jb20vcGF0dGVybnMvZGFyay1kZW5pbS0zLnBuZ1wiKTtcbiAgICB6LWluZGV4OiAxO1xuICB9XG5gO1xuXG5jb25zdCBCaWdMb2dvID0gc3R5bGVkLmgyYFxuICBmb250LWZhbWlseTogXCJMaWJyZSBGcmFua2xpblwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNzAwO1xuICBjb2xvcjogJHt3aGl0ZX07XG4gIGZvbnQtc2l6ZTogMjB2dztcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IEJpZ0JhbGwgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2JsdWV9O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIHdpZHRoOiA1MHZtYXg7XG4gIGhlaWdodDogNTB2bWF4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAtMzBweDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDUwJSk7XG4gIHotaW5kZXg6IDA7XG4gIGZpbHRlcjogYmx1cig0MHB4KTtcbiAgb3BhY2l0eTogMC4zO1xuICBhbmltYXRpb246IHN1YnRsZSAzcyBlYXNlIGluZmluaXRlIGFsdGVybmF0ZTtcbiAgJi5kZWxheSB7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAwLjNzO1xuICB9XG5cbiAgQGtleWZyYW1lcyBzdWJ0bGUge1xuICAgIGZyb20ge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDAlKSB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICB9XG4gICAgdG8ge1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDAlKSB0cmFuc2xhdGVZKDEwMCUpO1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IHsgTG9naW5Cb2R5LCBCaWdMb2dvLCBCaWdCYWxsIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRmFjZWJvb2tMb2dpbiBmcm9tIFwicmVhY3QtZmFjZWJvb2stbG9naW4vZGlzdC9mYWNlYm9vay1sb2dpbi1yZW5kZXItcHJvcHNcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSwgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgZmV0Y2hGZWVkIH0gZnJvbSBcIi4uL2xpYi9hcGlcIjtcbmltcG9ydCB7IGNoZWNrVG9rZW4sIGd1ZXN0TG9naW4gfSBmcm9tIFwiLi4vbGliL2F1dGhcIjtcbmltcG9ydCB7IHRvZ2dsZUxvYWRpbmcgfSBmcm9tIFwiLi9zbGljZXMvbG9hZGluZ1NsaWNlXCI7XG5pbXBvcnQgeyB3cml0ZVNlc3Npb24gfSBmcm9tIFwiLi9zbGljZXMvc2Vzc2lvblNsaWNlXCI7XG5pbXBvcnQgeyBSZWd1bGFyQnV0dG9uIH0gZnJvbSBcIi4vdXRpbGl0aWVzL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgQmlnQmFsbCwgQmlnTG9nbywgTG9naW5Cb2R5IH0gZnJvbSBcIi4vdXRpbGl0aWVzL2xvZ2luRWxlbWVudHNcIjtcbmltcG9ydCB7IEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlciB9IGZyb20gXCIuL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuXG4gIGNvbnN0IHJlc3BvbnNlRmFjZWJvb2sgPSAocmVzcG9uc2UpID0+IHtcbiAgICBjb25zdCB7IGFjY2Vzc1Rva2VuIH0gPSByZXNwb25zZTtcbiAgICBpZiAoIWFjY2Vzc1Rva2VuKSByZXR1cm47XG4gICAgY2hlY2tUb2tlbihhY2Nlc3NUb2tlbiwgcmVzcG9uc2UucGljdHVyZS5kYXRhLnVybCkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgICBkaXNwYXRjaCh3cml0ZVNlc3Npb24oZGF0YSkpO1xuICAgICAgaGlzdG9yeS5wdXNoKFwiL1wiKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBsb2NhbFJlc3BvbnNlID0gKCkgPT4ge1xuICAgIGd1ZXN0TG9naW4oKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBpZiAoIWRhdGEpIHJldHVybjtcbiAgICAgIGRpc3BhdGNoKHdyaXRlU2Vzc2lvbihkYXRhKSk7XG4gICAgICBoaXN0b3J5LnB1c2goXCIvXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPExvZ2luQm9keT5cbiAgICAgIHtzZXNzaW9uICYmIDxSZWRpcmVjdCB0bz1cIi9cIiAvPn1cbiAgICAgIDxGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIgY2xhc3NOYW1lPVwiY2VudGVyIHRyYW5zcGFyZW50IGdhcC15XCI+XG4gICAgICAgIDxCaWdCYWxsIC8+XG4gICAgICAgIDxCaWdCYWxsIGNsYXNzTmFtZT1cImRlbGF5XCIgLz5cbiAgICAgICAgPEJpZ0xvZ28+ZnJlbmRzPC9CaWdMb2dvPlxuICAgICAgICA8RmFjZWJvb2tMb2dpblxuICAgICAgICAgIGFwcElkPVwiMTQ3NDcyNDM1Mjg5MTU4M1wiXG4gICAgICAgICAgY2FsbGJhY2s9e3Jlc3BvbnNlRmFjZWJvb2t9XG4gICAgICAgICAgZmllbGRzPVwibmFtZSxlbWFpbCxwaWN0dXJlXCJcbiAgICAgICAgICByZW5kZXI9eyhyZW5kZXJQcm9wcykgPT4gKFxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17cmVuZGVyUHJvcHMub25DbGlja31cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaGFsZi1wIGJsdWUgbm8tZ3JvdyBsYXJnZVwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsIHpJbmRleDogMSB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBGYWNlYm9vayBsb2dpblxuICAgICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgIC8+XG4gICAgICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICAgICAgb25DbGljaz17bG9jYWxSZXNwb25zZX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJoYWxmLXAgbm8tZ3Jvd1wiXG4gICAgICAgICAgc3R5bGU9e3sgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgekluZGV4OiAxIH19XG4gICAgICAgID5cbiAgICAgICAgICBHdWVzdCBsb2dpblxuICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICA8L0xvZ2luQm9keT5cbiAgKTtcbn07XG4iLCJleHBvcnQgY29uc3QgY2hlY2tUb2tlbiA9IChcbiAgdG9rZW4sXG4gIHByb2ZpbGVfcGhvdG8gPSBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9jZG4tb3JpZ2luLWV0ci5ha2Mub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE3LzExLzIwMTIyMjA4L1NhbW95ZWQtc3RhbmRpbmctaW4tdGhlLWZvcmVzdC5qcGdcIlxuKSA9PiB7XG4gIHJldHVybiBmZXRjaChcImh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL2F1dGgvZmFjZWJvb2tcIiwge1xuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGFjY2Vzc190b2tlbjogdG9rZW4sXG4gICAgICBwcm9maWxlX3Bob3RvLFxuICAgIH0pLFxuICB9KS50aGVuKChyZXMsIGVycikgPT4ge1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ3Vlc3RMb2dpbiA9ICgpID0+IHtcbiAgcmV0dXJuIGZldGNoKFwiaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vYXV0aC9sb2NhbFwiLCB7XG4gICAgbW9kZTogXCJjb3JzXCIsXG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdXNlcm5hbWU6IFwidGVzdGluZ19mcmllbmRzQHlhaG9vLmNvbVwiLFxuICAgICAgcGFzc3dvcmQ6IFwiQ2F0UGFzc3dvcmRJc0FDYXRcIixcbiAgICB9KSxcbiAgfSkudGhlbigocmVzLCBlcnIpID0+IHtcbiAgICBpZiAoZXJyKSByZXR1cm47XG4gICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gIH0pO1xufTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyBsaWdodGVyLCBtaWxkZXIsIHdoaXRlIH0gZnJvbSBcIi4vY29sb3JzXCI7XG5cbmV4cG9ydCBjb25zdCBJbWFnZUZvckNvbnRhaW5lciA9IHN0eWxlZC5pbWdgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbmA7XG5cbmV4cG9ydCBjb25zdCBTZXBhcmF0b3IgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDFweDtcbiAgYmFja2dyb3VuZDogJHttaWxkZXJ9O1xuICBmbGV4OiAxIDEgMTAwJTtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRSZWd1bGFyUCA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDAuOXJlbTtcbiAgY29sb3I6ICR7d2hpdGV9O1xuICAmLmdyZXkge1xuICAgIGNvbG9yOiAke2xpZ2h0ZXJ9O1xuICB9XG4gICYucmlnaHQtYWxpZ24ge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICB9XG4gICYubGFyZ2Uge1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICB9XG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMyksXG4gICAgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMy8xKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpIHtcbiAgICBmb250LXNpemU6IDFyZW07XG4gICAgLmxhcmdlIHtcbiAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRJY29uID0gc3R5bGVkLmlgXG4gIGNvbG9yOiAke2xpZ2h0ZXJ9O1xuICAmLndoaXRlIHtcbiAgICBjb2xvcjogJHt3aGl0ZX07XG4gIH1cbiAgJi5sYXJnZSB7XG4gICAgZm9udC1zaXplOiAxLjRyZW07XG4gIH1cbmA7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4vU3BhY2VDb250YWluZXJzXCI7XG5pbXBvcnQgeyBJbWFnZUZvckNvbnRhaW5lciwgU3R5bGVkSWNvbiwgU3R5bGVkUmVndWxhclAgfSBmcm9tIFwiLi9NaXNjXCI7XG5pbXBvcnQgeyBsaWdodGVyLCBtaWxkLCBtaWxkZXIsIHdoaXRlIH0gZnJvbSBcIi4vY29sb3JzXCI7XG5pbXBvcnQgeyBSZWd1bGFyQnV0dG9uIH0gZnJvbSBcIi4vRm9ybUVsZW1lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBQb3N0SW1hZ2UgPSBzdHlsZWQuaW1nYFxuICBtYXgtaGVpZ2h0OiA1MHZoO1xuICB3aWR0aDogMTAwJTtcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG5gO1xuXG5leHBvcnQgY29uc3QgUG9zdExpbmsgPSBzdHlsZWQoTGluaylgXG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtaGVpZ2h0OiA1MHZoO1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICA6OmJlZm9yZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQ6IHVybCgkeyhwcm9wcykgPT4gcHJvcHMuaW1hZ2V9KSBuby1yZXBlYXQgY2VudGVyL2NvdmVyO1xuICAgIHotaW5kZXg6IDA7XG4gICAgZmlsdGVyOiBibHVyKDFlbSk7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxMTAlKTtcbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IEJvbGRSZWd1bGFyTGluayA9IHN0eWxlZChMaW5rKWBcbiAgY29sb3I6ICR7d2hpdGV9O1xuICBmb250LXdlaWdodDogNTAwO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gICYubm8tZmxleCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzKSxcbiAgICBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMyksXG4gICAgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAzLzEpLFxuICAgIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMykge1xuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgUG9zdEhlYWRlciA9ICh7XG4gIGltYWdlLFxuICB1c2VybmFtZSxcbiAgZGF0ZSxcbiAgaGVhZGluZyxcbiAgaGFuZGxlRG90cyxcbiAgaWQsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiY2VudGVyLXlcIj5cbiAgICAgIDxDaXJjbGVDb250YWluZXIgdG89e2AvdXNlcnMvJHtpZH1gfT5cbiAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17aW1hZ2V9IC8+XG4gICAgICA8L0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgIDxGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cInBhZGQtMCBiYXNlbGluZS15IGdhcC14LWhhbGZcIj5cbiAgICAgICAgICA8Qm9sZFJlZ3VsYXJMaW5rPnt1c2VybmFtZX08L0JvbGRSZWd1bGFyTGluaz5cbiAgICAgICAgICA8U3R5bGVkUmVndWxhclA+e2hlYWRpbmcgJiYgYCBpcyBmZWVsaW5nICR7aGVhZGluZ31gfTwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZFJlZ3VsYXJQIGNsYXNzTmFtZT1cImdyZXlcIj57ZGF0ZX08L1N0eWxlZFJlZ3VsYXJQPlxuICAgICAgPC9GbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICA8UmVndWxhckJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVEb3RzfSBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudCBuby1ncm93XCI+XG4gICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWVsbGlwc2lzLXZlcnRpY2FsXCIgLz5cbiAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICA8L0ZsZXhDb250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgUG9zdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW46IDFlbSAwO1xuICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGJhY2tncm91bmQtY29sb3I6ICR7bWlsZGVyfTtcbiAgd2lkdGg6IDEwMCU7XG4gICYudHJhbnNwYXJlbnQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgTGlrZXNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtsaWdodGVyfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBQb3N0Qm9keSA9IHN0eWxlZChMaW5rKWBcbiAgY29sb3I6ICR7d2hpdGV9O1xuICBkaXNwbGF5OiBibG9jaztcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgcGFkZGluZzogMXJlbSAxcmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGR9O1xuICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCBDaGF0TWVzc2FnZXMgZnJvbSBcIi4uL0NoYXRNZXNzYWdlc1wiO1xuaW1wb3J0IHsgYmx1ZSwgZGFyaywgbGlnaHRlciwgbWlsZCwgbWlsZGVyLCB3aGl0ZSB9IGZyb20gXCIuL2NvbG9yc1wiO1xuaW1wb3J0IHsgUmVndWxhckJ1dHRvbiB9IGZyb20gXCIuL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgSW1hZ2VGb3JDb250YWluZXIsIFN0eWxlZFJlZ3VsYXJQIH0gZnJvbSBcIi4vTWlzY1wiO1xuaW1wb3J0IHsgQm9sZFJlZ3VsYXJMaW5rIH0gZnJvbSBcIi4vcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4vU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBjb25zdCBVc2VyQ2hhdEJ1dHRvbiA9ICh7XG4gIGNoYXQsXG4gIGN1cnJDaGF0LFxuICBzZXRDdXJyZW50Q2hhdElkLFxuICBzZXNzaW9uLFxuICBzZXRSZWNpcGllbnQsXG59KSA9PiB7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlKHt9KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoY2hhdC5wYXJ0aWNpcGFudHNbMF0uX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkKSB7XG4gICAgICBzZXRVc2VyKGNoYXQucGFydGljaXBhbnRzWzFdKTtcbiAgICAgIGlmIChjaGF0Ll9pZCA9PT0gY3VyckNoYXQpIHNldFJlY2lwaWVudChjaGF0LnBhcnRpY2lwYW50c1sxXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldFVzZXIoY2hhdC5wYXJ0aWNpcGFudHNbMF0pO1xuICAgIGlmIChjaGF0Ll9pZCA9PT0gY3VyckNoYXQpIHNldFJlY2lwaWVudChjaGF0LnBhcnRpY2lwYW50c1swXSk7XG4gIH0sIFtjdXJyQ2hhdF0pO1xuICByZXR1cm4gKFxuICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICBjbGFzc05hbWU9e2N1cnJDaGF0ID09PSBjaGF0Ll9pZCA/IFwiYmx1ZVwiIDogXCJ0cmFuc3BhcmVudFwifVxuICAgICAgb25DbGljaz17KCkgPT4gc2V0Q3VycmVudENoYXRJZChjaGF0Ll9pZCl9XG4gICAgPlxuICAgICAgPEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlciBjbGFzc05hbWU9XCJjZW50ZXIgZ2FwLXlcIj5cbiAgICAgICAgPENpcmNsZUNvbnRhaW5lciB0bz1cIiNcIj5cbiAgICAgICAgICA8SW1hZ2VGb3JDb250YWluZXIgc3JjPXt1c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICAgIDwvQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgIDxCb2xkUmVndWxhckxpbmsgdG89XCIjXCI+e3VzZXIuZnVsbF9uYW1lfTwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgICAgIDxTdHlsZWRSZWd1bGFyUCBjbGFzc05hbWU9XCJncmV5XCI+XG4gICAgICAgICAgICB7Y2hhdC5tZXNzYWdlcy5sZW5ndGhcbiAgICAgICAgICAgICAgPyBgJHtjaGF0Lm1lc3NhZ2VzLmxlbmd0aH0gbWVzc2FnZSR7XG4gICAgICAgICAgICAgICAgICBjaGF0Lm1lc3NhZ2VzLmxlbmd0aCA+IDEgPyBcInNcIiA6IFwiXCJcbiAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICA6IFwiTm8gbWVzc2FnZXNcIn1cbiAgICAgICAgICA8L1N0eWxlZFJlZ3VsYXJQPlxuICAgICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgIDwvRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiA2MHZoO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGRlcn07XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIHdpZHRoOiAxMHB4O1xuICB9XG4gIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7bWlsZH07XG4gIH1cbiAgOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtsaWdodGVyfTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbiAgJi5jb21tZW50cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHttaWxkfTtcbiAgICBoZWlnaHQ6IHVuc2V0O1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUJ1YmJsZSA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7bGlnaHRlcn07XG4gIG1hcmdpbjogMC4ycmVtIDA7XG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGJvcmRlci1yYWRpdXM6IDFyZW07XG4gIG1heC13aWR0aDogNzAlO1xuICBwIHtcbiAgICBjb2xvcjogJHtkYXJrfTtcbiAgICBmb250LXNpemU6IDEuMXJlbTtcbiAgICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xuICB9XG4gICYuYmx1ZSB7XG4gICAgcCB7XG4gICAgICBjb2xvcjogJHt3aGl0ZX07XG4gICAgfVxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Ymx1ZX07XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNZXNzYWdlQnViYmxlIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NoYXRFbGVtZW50c1wiO1xuaW1wb3J0IHsgSW1hZ2VGb3JDb250YWluZXIsIFN0eWxlZFJlZ3VsYXJQIH0gZnJvbSBcIi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7XG4gIENpcmNsZUNvbnRhaW5lcixcbiAgRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyLFxuICBGbGV4Q29udGFpbmVyLFxufSBmcm9tIFwiLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IG1zZywgc2Vzc2lvbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEZsZXhDb250YWluZXJcbiAgICAgIGNsYXNzTmFtZT17YHRyYW5zcGFyZW50ICR7XG4gICAgICAgIG1zZy5zZW5kZXIuX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkICYmIFwicmV2ZXJzZWRcIlxuICAgICAgfWB9XG4gICAgPlxuICAgICAgPENpcmNsZUNvbnRhaW5lcj5cbiAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17bXNnLnNlbmRlci5wcm9maWxlX3Bob3RvfSAvPlxuICAgICAgPC9DaXJjbGVDb250YWluZXI+XG4gICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICA8TWVzc2FnZUJ1YmJsZVxuICAgICAgICAgIG1lc3NhZ2U9e21zZ31cbiAgICAgICAgICBjbGFzc05hbWU9e21zZy5zZW5kZXIuX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkICYmIFwiYmx1ZVwifVxuICAgICAgICA+XG4gICAgICAgICAgPFN0eWxlZFJlZ3VsYXJQPnttc2cudGV4dH08L1N0eWxlZFJlZ3VsYXJQPlxuICAgICAgICA8L01lc3NhZ2VCdWJibGU+XG4gICAgICAgIDxTdHlsZWRSZWd1bGFyUFxuICAgICAgICAgIGNsYXNzTmFtZT17YGdyZXkgJHtcbiAgICAgICAgICAgIG1zZy5zZW5kZXIuX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkICYmIFwicmlnaHQtYWxpZ25cIlxuICAgICAgICAgIH1gfVxuICAgICAgICA+XG4gICAgICAgICAge21zZy5mb3JtYXR0ZWRfZGF0ZX1cbiAgICAgICAgPC9TdHlsZWRSZWd1bGFyUD5cbiAgICAgIDwvRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgIDwvRmxleENvbnRhaW5lcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2VuZERhdGEgfSBmcm9tIFwiLi4vbGliL2FwaVwiO1xuaW1wb3J0IENoYXRNZXNzYWdlcyBmcm9tIFwiLi9DaGF0TWVzc2FnZXNcIjtcbmltcG9ydCB7IE1lc3NhZ2VDb250YWluZXIsIFVzZXJDaGF0QnV0dG9uIH0gZnJvbSBcIi4vdXRpbGl0aWVzL2NoYXRFbGVtZW50c1wiO1xuaW1wb3J0IHtcbiAgRm9ybUZsZXhDb250YWluZXIsXG4gIFJlZ3VsYXJCdXR0b24sXG4gIFJvdW5kZWRJbnB1dEZpZWxkLFxufSBmcm9tIFwiLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgeyBQb3N0V3JhcHBlciB9IGZyb20gXCIuL3V0aWxpdGllcy9wb3N0RWxlbWVudHNcIjtcbmltcG9ydCB7IEZsZXhDb250YWluZXIgfSBmcm9tIFwiLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3QgYWxsVXNlcnNDaGF0cyA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgY2hhdEJveCA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgY2hhdHJvb21zID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5yZWFsVGltZS5jaGF0cm9vbXMpO1xuICBjb25zdCBbY3VycmVudENoYXRyb29tLCBzZXRDdXJyZW50Q2hhdHJvb21dID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbY3VycmVudENoYXRJZCwgc2V0Q3VycmVudENoYXRJZF0gPSB1c2VTdGF0ZShjaGF0cm9vbXNbMF0/Ll9pZCk7XG4gIGNvbnN0IFtyZWNpcGllbnQsIHNldFJlY2lwaWVudF0gPSB1c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEN1cnJlbnRDaGF0cm9vbShjaGF0cm9vbXMuZmluZCgoY2hhdCkgPT4gY2hhdC5faWQgPT09IGN1cnJlbnRDaGF0SWQpKTtcbiAgICBjaGF0Qm94LmN1cnJlbnQuc2Nyb2xsKDAsIGNoYXRCb3guY3VycmVudC5zY3JvbGxIZWlnaHQpO1xuICB9KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhbGxVc2Vyc0NoYXRzLmN1cnJlbnQuc2Nyb2xsKHtcbiAgICAgIGxlZnQ6IDEwMCxcbiAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiLFxuICAgIH0pO1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZVNlbmRNZXNzYWdlID0gKGUpID0+IHtcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtzZXNzaW9uLnVzZXIuX2lkfS9jaGF0cm9vbXMvJHtjdXJyZW50Q2hhdElkfS9tZXNzYWdlc2A7XG4gICAgc2VuZERhdGEoXCJwb3N0XCIsIHVybCwgc2Vzc2lvbi50b2tlbiwgZSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInRleHRcIl0nKS52YWx1ZSA9IFwiXCI7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPFBvc3RXcmFwcGVyPlxuICAgICAgPEZsZXhDb250YWluZXIgcmVmPXthbGxVc2Vyc0NoYXRzfSBjbGFzc05hbWU9XCJzY3JvbGwteFwiPlxuICAgICAgICB7Y2hhdHJvb21zPy5tYXAoKGNoYXQpID0+IChcbiAgICAgICAgICA8VXNlckNoYXRCdXR0b25cbiAgICAgICAgICAgIGNoYXQ9e2NoYXR9XG4gICAgICAgICAgICBjdXJyQ2hhdD17Y3VycmVudENoYXRJZH1cbiAgICAgICAgICAgIHNldEN1cnJlbnRDaGF0SWQ9e3NldEN1cnJlbnRDaGF0SWR9XG4gICAgICAgICAgICBzZXNzaW9uPXtzZXNzaW9ufVxuICAgICAgICAgICAgc2V0UmVjaXBpZW50PXtzZXRSZWNpcGllbnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICA8TWVzc2FnZUNvbnRhaW5lciByZWY9e2NoYXRCb3h9PlxuICAgICAgICB7Y3VycmVudENoYXRyb29tPy5tZXNzYWdlcz8ubWFwKChtc2cpID0+IChcbiAgICAgICAgICA8Q2hhdE1lc3NhZ2VzIG1zZz17bXNnfSBzZXNzaW9uPXtzZXNzaW9ufSAvPlxuICAgICAgICApKX1cbiAgICAgIDwvTWVzc2FnZUNvbnRhaW5lcj5cbiAgICAgIDxGb3JtRmxleENvbnRhaW5lciBvblN1Ym1pdD17aGFuZGxlU2VuZE1lc3NhZ2V9PlxuICAgICAgICA8Um91bmRlZElucHV0RmllbGRcbiAgICAgICAgICBuYW1lPVwidGV4dFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e2BXcml0ZSBhIG5ldyBtZXNzYWdlIGZvciAke3JlY2lwaWVudC5maXJzdF9uYW1lfWB9XG4gICAgICAgIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGhpZGRlbiBuYW1lPVwicmVjaXBpZW50XCIgdmFsdWU9e3JlY2lwaWVudC5pZH0gLz5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwiYmx1ZVwiPlNlbmQgTWVzc2FnZTwvUmVndWxhckJ1dHRvbj5cbiAgICAgIDwvRm9ybUZsZXhDb250YWluZXI+XG4gICAgPC9Qb3N0V3JhcHBlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBmZXRjaEZlZWQgfSBmcm9tIFwiLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgYWRkVXNlckdlbmVyYWwsIHJlbW92ZVVzZXJHZW5lcmFsIH0gZnJvbSBcIi4vc2xpY2VzL3Nlc3Npb25TbGljZVwiO1xuaW1wb3J0IHsgUmVndWxhckJ1dHRvbiB9IGZyb20gXCIuL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7IEltYWdlRm9yQ29udGFpbmVyLCBTZXBhcmF0b3IgfSBmcm9tIFwiLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgQm9sZFJlZ3VsYXJMaW5rIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHtcbiAgQ2lyY2xlQ29udGFpbmVyLFxuICBGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIsXG4gIEZsZXhDb250YWluZXIsXG59IGZyb20gXCIuL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHsgaWQsIHJlcXVlc3RUeXBlIH0pID0+IHtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZldGNoRmVlZChzZXNzaW9uLnRva2VuLCBpZCwgXCJ1c2VyXCIpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIHNldFVzZXIoZGF0YSk7XG4gICAgfSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFNlcGFyYXRvciAvPlxuICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiY2VudGVyLXlcIj5cbiAgICAgICAgPENpcmNsZUNvbnRhaW5lcj5cbiAgICAgICAgICA8SW1hZ2VGb3JDb250YWluZXIgc3JjPXt1c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICAgIDwvQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgIDxCb2xkUmVndWxhckxpbms+e3VzZXIuZnVsbF9uYW1lfTwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgICAge3JlcXVlc3RUeXBlID09PSBcInJlY2VpdmVkX3JlcXVlc3RzXCIgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJsdWUgbm8tZ3Jvd1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgIGFkZFVzZXJHZW5lcmFsKHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFwiZnJpZW5kc1wiLFxuICAgICAgICAgICAgICAgICAgICBlbElkOiB1c2VyLl9pZCxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgQWNjZXB0XG4gICAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWQgbm8tZ3Jvd1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgIHJlbW92ZVVzZXJHZW5lcmFsKHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IFwicmVjZWl2ZWRfcmVxdWVzdHNcIixcbiAgICAgICAgICAgICAgICAgICAgZWxJZDogdXNlci5faWQsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIERlY2xpbmVcbiAgICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVkIG5vLWdyb3dcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICByZW1vdmVVc2VyR2VuZXJhbCh7XG4gICAgICAgICAgICAgICAgICBmaWVsZDogXCJzZW50X3JlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgICBlbElkOiB1c2VyLl9pZCxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBDYW5jZWwgcmVxdWVzdFxuICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgUmVxdWVzdEl0ZW0gZnJvbSBcIi4vUmVxdWVzdEl0ZW1cIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgeyBQb3N0V3JhcHBlciB9IGZyb20gXCIuL3V0aWxpdGllcy9wb3N0RWxlbWVudHNcIjtcbmltcG9ydCB7IEZsZXhDb250YWluZXIgfSBmcm9tIFwiLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3QgW3JlcXVlc3RUeXBlLCBzZXRSZXF1ZXN0VHlwZV0gPSB1c2VTdGF0ZShcInJlY2VpdmVkX3JlcXVlc3RzXCIpO1xuICBjb25zdCBzZXNzaW9uID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXNzaW9uLnZhbHVlKTtcbiAgcmV0dXJuIChcbiAgICA8UG9zdFdyYXBwZXI+XG4gICAgICA8RmxleENvbnRhaW5lcj5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9e2B0cmFuc3BhcmVudCAke1xuICAgICAgICAgICAgcmVxdWVzdFR5cGUgPT09IFwicmVjZWl2ZWRfcmVxdWVzdHNcIiAmJiBcInNlbGVjdGVkXCJcbiAgICAgICAgICB9YH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRSZXF1ZXN0VHlwZShcInJlY2VpdmVkX3JlcXVlc3RzXCIpfVxuICAgICAgICA+XG4gICAgICAgICAgUGVuZGluZyBSZXF1ZXN0c1xuICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtgdHJhbnNwYXJlbnQgJHtcbiAgICAgICAgICAgIHJlcXVlc3RUeXBlID09PSBcInNlbnRfcmVxdWVzdHNcIiAmJiBcInNlbGVjdGVkXCJcbiAgICAgICAgICB9YH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRSZXF1ZXN0VHlwZShcInNlbnRfcmVxdWVzdHNcIil9XG4gICAgICAgID5cbiAgICAgICAgICBTZW50IFJlcXVlc3RzXG4gICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICAgIHtzZXNzaW9uLnVzZXIgJiZcbiAgICAgICAgc2Vzc2lvbi51c2VyW3JlcXVlc3RUeXBlXS5tYXAoKHVzZXIpID0+IChcbiAgICAgICAgICA8UmVxdWVzdEl0ZW0gaWQ9e3VzZXJ9IHJlcXVlc3RUeXBlPXtyZXF1ZXN0VHlwZX0gLz5cbiAgICAgICAgKSl9XG4gICAgPC9Qb3N0V3JhcHBlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5cbmV4cG9ydCBjb25zdCBhY3RpdmVGb3JtU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwiYWN0aXZlRm9ybVwiLFxuICBpbml0aWFsU3RhdGU6IHtcbiAgICB2YWx1ZTogXCJcIixcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRBY3RpdmVGb3JtKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gYWN0aW9uLnBheWxvYWQ7XG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgeyBzZXRBY3RpdmVGb3JtIH0gPSBhY3RpdmVGb3JtU2xpY2UuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IGFjdGl2ZUZvcm1TbGljZS5yZWR1Y2VyO1xuIiwiaW1wb3J0IHsgY3JlYXRlU2xpY2UgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xuXG5leHBvcnQgY29uc3QgY3VycmVudENvbW1lbnRTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogXCJjdXJyZW50Q29tbWVudFwiLFxuICBpbml0aWFsU3RhdGU6IHtcbiAgICB2YWx1ZTogXCJcIixcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRDdXJyZW50Q29tbWVudChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHsgc2V0Q3VycmVudENvbW1lbnQgfSA9IGN1cnJlbnRDb21tZW50U2xpY2UuYWN0aW9ucztcbmV4cG9ydCBkZWZhdWx0IGN1cnJlbnRDb21tZW50U2xpY2UucmVkdWNlcjtcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuZXhwb3J0IGNvbnN0IGN1cnJlbnRQb3N0U2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwiY3VycmVudFBvc3RcIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgdmFsdWU6IFwiXCIsXG4gIH0sXG4gIHJlZHVjZXJzOiB7XG4gICAgc2V0Q3VycmVudFBvc3Qoc3RhdGUsIGFjdGlvbikge1xuICAgICAgc3RhdGUudmFsdWUgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB7IHNldEN1cnJlbnRQb3N0IH0gPSBjdXJyZW50UG9zdFNsaWNlLmFjdGlvbnM7XG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJlbnRQb3N0U2xpY2UucmVkdWNlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGRlbGV0ZUNvbW1lbnRzLCBmZXRjaEZlZWQgfSBmcm9tIFwiLi4vLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgc2V0QWN0aXZlRm9ybSB9IGZyb20gXCIuLi9zbGljZXMvYWN0aXZlRm9ybVNsaWNlXCI7XG5pbXBvcnQgeyBzZXRDdXJyZW50Q29tbWVudCB9IGZyb20gXCIuLi9zbGljZXMvY3VycmVudENvbW1lbnRTbGljZVwiO1xuaW1wb3J0IHsgc2V0Q3VycmVudFBvc3QgfSBmcm9tIFwiLi4vc2xpY2VzL2N1cnJlbnRQb3N0U2xpY2VcIjtcbmltcG9ydCB7IHRvZ2dsZUxvYWRpbmcgfSBmcm9tIFwiLi4vc2xpY2VzL2xvYWRpbmdTbGljZVwiO1xuaW1wb3J0IHsgYmx1ZSwgcmVkIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9jb2xvcnNcIjtcbmltcG9ydCB7IFN0eWxlZEljb24sIFN0eWxlZFJlZ3VsYXJQIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NaXNjXCI7XG5pbXBvcnQgeyBCb2xkUmVndWxhckxpbmsgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHsgRmxleENvbnRhaW5lciB9IGZyb20gXCIuLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IGhhbmRsZUxpa2UsIGxpa2VkLCBjb21tZW50LCBzZXNzaW9uLCBwb3N0IH0pID0+IHtcbiAgY29uc3QgW2NvbmZpcm0sIHNldENvbmZpcm1dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhhbmRsZURlbGV0ZSA9ICh0b2tlbiwgcG9zdElkLCBjb21tZW50SWQpID0+IHtcbiAgICBpZiAoIWNvbmZpcm0pIHtcbiAgICAgIHNldENvbmZpcm0odHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgZGVsZXRlQ29tbWVudHModG9rZW4sIHBvc3RJZCwgY29tbWVudElkKS50aGVuKCgpID0+IHtcbiAgICAgIGZldGNoRmVlZCh0b2tlbiwgcG9zdElkLCBcInBvc3RcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50UG9zdChkYXRhKSk7XG4gICAgICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgICAgIHNldENvbmZpcm0oZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRWRpdCA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChzZXRDdXJyZW50UG9zdChwb3N0KSk7XG4gICAgZGlzcGF0Y2goc2V0Q3VycmVudENvbW1lbnQoY29tbWVudCkpO1xuICAgIGRpc3BhdGNoKHNldEFjdGl2ZUZvcm0oXCJjb21tZW50LWVkaXRcIikpO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cInBhZGQteVwiPlxuICAgICAgPEJvbGRSZWd1bGFyTGlua1xuICAgICAgICB0bz1cIiNcIlxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVMaWtlfVxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIGNvbG9yOiBsaWtlZCAmJiBibHVlLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8U3R5bGVkSWNvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLXRodW1icy11cFwiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGNvbG9yOiBsaWtlZCAmJiBibHVlLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+e1wiIFwifVxuICAgICAgICAmbmJzcDsgTGlrZVxuICAgICAgPC9Cb2xkUmVndWxhckxpbms+XG5cbiAgICAgIHsoY29tbWVudC5hdXRob3IuX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkIHx8XG4gICAgICAgIHBvc3QuYXV0aG9yLl9pZCA9PT0gc2Vzc2lvbi51c2VyLl9pZCkgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxTdHlsZWRSZWd1bGFyUD4tPC9TdHlsZWRSZWd1bGFyUD5cbiAgICAgICAgICA8Qm9sZFJlZ3VsYXJMaW5rIHRvPVwiI1wiIG9uQ2xpY2s9e2hhbmRsZUVkaXR9PlxuICAgICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtaGlnaGxpZ2h0ZXJcIiAvPlxuICAgICAgICAgICAgJm5ic3A7IEVkaXRcbiAgICAgICAgICA8L0JvbGRSZWd1bGFyTGluaz5cbiAgICAgICAgICA8U3R5bGVkUmVndWxhclA+LTwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgICAgPEJvbGRSZWd1bGFyTGlua1xuICAgICAgICAgICAgdG89XCIjXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURlbGV0ZShzZXNzaW9uLnRva2VuLCBwb3N0Ll9pZCwgY29tbWVudC5faWQpfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgY29sb3I6IHJlZCxcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTdHlsZWRJY29uIHN0eWxlPXt7IGNvbG9yOiByZWQgfX0gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEteG1hcmtcIiAvPlxuICAgICAgICAgICAgJm5ic3A7IHshY29uZmlybSA/IFwiRGVsZXRlXCIgOiBcIkFyZSB5b3Ugc3VyZT9cIn1cbiAgICAgICAgICA8L0JvbGRSZWd1bGFyTGluaz5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvRmxleENvbnRhaW5lcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbWFuYWdlQ29tbWVudExpa2VzIH0gZnJvbSBcIi4uLy4uL2xpYi9hcGlcIjtcbmltcG9ydCB7IE1lc3NhZ2VCdWJibGUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NoYXRFbGVtZW50c1wiO1xuaW1wb3J0IHtcbiAgSW1hZ2VGb3JDb250YWluZXIsXG4gIFN0eWxlZEljb24sXG4gIFN0eWxlZFJlZ3VsYXJQLFxufSBmcm9tIFwiLi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7XG4gIENpcmNsZUNvbnRhaW5lcixcbiAgRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyLFxuICBGbGV4Q29udGFpbmVyLFxufSBmcm9tIFwiLi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuaW1wb3J0IENvbW1lbnRBY3Rpb25zIGZyb20gXCIuL0NvbW1lbnRBY3Rpb25zXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IGNvbW1lbnQsIHBvc3QsIHNlc3Npb24sIGNvbmZpcm0gfSkgPT4ge1xuICBjb25zdCBbbGlrZWQsIHNldExpa2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW251bWJlck9mTGlrZXMsIHNldE51bWJlck9mTGlrZXNdID0gdXNlU3RhdGUoY29tbWVudC5saWtlcy5sZW5ndGgpO1xuICBjb25zdCBoYW5kbGVMaWtlID0gKCkgPT4ge1xuICAgIGlmIChsaWtlZCkge1xuICAgICAgbWFuYWdlQ29tbWVudExpa2VzKHNlc3Npb24udG9rZW4sIHBvc3QuX2lkLCBjb21tZW50Ll9pZCwgXCJkZWxldGVcIik7XG4gICAgICBzZXRMaWtlZChmYWxzZSk7XG4gICAgICBzZXROdW1iZXJPZkxpa2VzKChwcmV2U3RhdGUpID0+IHByZXZTdGF0ZSAtIDEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtYW5hZ2VDb21tZW50TGlrZXMoc2Vzc2lvbi50b2tlbiwgcG9zdC5faWQsIGNvbW1lbnQuX2lkLCBcInBvc3RcIik7XG4gICAgc2V0TGlrZWQodHJ1ZSk7XG4gICAgc2V0TnVtYmVyT2ZMaWtlcygocHJldlN0YXRlKSA9PiBwcmV2U3RhdGUgKyAxKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjb21tZW50Lmxpa2VzKSB7XG4gICAgICBzZXRMaWtlZChjb21tZW50Lmxpa2VzLmluY2x1ZGVzKHNlc3Npb24udXNlci5faWQpKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8RmxleENvbnRhaW5lciBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudFwiPlxuICAgICAgPENpcmNsZUNvbnRhaW5lciB0bz17YC91c2Vycy8ke2NvbW1lbnQ/LmF1dGhvcj8uX2lkfWB9PlxuICAgICAgICA8SW1hZ2VGb3JDb250YWluZXIgc3JjPXtjb21tZW50Py5hdXRob3I/LnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICA8L0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgIDxGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICAgIDxNZXNzYWdlQnViYmxlPlxuICAgICAgICAgIDxTdHlsZWRSZWd1bGFyUD57Y29tbWVudC50ZXh0fTwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgIDwvTWVzc2FnZUJ1YmJsZT5cbiAgICAgICAgPFN0eWxlZFJlZ3VsYXJQIGNsYXNzTmFtZT17YGdyZXkgYH0+XG4gICAgICAgICAge2Ake2NvbW1lbnQuYXV0aG9yPy5mdWxsX25hbWV9IOKAoiAke2NvbW1lbnQuZm9ybWF0dGVkX2NyZWF0aW9ufWB9IOKAontcIiBcIn1cbiAgICAgICAgICA8U3R5bGVkSWNvbiBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS1oZWFydFwiIC8+XG4gICAgICAgICAgJm5ic3A7IHtudW1iZXJPZkxpa2VzfSBMaWtlXG4gICAgICAgICAge251bWJlck9mTGlrZXMgPT09IDEgPyBcIlwiIDogXCJzXCJ9XG4gICAgICAgIDwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgIDxDb21tZW50QWN0aW9uc1xuICAgICAgICAgIGhhbmRsZUxpa2U9e2hhbmRsZUxpa2V9XG4gICAgICAgICAgbGlrZWQ9e2xpa2VkfVxuICAgICAgICAgIGNvbW1lbnQ9e2NvbW1lbnR9XG4gICAgICAgICAgc2Vzc2lvbj17c2Vzc2lvbn1cbiAgICAgICAgICBwb3N0PXtwb3N0fVxuICAgICAgICAgIGNvbmZpcm09e2NvbmZpcm19XG4gICAgICAgIC8+XG4gICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICA8L0ZsZXhDb250YWluZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IE1lc3NhZ2VDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NoYXRFbGVtZW50c1wiO1xuaW1wb3J0IENvbW1lbnRJdGVtIGZyb20gXCIuL0NvbW1lbnRJdGVtXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IGNvbW1lbnRzLCBwb3N0IH0pID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG5cbiAgcmV0dXJuIChcbiAgICA8TWVzc2FnZUNvbnRhaW5lciBjbGFzc05hbWU9XCJjb21tZW50c1wiPlxuICAgICAge2NvbW1lbnRzLm1hcChcbiAgICAgICAgKGNvbW1lbnQpID0+XG4gICAgICAgICAgY29tbWVudC5hdXRob3IgJiYgKFxuICAgICAgICAgICAgPENvbW1lbnRJdGVtXG4gICAgICAgICAgICAgIGtleT17Y29tbWVudC5faWR9XG4gICAgICAgICAgICAgIGNvbW1lbnQ9e2NvbW1lbnR9XG4gICAgICAgICAgICAgIHNlc3Npb249e3Nlc3Npb259XG4gICAgICAgICAgICAgIHBvc3Q9e3Bvc3R9XG4gICAgICAgICAgICAgIGNvbmZpcm09e2NvbmZpcm19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIClcbiAgICAgICl9XG4gICAgPC9NZXNzYWdlQ29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdW5kZWRJbnB1dEJ1dHRvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgeyBJbWFnZUZvckNvbnRhaW5lciB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgQ2lyY2xlQ29udGFpbmVyLCBGbGV4Q29udGFpbmVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHsgdXNlciwgaGFuZGxlQ29tbWVudCB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEZsZXhDb250YWluZXI+XG4gICAgICA8Q2lyY2xlQ29udGFpbmVyPlxuICAgICAgICA8SW1hZ2VGb3JDb250YWluZXIgc3JjPXt1c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICA8L0NpcmNsZUNvbnRhaW5lcj5cbiAgICAgIDxSb3VuZGVkSW5wdXRCdXR0b24gb25DbGljaz17aGFuZGxlQ29tbWVudH0+XG4gICAgICAgIFdyaXRlIGEgY29tbWVudC4uLlxuICAgICAgPC9Sb3VuZGVkSW5wdXRCdXR0b24+XG4gICAgPC9GbGV4Q29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSZWd1bGFyQnV0dG9uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7IFNlcGFyYXRvciwgU3R5bGVkSWNvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgRmxleENvbnRhaW5lciB9IGZyb20gXCIuLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5pbXBvcnQgeyBtYW5hZ2VMaWtlcyB9IGZyb20gXCIuLi8uLi9saWIvYXBpXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7XG4gIGhhbmRsZUNvbW1lbnQsXG4gIGhhbmRsZURlbGV0ZSxcbiAgc2V0TnVtYmVyT2ZMaWtlcyxcbiAgcG9zdCxcbiAgc2Vzc2lvbixcbn0pID0+IHtcbiAgY29uc3QgW2xpa2VkLCBzZXRMaWtlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjb25maXJtLCBzZXRDb25maXJtXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlTGlrZSA9ICgpID0+IHtcbiAgICBpZiAobGlrZWQpIHtcbiAgICAgIG1hbmFnZUxpa2VzKFwiZGVsZXRlXCIsIHBvc3QuX2lkLCBzZXNzaW9uLnRva2VuKTtcbiAgICAgIHNldExpa2VkKGZhbHNlKTtcbiAgICAgIHNldE51bWJlck9mTGlrZXMoKHByZXZTdGF0ZSkgPT4gcHJldlN0YXRlIC0gMSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1hbmFnZUxpa2VzKFwicG9zdFwiLCBwb3N0Ll9pZCwgc2Vzc2lvbi50b2tlbik7XG4gICAgc2V0TGlrZWQodHJ1ZSk7XG4gICAgc2V0TnVtYmVyT2ZMaWtlcygocHJldlN0YXRlKSA9PiBwcmV2U3RhdGUgKyAxKTtcbiAgfTtcblxuICBjb25zdCBvbkRlbGV0ZUNsaWNrID0gKCkgPT4ge1xuICAgIGlmICghY29uZmlybSkge1xuICAgICAgc2V0Q29uZmlybSh0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFuZGxlRGVsZXRlKHBvc3QuX2lkLCBwb3N0LmF1dGhvci5faWQpO1xuICAgIHNldENvbmZpcm0oZmFsc2UpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHBvc3QubGlrZXMpIHtcbiAgICAgIHNldExpa2VkKHBvc3QubGlrZXMuaW5jbHVkZXMoc2Vzc2lvbi51c2VyLl9pZCkpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cIndyYXAgcGFkZC14XCI+XG4gICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e2xpa2VkID8gXCJibHVlXCIgOiBcInRyYW5zcGFyZW50XCJ9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUxpa2V9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWhlYXJ0XCIgLz5cbiAgICAgICAgJm5ic3A7TGlrZVxuICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwidHJhbnNwYXJlbnRcIiBvbkNsaWNrPXtoYW5kbGVDb21tZW50fT5cbiAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtY29tbWVudHNcIiAvPlxuICAgICAgICAmbmJzcDtDb21tZW50XG4gICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICB7cG9zdC5hdXRob3IuX2lkID09PSBzZXNzaW9uLnVzZXIuX2lkICYmIChcbiAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwicmVkXCIgb25DbGljaz17b25EZWxldGVDbGlja30+XG4gICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtdHJhc2gtY2FuIHdoaXRlXCIgLz5cbiAgICAgICAgICB7IWNvbmZpcm0gPyBcIiAgRGVsZXRlIFBvc3RcIiA6IFwiICBBcmUgeW91IHN1cmU/XCJ9XG4gICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICl9XG4gICAgICA8U2VwYXJhdG9yIC8+XG4gICAgPC9GbGV4Q29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN0eWxlZEljb24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7IEJvbGRSZWd1bGFyTGluaywgTGlrZXNDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHsgRmxleENvbnRhaW5lciB9IGZyb20gXCIuLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IG51bWJlck9mTGlrZXMsIG51bWJlck9mQ29tbWVudHMsIGlkIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RmxleENvbnRhaW5lciBjbGFzc05hbWU9XCJjZW50ZXIteSBzcGIteCBwYWRkLXggcGFkZC0xLTJcIj5cbiAgICAgIDxMaWtlc0NvbnRhaW5lcj5cbiAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtaGVhcnRcIiAvPlxuICAgICAgICAmbmJzcDt7bnVtYmVyT2ZMaWtlc30gTGlrZVxuICAgICAgICB7bnVtYmVyT2ZMaWtlcyA9PT0gMSA/IFwiXCIgOiBcInNcIn1cbiAgICAgIDwvTGlrZXNDb250YWluZXI+XG5cbiAgICAgIDxCb2xkUmVndWxhckxpbmsgdG89e2AvcG9zdHMvJHtpZH1gfT5cbiAgICAgICAge251bWJlck9mQ29tbWVudHN9IGNvbW1lbnRcbiAgICAgICAge251bWJlck9mQ29tbWVudHMgPT09IDEgPyBcIlwiIDogXCJzXCJ9XG4gICAgICA8L0JvbGRSZWd1bGFyTGluaz5cbiAgICA8L0ZsZXhDb250YWluZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IENvbW1lbnRTZWN0aW9uIGZyb20gXCIuL0NvbW1lbnRTZWN0aW9uXCI7XG5cbmltcG9ydCB7XG4gIFBvc3RCb2R5LFxuICBQb3N0SGVhZGVyLFxuICBQb3N0SW1hZ2UsXG4gIFBvc3RMaW5rLFxuICBQb3N0V3JhcHBlcixcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9wb3N0RWxlbWVudHNcIjtcbmltcG9ydCB7IHNldEFjdGl2ZUZvcm0gfSBmcm9tIFwiLi4vc2xpY2VzL2FjdGl2ZUZvcm1TbGljZVwiO1xuaW1wb3J0IHsgc2V0Q3VycmVudFBvc3QgfSBmcm9tIFwiLi4vc2xpY2VzL2N1cnJlbnRQb3N0U2xpY2VcIjtcbmltcG9ydCBXcml0ZUFDb21tZW50IGZyb20gXCIuL1dyaXRlQUNvbW1lbnRcIjtcbmltcG9ydCBQb3N0QWN0aW9ucyBmcm9tIFwiLi9Qb3N0QWN0aW9uc1wiO1xuaW1wb3J0IE51bWJlck9mUG9zdExpa2VzIGZyb20gXCIuL051bWJlck9mUG9zdExpa2VzXCI7XG5pbXBvcnQgeyBoaWdobGlnaHQgfSBmcm9tIFwiLi4vc2VhcmNoL1NlYXJjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoeyBwb3N0LCBoYW5kbGVEZWxldGUsIHF1ZXJ5IH0pID0+IHtcbiAgY29uc3QgW2NvbW1lbnRzLCBzZXRDb21tZW50c10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICBjb25zdCBjdXJyZW50UG9zdCA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuY3VycmVudFBvc3QudmFsdWUpO1xuICBjb25zdCBbcG9zdERhdGEsIHNldFBvc3REYXRhXSA9IHVzZVN0YXRlKHBvc3QpO1xuICBjb25zdCBbbnVtYmVyT2ZMaWtlcywgc2V0TnVtYmVyT2ZMaWtlc10gPSB1c2VTdGF0ZShwb3N0RGF0YS5saWtlcy5sZW5ndGgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3QgaGFuZGxlQ29tbWVudCA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChzZXRDdXJyZW50UG9zdChwb3N0KSk7XG4gICAgZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcImNvbW1lbnRcIikpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURvdHMgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0Q3VycmVudFBvc3QocG9zdERhdGEpKTtcbiAgICBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwicG9zdC1tb3JlXCIpKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjdXJyZW50UG9zdC5faWQgPT09IHBvc3QuX2lkKSB7XG4gICAgICBjb25zb2xlLmxvZyhwb3N0RGF0YSk7XG4gICAgICBzZXRQb3N0RGF0YSh7IC4uLmN1cnJlbnRQb3N0IH0pO1xuICAgICAgc2V0Q29tbWVudHMoWy4uLmN1cnJlbnRQb3N0LmNvbW1lbnRzXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldFBvc3REYXRhKHBvc3REYXRhKTtcbiAgICBzZXRDb21tZW50cyhwb3N0RGF0YS5jb21tZW50cyk7XG4gIH0sIFtjdXJyZW50UG9zdF0pO1xuICByZXR1cm4gKFxuICAgIDxQb3N0V3JhcHBlciBjbGFzc05hbWU9XCJ1cC1tb3Rpb25cIj5cbiAgICAgIHtwb3N0LmF1dGhvciAmJiAoXG4gICAgICAgIDxQb3N0SGVhZGVyXG4gICAgICAgICAgaW1hZ2U9e3Bvc3QuYXV0aG9yLnByb2ZpbGVfcGhvdG99XG4gICAgICAgICAgdXNlcm5hbWU9e3Bvc3QuYXV0aG9yLmZ1bGxfbmFtZX1cbiAgICAgICAgICBkYXRlPXtwb3N0RGF0YS5mb3JtYXR0ZWRfY3JlYXRpb259XG4gICAgICAgICAgaGVhZGluZz17cG9zdERhdGEuaGVhZGluZ31cbiAgICAgICAgICBoYW5kbGVEb3RzPXtoYW5kbGVEb3RzfVxuICAgICAgICAgIGlkPXtwb3N0LmF1dGhvci5faWR9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge3Bvc3REYXRhLnRleHQgJiYgKFxuICAgICAgICA8UG9zdEJvZHkgdG89e2AvcG9zdHMvJHtwb3N0Ll9pZH1gfT5cbiAgICAgICAgICB7aGlnaGxpZ2h0KHBvc3REYXRhLnRleHQsIHF1ZXJ5KX1cbiAgICAgICAgPC9Qb3N0Qm9keT5cbiAgICAgICl9XG4gICAgICB7cG9zdERhdGEuaW1hZ2UgJiYgKFxuICAgICAgICA8UG9zdExpbmsgdG89e2AvcG9zdHMvJHtwb3N0RGF0YS5faWR9YH0gaW1hZ2U9e3Bvc3REYXRhLnVybF9mb3JtYXR0ZXJ9PlxuICAgICAgICAgIDxQb3N0SW1hZ2Ugc3JjPXtwb3N0RGF0YS51cmxfZm9ybWF0dGVyfSAvPlxuICAgICAgICA8L1Bvc3RMaW5rPlxuICAgICAgKX1cbiAgICAgIDxOdW1iZXJPZlBvc3RMaWtlc1xuICAgICAgICBudW1iZXJPZkxpa2VzPXtudW1iZXJPZkxpa2VzfVxuICAgICAgICBudW1iZXJPZkNvbW1lbnRzPXtwb3N0RGF0YS5jb21tZW50cy5sZW5ndGh9XG4gICAgICAgIGlkPXtwb3N0RGF0YS5faWR9XG4gICAgICAvPlxuICAgICAgPFBvc3RBY3Rpb25zXG4gICAgICAgIGhhbmRsZUNvbW1lbnQ9e2hhbmRsZUNvbW1lbnR9XG4gICAgICAgIHBvc3Q9e3Bvc3R9XG4gICAgICAgIHNlc3Npb249e3Nlc3Npb259XG4gICAgICAgIGhhbmRsZURlbGV0ZT17aGFuZGxlRGVsZXRlfVxuICAgICAgICBzZXROdW1iZXJPZkxpa2VzPXtzZXROdW1iZXJPZkxpa2VzfVxuICAgICAgLz5cbiAgICAgIHtjb21tZW50cyAmJiA8Q29tbWVudFNlY3Rpb24gY29tbWVudHM9e2NvbW1lbnRzfSBwb3N0PXtwb3N0RGF0YX0gLz59XG4gICAgICA8V3JpdGVBQ29tbWVudCB1c2VyPXtzZXNzaW9uLnVzZXJ9IGhhbmRsZUNvbW1lbnQ9e2hhbmRsZUNvbW1lbnR9IC8+XG4gICAgPC9Qb3N0V3JhcHBlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBkZWxldGVQb3N0IH0gZnJvbSBcIi4uLy4uL2xpYi9hcGlcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuLi9wb3N0cy9Qb3N0XCI7XG5pbXBvcnQgeyB0b2dnbGVMb2FkaW5nIH0gZnJvbSBcIi4uL3NsaWNlcy9sb2FkaW5nU2xpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHsgcG9zdCwgcXVlcnkgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICBjb25zdCBoYW5kbGVEZWxldGUgPSAocG9zdElkLCB1c2VySWQpID0+IHtcbiAgICBkaXNwYXRjaCh0b2dnbGVMb2FkaW5nKCkpO1xuICAgIGRlbGV0ZVBvc3Qoc2Vzc2lvbi50b2tlbiwgcG9zdElkLCB1c2VySWQpLnRoZW4oKCkgPT4ge1xuICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgcG9zdC5hdXRob3IgJiYgKFxuICAgICAgPFBvc3QgcG9zdD17cG9zdH0gaGFuZGxlRGVsZXRlPXtoYW5kbGVEZWxldGV9IHF1ZXJ5PXtxdWVyeX0gLz5cbiAgICApXG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVkdWNlciwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgYWRkVXNlckdlbmVyYWwsIHJlbW92ZVVzZXJHZW5lcmFsIH0gZnJvbSBcIi4uL3NsaWNlcy9zZXNzaW9uU2xpY2VcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgSW1hZ2VGb3JDb250YWluZXIsIFNlcGFyYXRvciB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgQm9sZFJlZ3VsYXJMaW5rIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wb3N0RWxlbWVudHNcIjtcbmltcG9ydCB7XG4gIENpcmNsZUNvbnRhaW5lcixcbiAgRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyLFxuICBGbGV4Q29udGFpbmVyLFxufSBmcm9tIFwiLi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuaW1wb3J0IHsgaGlnaGxpZ2h0IH0gZnJvbSBcIi4vU2VhcmNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHVzZXIsIHF1ZXJ5IH0pID0+IHtcbiAgY29uc3QgY3VyclVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUudXNlcik7XG4gIGNvbnN0IFtpc0luRmllbGQsIHNldElzSW5GaWVsZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjdXJyVXNlci5mcmllbmRzLmluY2x1ZGVzKHVzZXIuX2lkKSkgc2V0SXNJbkZpZWxkKFwiZnJpZW5kc1wiKTtcbiAgICBlbHNlIGlmIChjdXJyVXNlci5zZW50X3JlcXVlc3RzLmluY2x1ZGVzKHVzZXIuX2lkKSlcbiAgICAgIHNldElzSW5GaWVsZChcInNlbnRfcmVxdWVzdHNcIik7XG4gICAgZWxzZSBpZiAoY3VyclVzZXIucmVjZWl2ZWRfcmVxdWVzdHMuaW5jbHVkZXModXNlci5faWQpKVxuICAgICAgc2V0SXNJbkZpZWxkKFwicmVjZWl2ZWRfcmVxdWVzdHNcIik7XG4gICAgZWxzZSBzZXRJc0luRmllbGQobnVsbCk7XG4gIH0sIFtjdXJyVXNlcl0pO1xuICByZXR1cm4gKFxuICAgIHVzZXIuX2lkICYmIChcbiAgICAgIDw+XG4gICAgICAgIDxTZXBhcmF0b3IgLz5cbiAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiY2VudGVyLXlcIj5cbiAgICAgICAgICA8Q2lyY2xlQ29udGFpbmVyIHRvPXtgL3VzZXJzLyR7dXNlci5faWR9YH0+XG4gICAgICAgICAgICA8SW1hZ2VGb3JDb250YWluZXIgc3JjPXt1c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICAgICAgPC9DaXJjbGVDb250YWluZXI+XG4gICAgICAgICAgPEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgICAgICAgIDxCb2xkUmVndWxhckxpbmsgY2xhc3NOYW1lPVwibm8tZmxleFwiIHRvPXtgL3VzZXJzLyR7dXNlci5faWR9YH0+XG4gICAgICAgICAgICAgIHtoaWdobGlnaHQodXNlci5mdWxsX25hbWUsIHF1ZXJ5KX1cbiAgICAgICAgICAgIDwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgICAgIDwvRmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgIHshaXNJbkZpZWxkICYmIHVzZXIuX2lkICE9PSBjdXJyVXNlci5faWQgPyAoXG4gICAgICAgICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJibHVlIG5vLWdyb3dcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgYWRkVXNlckdlbmVyYWwoeyBmaWVsZDogXCJzZW50X3JlcXVlc3RzXCIsIGVsSWQ6IHVzZXIuX2lkIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFNlbmQgcmVxdWVzdFxuICAgICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICB1c2VyLl9pZCAhPT0gY3VyclVzZXIuX2lkICYmIChcbiAgICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWQgbm8tZ3Jvd1wiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVVzZXJHZW5lcmFsKHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogaXNJbkZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgIGVsSWQ6IHVzZXIuX2lkLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2lzSW5GaWVsZCA9PT0gXCJmcmllbmRzXCJcbiAgICAgICAgICAgICAgICAgID8gXCJSZW1vdmUgZnJpZW5kXCJcbiAgICAgICAgICAgICAgICAgIDogXCJDYW5jZWwgZnJpZW5kIHJlcXVlc3RcIn1cbiAgICAgICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICAgKVxuICAgICAgICAgICl9XG4gICAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICAgIDwvPlxuICAgIClcbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuaW1wb3J0IHBlcmZvcm1TZWFyY2ggZnJvbSBcIi4uLy4uL2xpYi9wZXJmb3JtU2VhcmNoXCI7XG5pbXBvcnQgeyBibHVlLCBsaWdodEJsdWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NvbG9yc1wiO1xuaW1wb3J0IHtcbiAgRm9ybUZsZXhDb250YWluZXIsXG4gIFJlZ3VsYXJCdXR0b24sXG4gIFNxdWFyZWRJbnB1dCxcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7IFN0eWxlZEljb24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7IFBvc3RXcmFwcGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9wb3N0RWxlbWVudHNcIjtcbmltcG9ydCB7XG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcbmltcG9ydCBQb3N0UmVzdWx0IGZyb20gXCIuL1Bvc3RSZXN1bHRcIjtcbmltcG9ydCBVc2VyUmVzdWx0IGZyb20gXCIuL1VzZXJSZXN1bHRcIjtcblxuZXhwb3J0IGNvbnN0IEhpZ2hsaWdodGVyID0gc3R5bGVkLnNwYW5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMTtcbmA7XG5cbmV4cG9ydCBjb25zdCBIaWdobGlnaHRXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aWR0aDogMTEwJTtcbiAgICBoZWlnaHQ6IDExMCU7XG4gICAgbGVmdDogLTUlO1xuICAgIHRvcDogLTUlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Ymx1ZX07XG4gICAgei1pbmRleDogMDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBoaWdobGlnaHQgPSAodmFsdWUsIHNlbnRRdWVyeSkgPT4ge1xuICBpZiAoIXZhbHVlIHx8ICFzZW50UXVlcnkpIHJldHVybiB2YWx1ZTtcbiAgY29uc3QgcmVnZXhGb3JRdWVyeSA9IG5ldyBSZWdFeHAoYChcXFxccyk/KCR7c2VudFF1ZXJ5fSkoXFxcXHMpP2AsIFwiZ2lcIik7XG4gIGNvbnN0IGFsbE1hdGNoZXMgPSB2YWx1ZS5zcGxpdChyZWdleEZvclF1ZXJ5KS5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgIGxldCBpdGVtID0gY3VycjtcbiAgICBpZiAoIWN1cnIpIHJldHVybiBhY2M7XG4gICAgaWYgKHJlZ2V4Rm9yUXVlcnkudGVzdChjdXJyKSkge1xuICAgICAgaXRlbSA9IChcbiAgICAgICAgPEhpZ2hsaWdodFdyYXBwZXI+XG4gICAgICAgICAgPEhpZ2hsaWdodGVyPntjdXJyfTwvSGlnaGxpZ2h0ZXI+XG4gICAgICAgIDwvSGlnaGxpZ2h0V3JhcHBlcj5cbiAgICAgICk7XG4gICAgfVxuICAgIGFjYy5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGFsbE1hdGNoZXM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IFtkZWJvdW5jZSwgc2V0RGVib3VuY2VdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtmb3VuZFVzZXJzLCBzZXRGb3VuZFVzZXJzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2ZvdW5kUG9zdHMsIHNldEZvdW5kUG9zdHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcXVlcnksIHNldFF1ZXJ5XSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBzZXNzaW9uID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXNzaW9uLnZhbHVlKTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcbiAgICBpZiAoZGVib3VuY2UpIGNsZWFyVGltZW91dChkZWJvdW5jZSk7XG4gICAgaWYgKGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA8IDMpIHJldHVybjtcbiAgICBjb25zdCB0aW1lcklkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjcmVhdGVTZWFyY2goc2Vzc2lvbi50b2tlbiwgZS50YXJnZXQudmFsdWUpO1xuICAgIH0sIDEwMDApO1xuICAgIHNldERlYm91bmNlKHRpbWVySWQpO1xuICB9O1xuICBjb25zdCBjcmVhdGVTZWFyY2ggPSAodG9rZW4sIHF1ZXJ5KSA9PiB7XG4gICAgcGVyZm9ybVNlYXJjaCh0b2tlbiwgcXVlcnkpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgIHNldEZvdW5kVXNlcnMocmVzdWx0cy51c2Vycyk7XG4gICAgICBzZXRGb3VuZFBvc3RzKHJlc3VsdHMucG9zdHMpO1xuICAgICAgc2V0UXVlcnkocXVlcnkpO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxQb3N0V3JhcHBlciBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudFwiPlxuICAgICAgPEZvcm1GbGV4Q29udGFpbmVyPlxuICAgICAgICA8RmxleENvbnRhaW5lciBjbGFzc05hbWU9XCJwYWRkLTBcIj5cbiAgICAgICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgICAgPFNxdWFyZWRJbnB1dFxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIldoYXQgYXJlIHlvdSBsb29raW5nIGZvcj9cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJibHVlIG5vLWdyb3dcIj5cbiAgICAgICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLW1hZ25pZnlpbmctZ2xhc3Mgd2hpdGVcIiAvPlxuICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAgPC9Gb3JtRmxleENvbnRhaW5lcj5cbiAgICAgIHtmb3VuZFVzZXJzLm1hcCgodXNlcikgPT4gKFxuICAgICAgICA8VXNlclJlc3VsdCB1c2VyPXt1c2VyfSBxdWVyeT17cXVlcnl9IC8+XG4gICAgICApKX1cbiAgICAgIHtmb3VuZFBvc3RzLm1hcCgocG9zdCkgPT4gKFxuICAgICAgICA8UG9zdFJlc3VsdCBwb3N0PXtwb3N0fSBxdWVyeT17cXVlcnl9IC8+XG4gICAgICApKX1cbiAgICA8L1Bvc3RXcmFwcGVyPlxuICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0ICh0b2tlbiwgdmFsdWUpID0+IHtcbiAgcmV0dXJuIGZldGNoKGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS9zZWFyY2gvJHt2YWx1ZX1gLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsXG4gICAgfSxcbiAgfSkudGhlbigocmVzKSA9PiByZXMuanNvbigpKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IG1hbmFnZU5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi4vLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgYmx1ZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvY29sb3JzXCI7XG5pbXBvcnQgeyBSZWd1bGFyQnV0dG9uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7XG4gIEltYWdlRm9yQ29udGFpbmVyLFxuICBTZXBhcmF0b3IsXG4gIFN0eWxlZEljb24sXG4gIFN0eWxlZFJlZ3VsYXJQLFxufSBmcm9tIFwiLi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7IEJvbGRSZWd1bGFyTGluayB9IGZyb20gXCIuLi91dGlsaXRpZXMvcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKHsgbm90aWZpY2F0aW9uIH0pID0+IHtcbiAgY29uc3QgW2ljb24sIHNldEljb25dID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBzZXNzaW9uID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXNzaW9uLnZhbHVlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBtYW5hZ2VOb3RpZmljYXRpb25zKFxuICAgICAgc2Vzc2lvbi50b2tlbixcbiAgICAgIFwicHV0XCIsXG4gICAgICBzZXNzaW9uLnVzZXIuX2lkLFxuICAgICAgbm90aWZpY2F0aW9uLl9pZFxuICAgICk7XG4gICAgaWYgKG5vdGlmaWNhdGlvbi50ZXh0LmluY2x1ZGVzKFwibGlrZVwiKSkge1xuICAgICAgc2V0SWNvbihcImZhLWhlYXJ0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRJY29uKFwiZmEtY29tbWVudFwiKTtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVEZWxldGUgPSAoKSA9PiB7XG4gICAgbWFuYWdlTm90aWZpY2F0aW9ucyhcbiAgICAgIHNlc3Npb24udG9rZW4sXG4gICAgICBcImRlbGV0ZVwiLFxuICAgICAgc2Vzc2lvbi51c2VyLl9pZCxcbiAgICAgIG5vdGlmaWNhdGlvbi5faWRcbiAgICApO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2VwYXJhdG9yIC8+XG4gICAgICA8RmxleENvbnRhaW5lciBjbGFzc05hbWU9XCJjZW50ZXIteSBzcGIteFwiPlxuICAgICAgICA8Qm9sZFJlZ3VsYXJMaW5rIHRvPXtgL3Bvc3RzLyR7bm90aWZpY2F0aW9uLnVybH1gfT5cbiAgICAgICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiY2VudGVyLXlcIj5cbiAgICAgICAgICAgICAgPFN0eWxlZEljb25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BsYXJnZSBmYS1zb2xpZCAke2ljb259YH1cbiAgICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvcjogYmx1ZSB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8U3R5bGVkUmVndWxhclA+e25vdGlmaWNhdGlvbi50ZXh0fTwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICAgICAgPC9GbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICAgIDwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudCBuby1ncm93XCIgb25DbGljaz17aGFuZGxlRGVsZXRlfT5cbiAgICAgICAgICA8U3R5bGVkSWNvbiBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS1jaXJjbGUteG1hcmsgbGFyZ2VcIiAvPlxuICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgPC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgU3R5bGVkSWNvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgUG9zdFdyYXBwZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHsgRmxleENvbnRhaW5lciB9IGZyb20gXCIuLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uSXRlbSBmcm9tIFwiLi9Ob3RpZmljYXRpb25JdGVtXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgbm90aWZpY2F0aW9ucyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucmVhbFRpbWUubm90aWZpY2F0aW9ucyk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICByZXR1cm4gc2Vzc2lvbj8udXNlcj8uZmlyc3RfbmFtZSA/IChcbiAgICA8UG9zdFdyYXBwZXI+XG4gICAgICA8RmxleENvbnRhaW5lcj5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwidHJhbnNwYXJlbnQgc2VsZWN0ZWRcIj5cbiAgICAgICAgICA8U3R5bGVkSWNvbiBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS1iZWxsXCIgLz5cbiAgICAgICAgICAmbmJzcDt7c2Vzc2lvbj8udXNlcj8uZmlyc3RfbmFtZX0mYXBvcztzIG5vdGlmaWNhdGlvbiBjZW50ZXJcbiAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAge25vdGlmaWNhdGlvbnMubWFwKChub3RpZmljYXRpb24pID0+IChcbiAgICAgICAgPE5vdGlmaWNhdGlvbkl0ZW0gbm90aWZpY2F0aW9uPXtub3RpZmljYXRpb259IC8+XG4gICAgICApKX1cbiAgICA8L1Bvc3RXcmFwcGVyPlxuICApIDogbnVsbDtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHsgY3JlYXRlQ2hhdHJvb20gfSBmcm9tIFwiLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgc2V0QWN0aXZlRm9ybSB9IGZyb20gXCIuL3NsaWNlcy9hY3RpdmVGb3JtU2xpY2VcIjtcbmltcG9ydCB7IGFkZFVzZXJHZW5lcmFsLCByZW1vdmVVc2VyR2VuZXJhbCB9IGZyb20gXCIuL3NsaWNlcy9zZXNzaW9uU2xpY2VcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHVzZXIsIHNlc3Npb24gfSkgPT4ge1xuICBjb25zdCBjdXJyVXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZS51c2VyKTtcbiAgY29uc3QgW2lzSW5GaWVsZCwgc2V0SXNJbkZpZWxkXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1cnJVc2VyLmZyaWVuZHMuaW5jbHVkZXModXNlci5faWQpKSBzZXRJc0luRmllbGQoXCJmcmllbmRzXCIpO1xuICAgIGVsc2UgaWYgKGN1cnJVc2VyLnNlbnRfcmVxdWVzdHMuaW5jbHVkZXModXNlci5faWQpKVxuICAgICAgc2V0SXNJbkZpZWxkKFwic2VudF9yZXF1ZXN0c1wiKTtcbiAgICBlbHNlIGlmIChjdXJyVXNlci5yZWNlaXZlZF9yZXF1ZXN0cy5pbmNsdWRlcyh1c2VyLl9pZCkpXG4gICAgICBzZXRJc0luRmllbGQoXCJyZWNlaXZlZF9yZXF1ZXN0c1wiKTtcbiAgICBlbHNlIHNldElzSW5GaWVsZChudWxsKTtcbiAgfSwgW2N1cnJVc2VyXSk7XG5cbiAgY29uc3QgaGFuZGxlTmV3Q2hhdHJvb20gPSAoKSA9PiB7XG4gICAgY3JlYXRlQ2hhdHJvb20oc2Vzc2lvbi50b2tlbiwgdXNlci5faWQpLnRoZW4oKCkgPT4ge1xuICAgICAgaGlzdG9yeS5wdXNoKFwiL2NoYXRyb29tc1wiKTtcbiAgICB9KTtcbiAgfTtcbiAgaWYgKCFzZXNzaW9uLnVzZXIpIHJldHVybiBudWxsO1xuICBjb25zb2xlLmxvZyhpc0luRmllbGQpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7dXNlci5faWQgPT09IHNlc3Npb24udXNlci5faWQgJiYgKFxuICAgICAgICA8UmVndWxhckJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwicHJvZmlsZS1lZGl0XCIpKX0+XG4gICAgICAgICAgRWRpdCBQcm9maWxlXG4gICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICl9XG4gICAgICB7IWlzSW5GaWVsZCAmJiB1c2VyLl9pZCAhPT0gc2Vzc2lvbi51c2VyLl9pZCAmJiAoXG4gICAgICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYmx1ZVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgIGRpc3BhdGNoKGFkZFVzZXJHZW5lcmFsKHsgZmllbGQ6IFwic2VudF9yZXF1ZXN0c1wiLCBlbElkOiB1c2VyLl9pZCB9KSlcbiAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICBBZGQgYXMgYSBmcmllbmRcbiAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgKX1cbiAgICAgIHt1c2VyLl9pZCAhPT0gc2Vzc2lvbi51c2VyLl9pZCAmJiAoXG4gICAgICAgIDxSZWd1bGFyQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU5ld0NoYXRyb29tfT5TZW5kIG1lc3NhZ2U8L1JlZ3VsYXJCdXR0b24+XG4gICAgICApfVxuICAgICAge2lzSW5GaWVsZCA9PT0gXCJzZW50X3JlcXVlc3RzXCIgJiYgKFxuICAgICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInJlZFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgIHJlbW92ZVVzZXJHZW5lcmFsKHtcbiAgICAgICAgICAgICAgICBmaWVsZDogXCJzZW50X3JlcXVlc3RzXCIsXG4gICAgICAgICAgICAgICAgZWxJZDogdXNlci5faWQsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBDYW5jZWwgcmVxdWVzdFxuICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICApfVxuICAgICAge2lzSW5GaWVsZCA9PT0gXCJyZWNlaXZlZF9yZXF1ZXN0c1wiICYmIChcbiAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJyZWRcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICByZW1vdmVVc2VyR2VuZXJhbCh7XG4gICAgICAgICAgICAgICAgZmllbGQ6IFwicmVjZWl2ZWRfcmVxdWVzdHNcIixcbiAgICAgICAgICAgICAgICBlbElkOiB1c2VyLl9pZCxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIERlY2xpbmUgcmVxdWVzdFxuICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9maWxlQWN0aW9ucyBmcm9tIFwiLi4vUHJvZmlsZUFjdGlvbnNcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7IEltYWdlRm9yQ29udGFpbmVyLCBTdHlsZWRSZWd1bGFyUCB9IGZyb20gXCIuL01pc2NcIjtcbmltcG9ydCB7IFBvc3RXcmFwcGVyIH0gZnJvbSBcIi4vcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4vU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHVzZXIsIHNlc3Npb24gfSkgPT4ge1xuICBpZiAoIXVzZXI/Ll9pZCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiAoXG4gICAgPFBvc3RXcmFwcGVyPlxuICAgICAgPEZsZXhDb250YWluZXI+XG4gICAgICAgIDxGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIgY2xhc3NOYW1lPVwiY2VudGVyIGdhcC15XCI+XG4gICAgICAgICAgPENpcmNsZUNvbnRhaW5lciBjbGFzc05hbWU9XCJsYXJnZVwiIHRvPVwiI1wiPlxuICAgICAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17dXNlci5wcm9maWxlX3Bob3RvfSAvPlxuICAgICAgICAgIDwvQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICAgIDxTdHlsZWRSZWd1bGFyUCBjbGFzc05hbWU9XCJsYXJnZVwiPnt1c2VyLmZ1bGxfbmFtZX08L1N0eWxlZFJlZ3VsYXJQPlxuICAgICAgICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cInBhZGQtMFwiPlxuICAgICAgICAgICAgPFByb2ZpbGVBY3Rpb25zIHVzZXI9e3VzZXJ9IHNlc3Npb249e3Nlc3Npb259IC8+XG4gICAgICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICA8L1Bvc3RXcmFwcGVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBsaWdodCwgbWlsZCwgd2hpdGUgfSBmcm9tIFwiLi91dGlsaXRpZXMvY29sb3JzXCI7XG5pbXBvcnQgeyBSZWd1bGFyQnV0dG9uLCBSb3VuZGVkSW5wdXRCdXR0b24gfSBmcm9tIFwiLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgeyBJbWFnZUZvckNvbnRhaW5lciwgU3R5bGVkSWNvbiB9IGZyb20gXCIuL3V0aWxpdGllcy9NaXNjXCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuaW1wb3J0IHsgQm9sZFJlZ3VsYXJMaW5rIH0gZnJvbSBcIi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuXG5jb25zdCBMb2dvID0gc3R5bGVkKExpbmspYFxuICBmb250LWZhbWlseTogXCJMaWJyZSBGcmFua2xpblwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNzAwO1xuICBjb2xvcjogJHt3aGl0ZX07XG4gIGZvbnQtc2l6ZTogM3JlbTtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICB0ZXh0LXNoYWRvdzogMC4xcmVtIDAuMXJlbSAwICR7bWlsZH0yZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5gO1xuXG5jb25zdCBCYXIgPSBzdHlsZWQubmF2YFxuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHBhZGRpbmc6IDAuNHJlbSAycmVtO1xuICB3aWR0aDogMTAwJTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke21pbGR9O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtsaWdodH07XG5gO1xuXG5jb25zdCBNZW51Q29udGVudCA9IHN0eWxlZC5kaXZgXG4gIG1heC13aWR0aDogMTEwMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgLm5hdi1zaXplIHtcbiAgICBwYWRkaW5nOiAwLjZyZW0gMXJlbTtcbiAgICBtYXJnaW4tbGVmdDogMXJlbTtcbiAgfVxuYDtcblxuY29uc3QgU3BhY2VyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAkeyhwcm9wcykgPT4gcHJvcHMuaGVpZ2h0fXB4O1xuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuYDtcblxuZXhwb3J0IGRlZmF1bHQgKHsgdW5yZWFkTm90aWZpY2F0aW9ucyB9KSA9PiB7XG4gIGNvbnN0IG5hdkJhclJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgW2hlaWdodCwgc2V0SGVpZ2h0XSA9IHVzZVN0YXRlKDApO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEhlaWdodChuYXZCYXJSZWYuY3VycmVudC5vZmZzZXRIZWlnaHQpO1xuICB9LCBbXSk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8QmFyIHJlZj17bmF2QmFyUmVmfT5cbiAgICAgICAgPE1lbnVDb250ZW50PlxuICAgICAgICAgIDxMb2dvIHRvPVwiL1wiPmZyZW5kczwvTG9nbz5cbiAgICAgICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICAgICAgPEJvbGRSZWd1bGFyTGluayB0bz1cIi9zZWFyY2hcIj5cbiAgICAgICAgICAgICAgPFJvdW5kZWRJbnB1dEJ1dHRvbiBjbGFzc05hbWU9XCJuYXYtc2l6ZSBtb2JpbGUtaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiaW52ZXJ0IHBhZGQtMCB0cmFuc3BhcmVudFwiPlxuICAgICAgICAgICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtbWFnbmlmeWluZy1nbGFzcyBsYXJnZVwiIC8+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb2JpbGUtaGlkZGVuXCI+U2VhcmNoIGZvci4uLjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICAgICAgICAgIDwvUm91bmRlZElucHV0QnV0dG9uPlxuICAgICAgICAgICAgPC9Cb2xkUmVndWxhckxpbms+XG4gICAgICAgICAgPC9GbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwicGFkZC0wIGNlbnRlci15XCI+XG4gICAgICAgICAgICA8Qm9sZFJlZ3VsYXJMaW5rIHRvPVwiL3NlYXJjaFwiPlxuICAgICAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudCBuby1ncm93IG1vYmlsZS1vbmx5XCI+XG4gICAgICAgICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtbWFnbmlmeWluZy1nbGFzcyBsYXJnZVwiIC8+XG4gICAgICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICAgIDwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgICAgICAgPEJvbGRSZWd1bGFyTGluayB0bz1cIi9ub3RpZmljYXRpb25zXCI+XG4gICAgICAgICAgICAgIDxSZWd1bGFyQnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAgICAgICAgICF1bnJlYWROb3RpZmljYXRpb25zLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IFwidHJhbnNwYXJlbnQgbm8tZ3Jvd1wiXG4gICAgICAgICAgICAgICAgICAgIDogXCJibHVlIG5vLWdyb3dcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWJlbGwgbGFyZ2VcIiAvPlxuICAgICAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAgICA8L0JvbGRSZWd1bGFyTGluaz5cbiAgICAgICAgICAgIDxCb2xkUmVndWxhckxpbmsgdG89XCIvY2hhdHJvb21zXCI+XG4gICAgICAgICAgICAgIDxSZWd1bGFyQnV0dG9uIGNsYXNzTmFtZT1cInRyYW5zcGFyZW50IG5vLWdyb3dcIj5cbiAgICAgICAgICAgICAgICA8U3R5bGVkSWNvbiBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS1tZXNzYWdlIGxhcmdlXCIgLz5cbiAgICAgICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICAgPC9Cb2xkUmVndWxhckxpbms+XG4gICAgICAgICAgICB7c2Vzc2lvbi51c2VyICYmIChcbiAgICAgICAgICAgICAgPENpcmNsZUNvbnRhaW5lciB0bz17YC91c2Vycy8ke3Nlc3Npb24udXNlci5faWR9YH0+XG4gICAgICAgICAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17c2Vzc2lvbi51c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICAgICAgICAgIDwvQ2lyY2xlQ29udGFpbmVyPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICAgIDwvTWVudUNvbnRlbnQ+XG4gICAgICA8L0Jhcj5cbiAgICAgIDxTcGFjZXIgaGVpZ2h0PXtoZWlnaHR9IC8+XG4gICAgPC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzZXRBY3RpdmVGb3JtIH0gZnJvbSBcIi4uL3NsaWNlcy9hY3RpdmVGb3JtU2xpY2VcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24sIFJvdW5kZWRJbnB1dEJ1dHRvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgeyBJbWFnZUZvckNvbnRhaW5lciwgU2VwYXJhdG9yLCBTdHlsZWRJY29uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NaXNjXCI7XG5pbXBvcnQgeyBQb3N0V3JhcHBlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQgeyBDaXJjbGVDb250YWluZXIsIEZsZXhDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIHJldHVybiAoXG4gICAgPFBvc3RXcmFwcGVyPlxuICAgICAgPEZsZXhDb250YWluZXI+XG4gICAgICAgIDxDaXJjbGVDb250YWluZXI+XG4gICAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17c2Vzc2lvbiAmJiBzZXNzaW9uLnVzZXIucHJvZmlsZV9waG90b30gLz5cbiAgICAgICAgPC9DaXJjbGVDb250YWluZXI+XG4gICAgICAgIDxSb3VuZGVkSW5wdXRCdXR0b25cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwiZW1vdGlvbi1wb3N0XCIpKX1cbiAgICAgICAgPlxuICAgICAgICAgIFdoYXQmYXBvcztzIG9uIHlvdXIgbWluZCwge3Nlc3Npb24gJiYgc2Vzc2lvbi51c2VyLmZpcnN0X25hbWV9P1xuICAgICAgICA8L1JvdW5kZWRJbnB1dEJ1dHRvbj5cbiAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICAgIDxTZXBhcmF0b3IgLz5cbiAgICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cIndyYXBcIj5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcImltYWdlLXBvc3RcIikpfVxuICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiBcIiM3RENFODJcIiB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFN0eWxlZEljb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWltYWdlXCJcbiAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiBcIiM3RENFODJcIiB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgJm5ic3A7IENyZWF0ZSBpbWFnZSBwb3N0XG4gICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJibHVlIG1vYmlsZS1sYXN0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwidGV4dC1wb3N0XCIpKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWFsaWduLWxlZnQgd2hpdGVcIiAvPlxuICAgICAgICAgICZuYnNwOyBDcmVhdGUgdGV4dCBwb3N0XG4gICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcImVtb3Rpb24tcG9zdFwiKSl9XG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IFwiI0ZFRDk5QlwiIH19XG4gICAgICAgID5cbiAgICAgICAgICA8U3R5bGVkSWNvblxuICAgICAgICAgICAgc3R5bGU9e3sgY29sb3I6IFwiI0ZFRDk5QlwiIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS1mYWNlLWdyaW4tc3RhcnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgICAgJm5ic3A7IENyZWF0ZSBlbW90aW9uIHBvc3RcbiAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgIDwvUG9zdFdyYXBwZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgZGVsZXRlUG9zdCwgZmV0Y2hGZWVkIH0gZnJvbSBcIi4uL2xpYi9hcGlcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RzL1Bvc3RcIjtcbmltcG9ydCBTdGF0dXMgZnJvbSBcIi4vcG9zdHMvU3RhdHVzXCI7XG5pbXBvcnQgeyB0b2dnbGVMb2FkaW5nIH0gZnJvbSBcIi4vc2xpY2VzL2xvYWRpbmdTbGljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoeyByZWxvYWRGZWVkLCBzZXRSZWxvYWRGZWVkIH0pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCBbcG9zdHMsIHNldFBvc3RzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgc2Vzc2lvbi51c2VyLl9pZCkudGhlbigoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgIHNldFBvc3RzKGRhdGEpO1xuICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9KTtcbiAgfSwgW3Nlc3Npb24sIHJlbG9hZEZlZWRdKTtcbiAgY29uc3QgaGFuZGxlRGVsZXRlID0gKHBvc3RJZCwgdXNlcklkKSA9PiB7XG4gICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZyk7XG4gICAgZGVsZXRlUG9zdChzZXNzaW9uLnRva2VuLCBwb3N0SWQsIHVzZXJJZCkudGhlbigoKSA9PiB7XG4gICAgICBkaXNwYXRjaCh0b2dnbGVMb2FkaW5nKTtcbiAgICAgIHNldFJlbG9hZEZlZWQoRGF0ZS5ub3coKSk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxTdGF0dXMgLz5cbiAgICAgIHtwb3N0cy5tYXAoKHBvc3QpID0+IChcbiAgICAgICAgPFBvc3Qga2V5PXtwb3N0Ll9pZH0gcG9zdD17cG9zdH0gaGFuZGxlRGVsZXRlPXtoYW5kbGVEZWxldGV9IC8+XG4gICAgICApKX1cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNldEFjdGl2ZUZvcm0gfSBmcm9tIFwiLi4vc2xpY2VzL2FjdGl2ZUZvcm1TbGljZVwiO1xuaW1wb3J0IHsgc2V0Q3VycmVudFBvc3QgfSBmcm9tIFwiLi4vc2xpY2VzL2N1cnJlbnRQb3N0U2xpY2VcIjtcbmltcG9ydCB7IFJlZ3VsYXJCdXR0b24gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgUG9zdFdyYXBwZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHtcbiAgQmlnQ29udGFpbmVyLFxuICBGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIsXG4gIEZsZXhDb250YWluZXIsXG59IGZyb20gXCIuLi91dGlsaXRpZXMvU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG4gIGNvbnN0IGN1cnJlbnRQb3N0ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5jdXJyZW50UG9zdC52YWx1ZSk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgaGFuZGxlRWRpdCA9ICgpID0+IHtcbiAgICBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwicG9zdC1lZGl0XCIpKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcIlwiKSk7XG4gICAgZGlzcGF0Y2goc2V0Q3VycmVudFBvc3QoXCJcIikpO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxCaWdDb250YWluZXI+XG4gICAgICA8UG9zdFdyYXBwZXI+XG4gICAgICAgIDxGbGV4Q29udGFpbmVyPlxuICAgICAgICAgIDxGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIgY2xhc3NOYW1lPVwiZ2FwLXlcIj5cbiAgICAgICAgICAgIHtzZXNzaW9uLnVzZXIuaWQgPT09IGN1cnJlbnRQb3N0LmF1dGhvci5faWQgJiYgKFxuICAgICAgICAgICAgICA8UmVndWxhckJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVFZGl0fT5FZGl0IHBvc3Q8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgc3R5bGU9e3sgZmxleEdyb3c6IDEsIGRpc3BsYXk6IFwiZmxleFwiLCB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIgfX1cbiAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9kaWVnb3JvbWVyb2RldlwiXG4gICAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJibHVlXCI+VmlzaXQgbXkgZ2l0aHViPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwicmVkXCIgb25DbGljaz17aGFuZGxlQ2xvc2V9PlxuICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICA8L0ZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAgPC9Qb3N0V3JhcHBlcj5cbiAgICA8L0JpZ0NvbnRhaW5lcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBHcmlkIH0gZnJvbSBcInJlYWN0LWxvYWRpbmctaWNvbnNcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgYmx1ZSwgZGFyayB9IGZyb20gXCIuLi91dGlsaXRpZXMvY29sb3JzXCI7XG5cbmNvbnN0IExvYWRXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICBwYWRkaW5nOiAycmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2Rhcmt9O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGN1YmljLWJlemllcigwLjA5LCAwLjU5LCAwLjE4LCAxLjE5KTtcbiAgJi5hY3RpdmUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBGdWxsQ29udEZsZXggPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB6LWluZGV4OiA0O1xuICBsZWZ0OiAwO1xuICB0b3A6IDA7XG4gIG9wYWNpdHk6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICR7ZGFya31iMztcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgY3ViaWMtYmV6aWVyKDAuMDksIDAuNTksIDAuMTgsIDEuMTkpO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgJi5hY3RpdmUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcbiAgfVxuYDtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBsb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5sb2FkaW5nLnZhbHVlKTtcblxuICByZXR1cm4gKFxuICAgIDxGdWxsQ29udEZsZXggY2xhc3NOYW1lPXtsb2FkaW5nICYmIFwiYWN0aXZlXCJ9PlxuICAgICAgPExvYWRXcmFwcGVyIGNsYXNzTmFtZT17bG9hZGluZyAmJiBcImFjdGl2ZVwifT5cbiAgICAgICAgPEdyaWQgZmlsbD17Ymx1ZX0gLz5cbiAgICAgIDwvTG9hZFdyYXBwZXI+XG4gICAgPC9GdWxsQ29udEZsZXg+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNldEFjdGl2ZUZvcm0gfSBmcm9tIFwiLi4vc2xpY2VzL2FjdGl2ZUZvcm1TbGljZVwiO1xuaW1wb3J0IHsgUmVndWxhckJ1dHRvbiB9IGZyb20gXCIuL0Zvcm1FbGVtZW50c1wiO1xuaW1wb3J0IHsgSW1hZ2VGb3JDb250YWluZXIsIFN0eWxlZEljb24sIFN0eWxlZFJlZ3VsYXJQIH0gZnJvbSBcIi4vTWlzY1wiO1xuaW1wb3J0IHsgQm9sZFJlZ3VsYXJMaW5rIH0gZnJvbSBcIi4vcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQge1xuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4vU3BhY2VDb250YWluZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHVzZXIgfSkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8RmxleENvbnRhaW5lciBjbGFzc05hbWU9XCJjZW50ZXIteVwiPlxuICAgICAgPENpcmNsZUNvbnRhaW5lcj5cbiAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17dXNlci5wcm9maWxlX3Bob3RvfSAvPlxuICAgICAgPC9DaXJjbGVDb250YWluZXI+XG4gICAgICA8RmxleENvbHVtbkdyb3dFbGVtZW50Q2VudGVyPlxuICAgICAgICA8U3R5bGVkUmVndWxhclAgY2xhc3NOYW1lPVwiZ3JleVwiPkxvZ2dlZCBpbiBhczwvU3R5bGVkUmVndWxhclA+XG4gICAgICAgIDxCb2xkUmVndWxhckxpbms+e3VzZXIuZnVsbF9uYW1lfTwvQm9sZFJlZ3VsYXJMaW5rPlxuICAgICAgPC9GbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICA8UmVndWxhckJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudCBuby1ncm93XCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcIlwiKSl9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWNpcmNsZS14bWFyayBsYXJnZVwiIC8+XG4gICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgPC9GbGV4Q29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0LCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgZmV0Y2hGZWVkLCBzZW5kRGF0YSB9IGZyb20gXCIuLi8uLi9saWIvYXBpXCI7XG5pbXBvcnQgeyBzZXRNZXNzYWdlT25Td2l0Y2ggfSBmcm9tIFwiLi4vLi4vbGliL2RhdGFQcm9jZXNzaW5nXCI7XG5pbXBvcnQgeyBzZXRBY3RpdmVGb3JtIH0gZnJvbSBcIi4uL3NsaWNlcy9hY3RpdmVGb3JtU2xpY2VcIjtcbmltcG9ydCB7IHNldEN1cnJlbnRQb3N0IH0gZnJvbSBcIi4uL3NsaWNlcy9jdXJyZW50UG9zdFNsaWNlXCI7XG5pbXBvcnQgeyB0b2dnbGVMb2FkaW5nIH0gZnJvbSBcIi4uL3NsaWNlcy9sb2FkaW5nU2xpY2VcIjtcbmltcG9ydCB7XG4gIEZvcm1GbGV4Q29udGFpbmVyLFxuICBSZWd1bGFyQnV0dG9uLFxuICBTcXVhcmVkSW5wdXQsXG4gIFNxdWFyZWRUZXh0QXJlYSxcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCBMb2dnZWRBc0hlYWRlciBmcm9tIFwiLi4vdXRpbGl0aWVzL0xvZ2dlZEFzSGVhZGVyXCI7XG5pbXBvcnQgeyBTdHlsZWRJY29uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NaXNjXCI7XG5pbXBvcnQgeyBQb3N0V3JhcHBlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQgeyBCaWdDb250YWluZXIsIEZsZXhDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuXG5jb25zdCBOZXdQb3N0ID0gKHsgdHlwZSwgc2Vzc2lvbiwgZGlzcGF0Y2gsIHNldFJlbG9hZEZlZWQsIGF1dGhvciwgcG9zdCB9KSA9PiB7XG4gIGNvbnN0IFtkYXRhVHlwZSwgc2V0RGF0YVR5cGVdID0gdXNlU3RhdGUoe30pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldERhdGFUeXBlKHNldE1lc3NhZ2VPblN3aXRjaCh0eXBlKSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gKGUpID0+IHtcbiAgICBkaXNwYXRjaCh0b2dnbGVMb2FkaW5nKCkpO1xuICAgIGNvbnN0IHVybCA9XG4gICAgICB0eXBlID09PSBcImNvbW1lbnRcIlxuICAgICAgICA/IGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS9wb3N0cy8ke3Bvc3QuX2lkfS9jb21tZW50c2BcbiAgICAgICAgOiBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtzZXNzaW9uLnVzZXIuX2lkfS9wb3N0c2A7XG4gICAgc2VuZERhdGEoXCJwb3N0XCIsIHVybCwgc2Vzc2lvbi50b2tlbiwgZSkudGhlbigoKSA9PiB7XG4gICAgICBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwiXCIpKTtcbiAgICAgIGZldGNoRmVlZChzZXNzaW9uLnRva2VuLCBwb3N0LmlkLCBcInBvc3RcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50UG9zdChkYXRhKSk7XG4gICAgICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8QmlnQ29udGFpbmVyPlxuICAgICAgPFBvc3RXcmFwcGVyIGNsYXNzTmFtZT1cInBvcC1vblwiPlxuICAgICAgICA8TG9nZ2VkQXNIZWFkZXIgdXNlcj17c2Vzc2lvbi51c2VyfSAvPlxuICAgICAgICA8Rm9ybUZsZXhDb250YWluZXJcbiAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlU3VibWl0fVxuICAgICAgICAgIGVuY1R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxSZWd1bGFyQnV0dG9uIGNsYXNzTmFtZT1cInRyYW5zcGFyZW50IHNlbGVjdGVkIG5vLWdyb3dcIj5cbiAgICAgICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT17YGZhLXNvbGlkICR7ZGF0YVR5cGUuaWNvbn1gfSAvPlxuICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICB7YE5ldyAke3R5cGUucmVwbGFjZShcIi1cIiwgXCIgXCIpfWB9XG4gICAgICAgICAgICB7YXV0aG9yLmZ1bGxfbmFtZSAmJlxuICAgICAgICAgICAgICBgIG9uICR7YXV0aG9yLmZ1bGxfbmFtZX0ke1xuICAgICAgICAgICAgICAgIGF1dGhvci5mdWxsX25hbWVbYXV0aG9yLmZ1bGxfbmFtZS5sZW5ndGggLSAxXSA9PT0gXCJzXCJcbiAgICAgICAgICAgICAgICAgID8gXCInXCJcbiAgICAgICAgICAgICAgICAgIDogXCInc1wiXG4gICAgICAgICAgICAgIH0gcG9zdGB9XG4gICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgIHt0eXBlID09PSBcImVtb3Rpb24tcG9zdFwiICYmIChcbiAgICAgICAgICAgIDxTcXVhcmVkSW5wdXRcbiAgICAgICAgICAgICAgbmFtZT1cImhlYWRpbmdcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17YEhvdyBhcmUgeW91IGZlZWxpbmcsICR7c2Vzc2lvbi51c2VyLmZpcnN0X25hbWV9PyDwn5C1LCDwn5i0IG9yIPCfkos/YH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8U3F1YXJlZFRleHRBcmVhIG5hbWU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9e2RhdGFUeXBlLm1lc3NhZ2V9IC8+XG4gICAgICAgICAge3R5cGUgPT09IFwiaW1hZ2UtcG9zdFwiICYmIChcbiAgICAgICAgICAgIDxTcXVhcmVkSW5wdXRcbiAgICAgICAgICAgICAgbmFtZT1cImltYWdlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNob3cgdXMgd2l0aCBhIHBpY3R1cmVcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cInBhZGQtMFwiPlxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwiYmx1ZVwiPntgU2F2ZSAke1xuICAgICAgICAgICAgICB0eXBlID09PSBcImNvbW1lbnRcIiA/IFwiY29tbWVudFwiIDogXCJwb3N0XCJcbiAgICAgICAgICAgIH1gfTwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICAgIDxSZWd1bGFyQnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNldEFjdGl2ZUZvcm0oXCJcIikpfT5cbiAgICAgICAgICAgICAgQ2FuY2VsIGFuZCBnbyBiYWNrXG4gICAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAgICA8L0Zvcm1GbGV4Q29udGFpbmVyPlxuICAgICAgPC9Qb3N0V3JhcHBlcj5cbiAgICA8L0JpZ0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCB7IGFjdGl2ZUZvcm0sIHNlc3Npb24sIGN1cnJlbnRQb3N0IH0gPSBzdGF0ZTtcbiAgbGV0IGF1dGhvciA9IHt9O1xuICBpZiAoY3VycmVudFBvc3QudmFsdWUpIHtcbiAgICBhdXRob3IgPSBjdXJyZW50UG9zdC52YWx1ZS5hdXRob3I7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3RpdmVGb3JtLnZhbHVlLFxuICAgIHNlc3Npb246IHNlc3Npb24udmFsdWUsXG4gICAgcG9zdDogY3VycmVudFBvc3QudmFsdWUsXG4gICAgYXV0aG9yLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKE5ld1Bvc3QpO1xuIiwiZXhwb3J0IGNvbnN0IHNldE1lc3NhZ2VPblN3aXRjaCA9ICh0eXBlKSA9PiB7XG4gIGxldCBpY29uID0gXCJcIjtcbiAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiY29tbWVudFwiOlxuICAgICAgaWNvbiA9IFwiZmEtY29tbWVudC1kb3RzXCI7XG4gICAgICBtZXNzYWdlID0gXCJXcml0ZSB5b3VyIGNvbW1lbnQuLi5cIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWFnZS1wb3N0XCI6XG4gICAgICBpY29uID0gXCJmYS1jYW1lcmEtcmV0cm9cIjtcbiAgICAgIG1lc3NhZ2UgPSBcIkRlc2NyaWJlIHRoZSBwaG90by4uLlwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVtb3Rpb24tcG9zdFwiOlxuICAgICAgaWNvbiA9IFwiZmEtZmFjZS1ncmluLXRlYXJzXCI7XG4gICAgICBtZXNzYWdlID0gXCJUZWxsIHVzIGFib3V0IGl0Li4uXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWNvbiA9IFwiZmEtYm9vay1vcGVuXCI7XG4gICAgICBtZXNzYWdlID0gXCJXcml0ZSB5b3VyIHRob3VnaHRzLi4uXCI7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4geyBpY29uLCBtZXNzYWdlIH07XG59O1xuXG5leHBvcnQgY29uc3Qgd3d3ID0gKCkgPT4ge307XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBmZXRjaEZlZWQsIHNlbmREYXRhIH0gZnJvbSBcIi4uLy4uL2xpYi9hcGlcIjtcbmltcG9ydCB7IHNldEFjdGl2ZUZvcm0gfSBmcm9tIFwiLi4vc2xpY2VzL2FjdGl2ZUZvcm1TbGljZVwiO1xuaW1wb3J0IHsgc2V0Q3VycmVudFBvc3QgfSBmcm9tIFwiLi4vc2xpY2VzL2N1cnJlbnRQb3N0U2xpY2VcIjtcbmltcG9ydCB7IHRvZ2dsZUxvYWRpbmcgfSBmcm9tIFwiLi4vc2xpY2VzL2xvYWRpbmdTbGljZVwiO1xuaW1wb3J0IHtcbiAgRm9ybUZsZXhDb250YWluZXIsXG4gIFJlZ3VsYXJCdXR0b24sXG4gIFNxdWFyZWRUZXh0QXJlYSxcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCBMb2dnZWRBc0hlYWRlciBmcm9tIFwiLi4vdXRpbGl0aWVzL0xvZ2dlZEFzSGVhZGVyXCI7XG5pbXBvcnQgeyBTdHlsZWRJY29uIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NaXNjXCI7XG5pbXBvcnQgeyBQb3N0V3JhcHBlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvcG9zdEVsZW1lbnRzXCI7XG5pbXBvcnQgeyBCaWdDb250YWluZXIsIEZsZXhDb250YWluZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1NwYWNlQ29udGFpbmVyc1wiO1xuXG5jb25zdCBFZGl0Q29tbWVudCA9ICh7IHNlc3Npb24sIGRpc3BhdGNoLCBjb21tZW50LCBwb3N0IH0pID0+IHtcbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gKGUpID0+IHtcbiAgICBkaXNwYXRjaCh0b2dnbGVMb2FkaW5nKCkpO1xuICAgIGNvbnN0IHVybCA9IGBodHRwczovL2ZyZW5kcy1zb2NpYWwuaGVyb2t1YXBwLmNvbS9wb3N0cy8ke3Bvc3QuX2lkfS9jb21tZW50cy8ke2NvbW1lbnQuX2lkfWA7XG4gICAgc2VuZERhdGEoXCJwdXRcIiwgdXJsLCBzZXNzaW9uLnRva2VuLCBlKS50aGVuKCgpID0+IHtcbiAgICAgIGRpc3BhdGNoKHNldEFjdGl2ZUZvcm0oXCJcIikpO1xuICAgICAgZmV0Y2hGZWVkKHNlc3Npb24udG9rZW4sIHBvc3QuaWQsIFwicG9zdFwiKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHNldEN1cnJlbnRQb3N0KGRhdGEpKTtcbiAgICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gKFxuICAgIDxCaWdDb250YWluZXI+XG4gICAgICA8UG9zdFdyYXBwZXIgY2xhc3NOYW1lPVwicG9wLW9uXCI+XG4gICAgICAgIDxMb2dnZWRBc0hlYWRlciB1c2VyPXtzZXNzaW9uLnVzZXJ9IC8+XG4gICAgICAgIDxGb3JtRmxleENvbnRhaW5lclxuICAgICAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9XG4gICAgICAgICAgZW5jVHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIlxuICAgICAgICA+XG4gICAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwidHJhbnNwYXJlbnQgc2VsZWN0ZWQgbm8tZ3Jvd1wiPlxuICAgICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEta2V5Ym9hcmRcIiAvPlxuICAgICAgICAgICAgJm5ic3A7IEVkaXRpbmcgY29tbWVudFxuICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICA8U3F1YXJlZFRleHRBcmVhXG4gICAgICAgICAgICBuYW1lPVwidGV4dFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFkZCBzb21ldGhpbmcgdG8gc2F5XCJcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17Y29tbWVudC50ZXh0fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwicGFkZC0wXCI+XG4gICAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJibHVlXCI+U2F2ZSBjb21tZW50PC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b24gb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcIlwiKSl9PlxuICAgICAgICAgICAgICBDYW5jZWwgYW5kIGdvIGJhY2tcbiAgICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICAgIDwvRm9ybUZsZXhDb250YWluZXI+XG4gICAgICA8L1Bvc3RXcmFwcGVyPlxuICAgIDwvQmlnQ29udGFpbmVyPlxuICApO1xufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIGNvbnN0IHsgYWN0aXZlRm9ybSwgc2Vzc2lvbiwgY3VycmVudENvbW1lbnQsIGN1cnJlbnRQb3N0IH0gPSBzdGF0ZTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3RpdmVGb3JtLnZhbHVlLFxuICAgIHNlc3Npb246IHNlc3Npb24udmFsdWUsXG4gICAgcG9zdDogY3VycmVudFBvc3QudmFsdWUsXG4gICAgY29tbWVudDogY3VycmVudENvbW1lbnQudmFsdWUsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoRWRpdENvbW1lbnQpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGZldGNoRmVlZCwgc2VuZERhdGEgfSBmcm9tIFwiLi4vLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgc2V0TWVzc2FnZU9uU3dpdGNoIH0gZnJvbSBcIi4uLy4uL2xpYi9kYXRhUHJvY2Vzc2luZ1wiO1xuaW1wb3J0IHsgc2V0QWN0aXZlRm9ybSB9IGZyb20gXCIuLi9zbGljZXMvYWN0aXZlRm9ybVNsaWNlXCI7XG5pbXBvcnQgeyBzZXRDdXJyZW50UG9zdCB9IGZyb20gXCIuLi9zbGljZXMvY3VycmVudFBvc3RTbGljZVwiO1xuaW1wb3J0IHsgdG9nZ2xlTG9hZGluZyB9IGZyb20gXCIuLi9zbGljZXMvbG9hZGluZ1NsaWNlXCI7XG5pbXBvcnQge1xuICBGb3JtRmxleENvbnRhaW5lcixcbiAgUmVndWxhckJ1dHRvbixcbiAgU3F1YXJlZElucHV0LFxuICBTcXVhcmVkVGV4dEFyZWEsXG59IGZyb20gXCIuLi91dGlsaXRpZXMvRm9ybUVsZW1lbnRzXCI7XG5pbXBvcnQgTG9nZ2VkQXNIZWFkZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9Mb2dnZWRBc0hlYWRlclwiO1xuaW1wb3J0IHsgU3R5bGVkSWNvbiB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWlzY1wiO1xuaW1wb3J0IHsgUG9zdFdyYXBwZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHsgQmlnQ29udGFpbmVyLCBGbGV4Q29udGFpbmVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuY29uc3QgRWRpdFBvc3QgPSAoeyB0eXBlLCBzZXNzaW9uLCBkaXNwYXRjaCwgcG9zdCB9KSA9PiB7XG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XG4gICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9mcmVuZHMtc29jaWFsLmhlcm9rdWFwcC5jb20vdXNlcnMvJHtzZXNzaW9uLnVzZXIuX2lkfS9wb3N0cy8ke3Bvc3QuX2lkfWA7XG4gICAgc2VuZERhdGEoXCJwdXRcIiwgdXJsLCBzZXNzaW9uLnRva2VuLCBlKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBkaXNwYXRjaChzZXRBY3RpdmVGb3JtKFwiXCIpKTtcbiAgICAgIGZldGNoRmVlZChzZXNzaW9uLnRva2VuLCBwb3N0LmlkLCBcInBvc3RcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBkaXNwYXRjaChzZXRDdXJyZW50UG9zdChkYXRhKSk7XG4gICAgICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8QmlnQ29udGFpbmVyPlxuICAgICAgPFBvc3RXcmFwcGVyIGNsYXNzTmFtZT1cInBvcC1vblwiPlxuICAgICAgICA8TG9nZ2VkQXNIZWFkZXIgdXNlcj17c2Vzc2lvbi51c2VyfSAvPlxuICAgICAgICA8Rm9ybUZsZXhDb250YWluZXJcbiAgICAgICAgICBvblN1Ym1pdD17aGFuZGxlU3VibWl0fVxuICAgICAgICAgIGVuY1R5cGU9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxSZWd1bGFyQnV0dG9uIGNsYXNzTmFtZT1cInRyYW5zcGFyZW50IHNlbGVjdGVkIG5vLWdyb3dcIj5cbiAgICAgICAgICAgIDxTdHlsZWRJY29uIGNsYXNzTmFtZT1cImZhLXNvbGlkIGZhLWhpZ2hsaWdodGVyXCIgLz5cbiAgICAgICAgICAgICZuYnNwOyBFZGl0aW5nIHBvc3RcbiAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAge3Bvc3QuaGVhZGluZyAmJiAoXG4gICAgICAgICAgICA8U3F1YXJlZElucHV0XG4gICAgICAgICAgICAgIG5hbWU9XCJoZWFkaW5nXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2BIb3cgYXJlIHlvdSBmZWVsaW5nLCAke3Nlc3Npb24udXNlci5maXJzdF9uYW1lfT8g8J+QtSwg8J+YtCBvciDwn5KLP2B9XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17cG9zdC5oZWFkaW5nfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxTcXVhcmVkVGV4dEFyZWFcbiAgICAgICAgICAgIG5hbWU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVGVsbCB1cyBhYm91dCBhbnl0aGluZy4uLlwiXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3Bvc3QudGV4dH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtwb3N0LmltYWdlICYmIChcbiAgICAgICAgICAgIDxTcXVhcmVkSW5wdXRcbiAgICAgICAgICAgICAgbmFtZT1cImltYWdlXCJcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNob3cgdXMgd2l0aCBhIHBpY3R1cmVcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxGbGV4Q29udGFpbmVyIGNsYXNzTmFtZT1cInBhZGQtMFwiPlxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b24gY2xhc3NOYW1lPVwiYmx1ZVwiPlNhdmUgcG9zdDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICAgIDxSZWd1bGFyQnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNldEFjdGl2ZUZvcm0oXCJcIikpfT5cbiAgICAgICAgICAgICAgQ2FuY2VsIGFuZCBnbyBiYWNrXG4gICAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgICAgPC9GbGV4Q29udGFpbmVyPlxuICAgICAgICA8L0Zvcm1GbGV4Q29udGFpbmVyPlxuICAgICAgPC9Qb3N0V3JhcHBlcj5cbiAgICA8L0JpZ0NvbnRhaW5lcj5cbiAgKTtcbn07XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCB7IGFjdGl2ZUZvcm0sIHNlc3Npb24sIGN1cnJlbnRQb3N0IH0gPSBzdGF0ZTtcbiAgbGV0IGF1dGhvciA9IHt9O1xuICBpZiAoY3VycmVudFBvc3QudmFsdWUpIHtcbiAgICBhdXRob3IgPSBjdXJyZW50UG9zdC52YWx1ZS5hdXRob3I7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3RpdmVGb3JtLnZhbHVlLFxuICAgIHNlc3Npb246IHNlc3Npb24udmFsdWUsXG4gICAgcG9zdDogY3VycmVudFBvc3QudmFsdWUsXG4gICAgYXV0aG9yLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEVkaXRQb3N0KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGZldGNoRmVlZCwgc2VuZERhdGEgfSBmcm9tIFwiLi4vLi4vbGliL2FwaVwiO1xuaW1wb3J0IHsgc2V0QWN0aXZlRm9ybSB9IGZyb20gXCIuLi9zbGljZXMvYWN0aXZlRm9ybVNsaWNlXCI7XG5pbXBvcnQgeyBzZXRDdXJyZW50UG9zdCB9IGZyb20gXCIuLi9zbGljZXMvY3VycmVudFBvc3RTbGljZVwiO1xuaW1wb3J0IHsgdG9nZ2xlTG9hZGluZyB9IGZyb20gXCIuLi9zbGljZXMvbG9hZGluZ1NsaWNlXCI7XG5pbXBvcnQgeyBkZWxldGVTZXNzaW9uLCB3cml0ZVNlc3Npb24gfSBmcm9tIFwiLi4vc2xpY2VzL3Nlc3Npb25TbGljZVwiO1xuaW1wb3J0IHtcbiAgRm9ybUZsZXhDb250YWluZXIsXG4gIFJlZ3VsYXJCdXR0b24sXG4gIFNxdWFyZWRJbnB1dCxcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9Gb3JtRWxlbWVudHNcIjtcbmltcG9ydCB7XG4gIEltYWdlRm9yQ29udGFpbmVyLFxuICBTZXBhcmF0b3IsXG4gIFN0eWxlZEljb24sXG4gIFN0eWxlZFJlZ3VsYXJQLFxufSBmcm9tIFwiLi4vdXRpbGl0aWVzL01pc2NcIjtcbmltcG9ydCB7IEJvbGRSZWd1bGFyTGluaywgUG9zdFdyYXBwZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3Bvc3RFbGVtZW50c1wiO1xuaW1wb3J0IHtcbiAgQmlnQ29udGFpbmVyLFxuICBDaXJjbGVDb250YWluZXIsXG4gIEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcixcbiAgRmxleENvbnRhaW5lcixcbn0gZnJvbSBcIi4uL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHNlc3Npb24gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnNlc3Npb24udmFsdWUpO1xuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoZSkgPT4ge1xuICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL3VzZXJzLyR7c2Vzc2lvbi51c2VyLl9pZH0vYDtcbiAgICBoaXN0b3J5LnB1c2goXCIvbG9naW5cIik7XG4gICAgc2VuZERhdGEoXCJwdXRcIiwgdXJsLCBzZXNzaW9uLnRva2VuLCBlKS50aGVuKCgpID0+IHtcbiAgICAgIGRpc3BhdGNoKHNldEFjdGl2ZUZvcm0oXCJcIikpO1xuICAgICAgZGlzcGF0Y2goZGVsZXRlU2Vzc2lvbigpKTtcbiAgICAgIGRpc3BhdGNoKHRvZ2dsZUxvYWRpbmcoKSk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPEJpZ0NvbnRhaW5lcj5cbiAgICAgIDxQb3N0V3JhcHBlcj5cbiAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwiY2VudGVyLXlcIj5cbiAgICAgICAgICA8Q2lyY2xlQ29udGFpbmVyPlxuICAgICAgICAgICAgPEltYWdlRm9yQ29udGFpbmVyIHNyYz17c2Vzc2lvbi51c2VyLnByb2ZpbGVfcGhvdG99IC8+XG4gICAgICAgICAgPC9DaXJjbGVDb250YWluZXI+XG4gICAgICAgICAgPEZsZXhDb2x1bW5Hcm93RWxlbWVudENlbnRlcj5cbiAgICAgICAgICAgIDxTdHlsZWRSZWd1bGFyUCBjbGFzc05hbWU9XCJncmV5XCI+TG9nZ2VkIGluIGFzPC9TdHlsZWRSZWd1bGFyUD5cbiAgICAgICAgICAgIDxCb2xkUmVndWxhckxpbms+e3Nlc3Npb24udXNlci5mdWxsX25hbWV9PC9Cb2xkUmVndWxhckxpbms+XG4gICAgICAgICAgPC9GbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXI+XG4gICAgICAgICAgPFJlZ3VsYXJCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYW5zcGFyZW50IG5vLWdyb3dcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcIlwiKSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFN0eWxlZEljb24gY2xhc3NOYW1lPVwiZmEtc29saWQgZmEtY2lyY2xlLXhtYXJrIGxhcmdlXCIgLz5cbiAgICAgICAgICA8L1JlZ3VsYXJCdXR0b24+XG4gICAgICAgIDwvRmxleENvbnRhaW5lcj5cbiAgICAgICAgPEZvcm1GbGV4Q29udGFpbmVyXG4gICAgICAgICAgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgICBlbmNUeXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiXG4gICAgICAgID5cbiAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJ0cmFuc3BhcmVudCBzZWxlY3RlZCBuby1ncm93XCI+XG4gICAgICAgICAgICA8U3R5bGVkSWNvbiBjbGFzc05hbWU9XCJmYS1zb2xpZCBmYS13cmVuY2hcIiAvPlxuICAgICAgICAgICAgJm5ic3A7RWRpdCBwcm9maWxlXG4gICAgICAgICAgPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgIDxTcXVhcmVkSW5wdXRcbiAgICAgICAgICAgIG5hbWU9XCJwcm9maWxlX3Bob3RvXCJcbiAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ2hhbmdlIHByb2ZpbGUgcGljdHVyZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U3F1YXJlZElucHV0XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkZpcnN0IG5hbWVcIlxuICAgICAgICAgICAgbmFtZT1cImZpcnN0X25hbWVcIlxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtzZXNzaW9uLnVzZXIuZmlyc3RfbmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxTcXVhcmVkSW5wdXRcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTGFzdCBuYW1lXCJcbiAgICAgICAgICAgIG5hbWU9XCJsYXN0X25hbWVcIlxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtzZXNzaW9uLnVzZXIubGFzdF9uYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEZsZXhDb250YWluZXIgY2xhc3NOYW1lPVwicGFkZC0wXCI+XG4gICAgICAgICAgICA8UmVndWxhckJ1dHRvbiBjbGFzc05hbWU9XCJibHVlXCI+U2F2ZSBwcm9maWxlPC9SZWd1bGFyQnV0dG9uPlxuICAgICAgICAgICAgPFJlZ3VsYXJCdXR0b24gb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2V0QWN0aXZlRm9ybShcIlwiKSl9PlxuICAgICAgICAgICAgICBDYW5jZWwgYW5kIGdvIGJhY2tcbiAgICAgICAgICAgIDwvUmVndWxhckJ1dHRvbj5cbiAgICAgICAgICA8L0ZsZXhDb250YWluZXI+XG4gICAgICAgIDwvRm9ybUZsZXhDb250YWluZXI+XG4gICAgICA8L1Bvc3RXcmFwcGVyPlxuICAgIDwvQmlnQ29udGFpbmVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgR2VuZXJhbE9wdGlvbnMgZnJvbSBcIi4uL3BvcHVwcy9HZW5lcmFsT3B0aW9uc1wiO1xuaW1wb3J0IHsgRnVsbENvbnRGbGV4IH0gZnJvbSBcIi4uL3BvcHVwcy9Mb2FkaW5nXCI7XG5pbXBvcnQgTmV3UG9zdCBmcm9tIFwiLi4vcG9zdHMvTmV3UG9zdFwiO1xuaW1wb3J0IEVkaXRDb21tZW50IGZyb20gXCIuL0VkaXRDb21tZW50XCI7XG5pbXBvcnQgRWRpdFBvc3QgZnJvbSBcIi4vRWRpdFBvc3RcIjtcbmltcG9ydCBFZGl0UHJvZmlsZSBmcm9tIFwiLi9FZGl0UHJvZmlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoeyBzZXRSZWxvYWRGZWVkIH0pID0+IHtcbiAgY29uc3QgYWN0aXZlRm9ybSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYWN0aXZlRm9ybS52YWx1ZSk7XG4gIHJldHVybiAoXG4gICAgPEZ1bGxDb250RmxleCBjbGFzc05hbWU9e2FjdGl2ZUZvcm0gJiYgXCJhY3RpdmVcIn0+XG4gICAgICB7KGFjdGl2ZUZvcm0gPT09IFwiY29tbWVudFwiIHx8IGFjdGl2ZUZvcm0uc3BsaXQoXCItXCIpWzFdID09PSBcInBvc3RcIikgJiYgKFxuICAgICAgICA8TmV3UG9zdCB0eXBlPXthY3RpdmVGb3JtfSBzZXRSZWxvYWRGZWVkPXtzZXRSZWxvYWRGZWVkfSAvPlxuICAgICAgKX1cbiAgICAgIHthY3RpdmVGb3JtID09PSBcInBvc3QtbW9yZVwiICYmIDxHZW5lcmFsT3B0aW9ucyAvPn1cbiAgICAgIHthY3RpdmVGb3JtID09PSBcInBvc3QtZWRpdFwiICYmIDxFZGl0UG9zdCAvPn1cbiAgICAgIHthY3RpdmVGb3JtID09PSBcImNvbW1lbnQtZWRpdFwiICYmIDxFZGl0Q29tbWVudCAvPn1cbiAgICAgIHthY3RpdmVGb3JtID09PSBcInByb2ZpbGUtZWRpdFwiICYmIDxFZGl0UHJvZmlsZSAvPn1cbiAgICA8L0Z1bGxDb250RmxleD5cbiAgKTtcbn07XG4iLCJpbXBvcnQgaW8gZnJvbSBcIi4vYnVpbGQvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IE1hbmFnZXIgPSBpby5NYW5hZ2VyO1xuZXhwb3J0IGNvbnN0IFNvY2tldCA9IGlvLlNvY2tldDtcbmV4cG9ydCB7IGlvIH07XG5leHBvcnQgZGVmYXVsdCBpbztcbiIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuZXhwb3J0IGNvbnN0IHJlYWxUaW1lU2xpY2UgPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6IFwicmVhbFRpbWVcIixcbiAgaW5pdGlhbFN0YXRlOiB7XG4gICAgbm90aWZpY2F0aW9uczogW10sXG4gICAgY2hhdHJvb21zOiBbXSxcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRGaWVsZChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICBzdGF0ZVthY3Rpb24ucGF5bG9hZC5maWVsZF0gPSBhY3Rpb24ucGF5bG9hZC5kYXRhO1xuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHsgc2V0RmllbGQgfSA9IHJlYWxUaW1lU2xpY2UuYWN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgcmVhbFRpbWVTbGljZS5yZWR1Y2VyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgaW8gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcbmltcG9ydCB7IGZldGNoRmVlZCB9IGZyb20gXCIuLi8uLi9saWIvYXBpXCI7XG5pbXBvcnQgeyBzZXRGaWVsZCB9IGZyb20gXCIuLi9zbGljZXMvcmVhbFRpbWVTbGljZVwiO1xuaW1wb3J0IHsgc2V0QWxsUmVxdWVzdHMsIHdyaXRlU2Vzc2lvbiB9IGZyb20gXCIuLi9zbGljZXMvc2Vzc2lvblNsaWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHNldFVucmVhZE5vdGlmaWNhdGlvbnMgfSkgPT4ge1xuICBjb25zdCBzZXNzaW9uID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zZXNzaW9uLnZhbHVlKTtcbiAgY29uc3Qgbm90aWZpY2F0aW9ucyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucmVhbFRpbWUubm90aWZpY2F0aW9ucyk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzb2NrZXQgPSBpbyhcImh0dHBzOi8vZnJlbmRzLXNvY2lhbC5oZXJva3VhcHAuY29tL1wiKTtcbiAgICBzb2NrZXQub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgIHNvY2tldC5lbWl0KFwiZW50ZXJcIiwgc2Vzc2lvbi51c2VyLl9pZCk7XG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKGBtZXNzYWdlYCwgKCkgPT4ge1xuICAgICAgZmV0Y2hGZWVkKHNlc3Npb24udG9rZW4sIHNlc3Npb24udXNlcj8uX2lkLCBcImNoYXRyb29tc1wiKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHNldEZpZWxkKHsgZmllbGQ6IFwiY2hhdHJvb21zXCIsIGRhdGEgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgc29ja2V0Lm9uKGBub3RpZmljYXRpb25gLCAoKSA9PiB7XG4gICAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgc2Vzc2lvbi51c2VyPy5faWQsIFwibm90aWZpY2F0aW9uc1wiKS50aGVuKFxuICAgICAgICAoZGF0YSkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKHNldEZpZWxkKHsgZmllbGQ6IFwibm90aWZpY2F0aW9uc1wiLCBkYXRhIH0pKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgICBzb2NrZXQub24oYGZyaWVuZGAsICgpID0+IHtcbiAgICAgIGZldGNoRmVlZChzZXNzaW9uLnRva2VuLCBzZXNzaW9uLnVzZXI/Ll9pZCwgXCJ1c2VyXCIpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgZnJpZW5kcywgc2VudF9yZXF1ZXN0cywgcmVjZWl2ZWRfcmVxdWVzdHMgfSA9IGRhdGE7XG4gICAgICAgIGRpc3BhdGNoKHNldEFsbFJlcXVlc3RzKHsgZnJpZW5kcywgc2VudF9yZXF1ZXN0cywgcmVjZWl2ZWRfcmVxdWVzdHMgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZmV0Y2hGZWVkKHNlc3Npb24udG9rZW4sIHNlc3Npb24udXNlcj8uX2lkLCBcImNoYXRyb29tc1wiKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBkaXNwYXRjaChzZXRGaWVsZCh7IGZpZWxkOiBcImNoYXRyb29tc1wiLCBkYXRhIH0pKTtcbiAgICB9KTtcbiAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgc2Vzc2lvbi51c2VyPy5faWQsIFwibm90aWZpY2F0aW9uc1wiKS50aGVuKFxuICAgICAgKGRhdGEpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goc2V0RmllbGQoeyBmaWVsZDogXCJub3RpZmljYXRpb25zXCIsIGRhdGEgfSkpO1xuICAgICAgfVxuICAgICk7XG4gICAgZmV0Y2hGZWVkKHNlc3Npb24udG9rZW4sIHNlc3Npb24udXNlcj8uX2lkLCBcInVzZXJcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYgKCFkYXRhKSByZXR1cm47XG4gICAgICBjb25zdCB7IGZyaWVuZHMsIHNlbnRfcmVxdWVzdHMsIHJlY2VpdmVkX3JlcXVlc3RzIH0gPSBkYXRhO1xuICAgICAgZGlzcGF0Y2goc2V0QWxsUmVxdWVzdHMoeyBmcmllbmRzLCBzZW50X3JlcXVlc3RzLCByZWNlaXZlZF9yZXF1ZXN0cyB9KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHNvY2tldC5kaXNjb25uZWN0KCk7XG4gIH0sIFtdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRVbnJlYWROb3RpZmljYXRpb25zKG5vdGlmaWNhdGlvbnMuZmlsdGVyKChlbCkgPT4gIWVsLnJlYWQpKTtcbiAgfSwgW25vdGlmaWNhdGlvbnNdKTtcbiAgcmV0dXJuIDw+PC8+O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnksIHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGRlbGV0ZVBvc3QsIGZldGNoRmVlZCB9IGZyb20gXCIuLi9saWIvYXBpXCI7XG5pbXBvcnQgRnJpZW5kUmVxdWVzdHMgZnJvbSBcIi4vRnJpZW5kUmVxdWVzdHNcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RzL1Bvc3RcIjtcbmltcG9ydCB7IHRvZ2dsZUxvYWRpbmcgfSBmcm9tIFwiLi9zbGljZXMvbG9hZGluZ1NsaWNlXCI7XG5pbXBvcnQgUHJvZmlsZUhlYWRlciBmcm9tIFwiLi91dGlsaXRpZXMvUHJvZmlsZUhlYWRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IHsgdXNlcklkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBbcG9zdHMsIHNldFBvc3RzXSA9IHVzZVN0YXRlKFtdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgdXNlcklkLCBcInVzZXJcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYgKCEoXCJfaWRcIiBpbiBkYXRhKSkgaGlzdG9yeS5wdXNoKFwiL1wiKTtcbiAgICAgIGVsc2Ugc2V0VXNlcihkYXRhKTtcbiAgICB9KTtcbiAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgdXNlcklkKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICBzZXRQb3N0cyhkYXRhKTtcbiAgICB9KTtcbiAgfSwgW3VzZXJJZF0pO1xuICBjb25zdCBoYW5kbGVEZWxldGUgPSAocG9zdElkLCB1c2VySWQpID0+IHtcbiAgICBkaXNwYXRjaCh0b2dnbGVMb2FkaW5nKCkpO1xuICAgIGRlbGV0ZVBvc3Qoc2Vzc2lvbi50b2tlbiwgcG9zdElkLCB1c2VySWQpLnRoZW4oKCkgPT4ge1xuICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxQcm9maWxlSGVhZGVyIHVzZXI9e3VzZXJ9IHNlc3Npb249e3Nlc3Npb259IC8+XG4gICAgICB7dXNlcklkID09PSBzZXNzaW9uPy51c2VyPy5faWQgJiYgPEZyaWVuZFJlcXVlc3RzIC8+fVxuICAgICAge3Bvc3RzLm1hcChcbiAgICAgICAgKHBvc3QpID0+XG4gICAgICAgICAgcG9zdC5hdXRob3IgJiYgPFBvc3QgcG9zdD17cG9zdH0gaGFuZGxlRGVsZXRlPXtoYW5kbGVEZWxldGV9IC8+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnksIHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGRlbGV0ZVBvc3QsIGZldGNoRmVlZCB9IGZyb20gXCIuLi9saWIvYXBpXCI7XG5pbXBvcnQgUG9zdCBmcm9tIFwiLi9wb3N0cy9Qb3N0XCI7XG5pbXBvcnQgeyB0b2dnbGVMb2FkaW5nIH0gZnJvbSBcIi4vc2xpY2VzL2xvYWRpbmdTbGljZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHsgcG9zdElkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgW3Bvc3QsIHNldFBvc3RdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG4gIGNvbnN0IGhhbmRsZURlbGV0ZSA9IChkZWxJZCwgdXNlcklkKSA9PiB7XG4gICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICBkZWxldGVQb3N0KHNlc3Npb24udG9rZW4sIGRlbElkLCB1c2VySWQpLnRoZW4oKCkgPT4ge1xuICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgfSk7XG4gIH07XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICBmZXRjaEZlZWQoc2Vzc2lvbi50b2tlbiwgcG9zdElkLCBcInBvc3RcIikudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYgKCFkYXRhLl9pZCkgcmV0dXJuIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgICBzZXRQb3N0KGRhdGEpO1xuICAgICAgZGlzcGF0Y2godG9nZ2xlTG9hZGluZygpKTtcbiAgICB9KTtcbiAgfSwgW3Bvc3RJZF0pO1xuICByZXR1cm4gcG9zdCAmJiA8UG9zdCBwb3N0PXtwb3N0fSBoYW5kbGVEZWxldGU9e2hhbmRsZURlbGV0ZX0gLz47XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSZWRpcmVjdCwgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBDaGF0cm9vbSBmcm9tIFwiLi9DaGF0cm9vbVwiO1xuaW1wb3J0IEZyaWVuZFJlcXVlc3RzIGZyb20gXCIuL0ZyaWVuZFJlcXVlc3RzXCI7XG5pbXBvcnQgU2VhcmNoIGZyb20gXCIuL3NlYXJjaC9TZWFyY2hcIjtcbmltcG9ydCBOb3RpZmljYXRpb25zIGZyb20gXCIuL3BvcHVwcy9Ob3RpZmljYXRpb25zXCI7XG5pbXBvcnQgUHJvZmlsZUhlYWRlciBmcm9tIFwiLi91dGlsaXRpZXMvUHJvZmlsZUhlYWRlclwiO1xuaW1wb3J0IE5hdkJhciBmcm9tIFwiLi9OYXZCYXJcIjtcbmltcG9ydCBGZWVkIGZyb20gXCIuL0ZlZWRcIjtcbmltcG9ydCBGb3JtcyBmcm9tIFwiLi9mb3Jtcy9Gb3Jtc1wiO1xuaW1wb3J0IEhhbmRsZVJlYWxUaW1lIGZyb20gXCIuL3V0aWxpdGllcy9IYW5kbGVSZWFsVGltZVwiO1xuaW1wb3J0IFVzZXJQcm9maWxlIGZyb20gXCIuL1VzZXJQcm9maWxlXCI7XG5pbXBvcnQgU2luZ2xlUG9zdCBmcm9tIFwiLi9TaW5nbGVQb3N0XCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc2Vzc2lvbi52YWx1ZSk7XG4gIGNvbnN0IFtyZWxvYWRGZWVkLCBzZXRSZWxvYWRGZWVkXSA9IHVzZVN0YXRlKERhdGUubm93KCkpO1xuICBjb25zdCBbdW5yZWFkTm90aWZpY2F0aW9ucywgc2V0VW5yZWFkTm90aWZpY2F0aW9uc10gPSB1c2VTdGF0ZShbXSk7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHshc2Vzc2lvbiAmJiA8UmVkaXJlY3QgdG89XCIvbG9naW5cIiAvPn1cbiAgICAgIDxIYW5kbGVSZWFsVGltZVxuICAgICAgICBzZXRVbnJlYWROb3RpZmljYXRpb25zPXtzZXRVbnJlYWROb3RpZmljYXRpb25zfVxuICAgICAgICBzZXNzaW9uPXtzZXNzaW9ufVxuICAgICAgLz5cbiAgICAgIHtzZXNzaW9uLnVzZXIgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxOYXZCYXIgdW5yZWFkTm90aWZpY2F0aW9ucz17dW5yZWFkTm90aWZpY2F0aW9uc30gLz5cbiAgICAgICAgICA8Rm9ybXMgc2V0UmVsb2FkRmVlZD17c2V0UmVsb2FkRmVlZH0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBleGFjdD5cbiAgICAgICAgICAgIDxGZWVkIHJlbG9hZEZlZWQ9e3JlbG9hZEZlZWR9IHNldFJlbG9hZEZlZWQ9e3NldFJlbG9hZEZlZWR9IC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jaGF0cm9vbXNcIj5cbiAgICAgICAgICAgIDxDaGF0cm9vbSAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcmVxdWVzdHNcIj5cbiAgICAgICAgICAgIDxGcmllbmRSZXF1ZXN0cyAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbm90aWZpY2F0aW9uc1wiPlxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbnMgLz5cbiAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlYXJjaFwiPlxuICAgICAgICAgICAgPFNlYXJjaCAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdXNlcnMvOnVzZXJJZFwiPlxuICAgICAgICAgICAgPFVzZXJQcm9maWxlIC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wb3N0cy86cG9zdElkXCI+XG4gICAgICAgICAgICA8U2luZ2xlUG9zdCAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBIYXNoUm91dGVyLCBSb3V0ZSwgU3dpdGNoIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgR2xvYmFsU3R5bGVzIGZyb20gXCIuL3V0aWxpdGllcy9HbG9iYWxTdHlsZXNcIjtcbmltcG9ydCB7IEJpZ0NvbnRhaW5lciB9IGZyb20gXCIuL3V0aWxpdGllcy9TcGFjZUNvbnRhaW5lcnNcIjtcbmltcG9ydCBMb2dpbiBmcm9tIFwiLi9Mb2dpblwiO1xuaW1wb3J0IFByb3RlY3RlZFJvdXRlcyBmcm9tIFwiLi9Qcm90ZWN0ZWRSb3V0ZXNcIjtcbmltcG9ydCB7IHNhdmVTZXNzaW9uIH0gZnJvbSBcIi4vc2xpY2VzL3Nlc3Npb25TbGljZVwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4vcG9wdXBzL0xvYWRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiZnJlbmRzX3Nlc3Npb25cIik7XG4gICAgaWYgKHNlc3Npb24pIGRpc3BhdGNoKHNhdmVTZXNzaW9uKEpTT04ucGFyc2Uoc2Vzc2lvbikpKTtcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDxCaWdDb250YWluZXI+XG4gICAgICA8TG9hZGluZyAvPlxuICAgICAgPEhhc2hSb3V0ZXI+XG4gICAgICAgIDxHbG9iYWxTdHlsZXMgLz5cbiAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb2dpblwiPlxuICAgICAgICAgICAgPExvZ2luIC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIj5cbiAgICAgICAgICAgIDxQcm90ZWN0ZWRSb3V0ZXMgLz5cbiAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICAgIDwvSGFzaFJvdXRlcj5cbiAgICA8L0JpZ0NvbnRhaW5lcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgc2Vzc2lvbiBmcm9tIFwiLi9jb21wb25lbnRzL3NsaWNlcy9zZXNzaW9uU2xpY2VcIjtcbmltcG9ydCBsb2FkaW5nIGZyb20gXCIuL2NvbXBvbmVudHMvc2xpY2VzL2xvYWRpbmdTbGljZVwiO1xuaW1wb3J0IGFjdGl2ZUZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9zbGljZXMvYWN0aXZlRm9ybVNsaWNlXCI7XG5pbXBvcnQgY3VycmVudFBvc3QgZnJvbSBcIi4vY29tcG9uZW50cy9zbGljZXMvY3VycmVudFBvc3RTbGljZVwiO1xuaW1wb3J0IGN1cnJlbnRDb21tZW50IGZyb20gXCIuL2NvbXBvbmVudHMvc2xpY2VzL2N1cnJlbnRDb21tZW50U2xpY2VcIjtcbmltcG9ydCByZWFsVGltZSBmcm9tIFwiLi9jb21wb25lbnRzL3NsaWNlcy9yZWFsVGltZVNsaWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZ3VyZVN0b3JlKHtcbiAgcmVkdWNlcjoge1xuICAgIHNlc3Npb24sXG4gICAgbG9hZGluZyxcbiAgICBhY3RpdmVGb3JtLFxuICAgIGN1cnJlbnRQb3N0LFxuICAgIGN1cnJlbnRDb21tZW50LFxuICAgIHJlYWxUaW1lLFxuICB9LFxufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vY29tcG9uZW50cy9BcHBcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZVwiO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxBcHAgLz5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuKTtcbiJdLCJuYW1lcyI6WyJCYWNrb2ZmIiwib3B0cyIsInRoaXMiLCJtcyIsIm1pbiIsIm1heCIsImZhY3RvciIsImppdHRlciIsImF0dGVtcHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImR1cmF0aW9uIiwiTWF0aCIsInBvdyIsInJhbmQiLCJyYW5kb20iLCJkZXZpYXRpb24iLCJmbG9vciIsInJlc2V0Iiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIiwiY2hhcnMiLCJlbmNvZGUiLCJhcnJheWJ1ZmZlciIsImkiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJiYXNlNjQiLCJzdWJzdHJpbmciLCJkZWNvZGUiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsInAiLCJBcnJheUJ1ZmZlciIsImluZGV4T2YiLCJFbWl0dGVyIiwib2JqIiwia2V5IiwibWl4aW4iLCJvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImZuIiwiX2NhbGxiYWNrcyIsInB1c2giLCJvbmNlIiwib2ZmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImNhbGxiYWNrcyIsInNwbGljZSIsImVtaXQiLCJhcmdzIiwiQXJyYXkiLCJzbGljZSIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImZvcm1hdEFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjIiwiY29sb3IiLCJpbmRleCIsImxhc3RDIiwicmVwbGFjZSIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsImxvYWQiLCJyIiwiZ2V0SXRlbSIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsIndpbmRvdyIsInR5cGUiLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJkZXN0cm95Iiwid2FybmVkIiwid2FybiIsImNvbG9ycyIsImxvZyIsImRlYnVnIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwibmFtZXNwYWNlc0NhY2hlIiwiZW5hYmxlZENhY2hlIiwiZW5hYmxlT3ZlcnJpZGUiLCJlbmFibGVkIiwic2VsZiIsImN1cnIiLCJOdW1iZXIiLCJEYXRlIiwicHJldiIsImNvZXJjZSIsInVuc2hpZnQiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJ2YWwiLCJjYWxsIiwic2VsZWN0Q29sb3IiLCJleHRlbmQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXQiLCJzZXQiLCJpbml0IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJ0b05hbWVzcGFjZSIsInJlZ2V4cCIsInRvU3RyaW5nIiwiZGVmYXVsdCIsIkVycm9yIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJtYXAiLCJza2lwcyIsImpvaW4iLCJlbmFibGUiLCJzcGxpdCIsInN1YnN0ciIsIm5hbWUiLCJ0ZXN0Iiwia2V5cyIsImZvckVhY2giLCJoYXNoIiwiY2hhckNvZGVBdCIsImFicyIsIkZ1bmN0aW9uIiwiU29ja2V0IiwidXJpIiwicHJvdG9jb2wiLCJUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwicGFyc2VyIiwicGFyc2V1cmkiLCJwYXJzZXFzIiwiaW5zdGFsbFRpbWVyRnVuY3Rpb25zIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImhvc3RuYW1lIiwiaG9zdCIsInNlY3VyZSIsInBvcnQiLCJxdWVyeSIsImxvY2F0aW9uIiwicmVhZHlTdGF0ZSIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsImFzc2lnbiIsInBhdGgiLCJhZ2VudCIsIndpdGhDcmVkZW50aWFscyIsInVwZ3JhZGUiLCJqc29ucCIsInRpbWVzdGFtcFBhcmFtIiwicmVtZW1iZXJVcGdyYWRlIiwicmVqZWN0VW5hdXRob3JpemVkIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJ0cmFuc3BvcnRPcHRpb25zIiwiY2xvc2VPbkJlZm9yZXVubG9hZCIsImlkIiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdUaW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJjbG9zZSIsIm9mZmxpbmVFdmVudExpc3RlbmVyIiwib25DbG9zZSIsIm9wZW4iLCJjcmVhdGVUcmFuc3BvcnQiLCJvIiwiaGFzT3duUHJvcGVydHkiLCJjbG9uZSIsIkVJTyIsInNpZCIsInNvY2tldCIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsInNldFRpbWVvdXRGbiIsImUiLCJzaGlmdCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJiaW5kIiwib25QYWNrZXQiLCJvbkVycm9yIiwicHJvYmUiLCJmYWlsZWQiLCJvblRyYW5zcG9ydE9wZW4iLCJzZW5kIiwiZGF0YSIsIm1zZyIsInVwZ3JhZGluZyIsInBhdXNlIiwiY2xlYW51cCIsImZsdXNoIiwiZXJyIiwiZnJlZXplVHJhbnNwb3J0Iiwib25lcnJvciIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbmNsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbk9wZW4iLCJsIiwicGFja2V0Iiwib25IYW5kc2hha2UiLCJwYXJzZSIsInJlc2V0UGluZ1RpbWVvdXQiLCJzZW5kUGFja2V0IiwiY29kZSIsImZpbHRlclVwZ3JhZGVzIiwiY2xlYXJUaW1lb3V0Rm4iLCJhdXRvVW5yZWYiLCJ1bnJlZiIsIndyaXRhYmxlIiwid3JpdGUiLCJvcHRpb25zIiwidW5kZWZpbmVkIiwiY29tcHJlc3MiLCJjbGVhbnVwQW5kQ2xvc2UiLCJ3YWl0Rm9yVXBncmFkZSIsInJlYXNvbiIsImRlc2MiLCJwaW5nSW50ZXJ2YWxUaW1lciIsImZpbHRlcmVkVXBncmFkZXMiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJwYWNrZXRzIiwib25EYXRhIiwiZGVjb2RlUGFja2V0IiwiYmluYXJ5VHlwZSIsIlhNTEh0dHBSZXF1ZXN0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGhyIiwieGQiLCJ4cyIsImlzU1NMIiwieGRvbWFpbiIsInhzY2hlbWUiLCJmb3JjZUpTT05QIiwiUG9sbGluZyIsImdsb2JhbFRoaXMiLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsIl9fX2VpbyIsInN1cHBvcnRzQmluYXJ5Iiwic2NyaXB0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZm9ybSIsImlmcmFtZSIsImRvUG9sbCIsImNyZWF0ZUVsZW1lbnQiLCJhc3luYyIsInNyYyIsImluc2VydEF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbnNlcnRCZWZvcmUiLCJoZWFkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZG9Xcml0ZSIsImFyZWEiLCJpZnJhbWVJZCIsImNsYXNzTmFtZSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInRhcmdldCIsIm1ldGhvZCIsInNldEF0dHJpYnV0ZSIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImFjdGlvbiIsImh0bWwiLCJ2YWx1ZSIsInN1Ym1pdCIsImF0dGFjaEV2ZW50Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwib25sb2FkIiwicGljayIsImVtcHR5IiwiaGFzWEhSMiIsInJlc3BvbnNlVHlwZSIsIlJlcXVlc3QiLCJjcmVhdGUiLCJleHRyYUhlYWRlcnMiLCJzZXREaXNhYmxlSGVhZGVyQ2hlY2siLCJzZXRSZXF1ZXN0SGVhZGVyIiwicmVxdWVzdFRpbWVvdXQiLCJ0aW1lb3V0IiwiaGFzWERSIiwib25Mb2FkIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwicmVxdWVzdHNDb3VudCIsInJlcXVlc3RzIiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwiYWJvcnQiLCJYRG9tYWluUmVxdWVzdCIsImVuYWJsZXNYRFIiLCJ1bmxvYWRIYW5kbGVyIiwiZm9yY2VCYXNlNjQiLCJyZXF1ZXN0IiwicmVxIiwicG9sbFhociIsInllYXN0IiwicG9sbCIsIm9uUGF1c2UiLCJ0b3RhbCIsImRlY29kZVBheWxvYWQiLCJlbmNvZGVQYXlsb2FkIiwic2NoZW1hIiwidGltZXN0YW1wUmVxdWVzdHMiLCJiNjQiLCJuZXh0VGljayIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsImRlZmF1bHRCaW5hcnlUeXBlIiwiaXNSZWFjdE5hdGl2ZSIsInByb2R1Y3QiLCJXUyIsImNoZWNrIiwicHJvdG9jb2xzIiwiaGVhZGVycyIsIndzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm9wZW4iLCJfc29ja2V0Iiwib25tZXNzYWdlIiwiZXYiLCJsYXN0UGFja2V0IiwiZW5jb2RlUGFja2V0IiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsImF0dHIiLCJyZWR1Y2UiLCJhY2MiLCJrIiwiTkFUSVZFX1NFVF9USU1FT1VUIiwic2V0VGltZW91dCIsIk5BVElWRV9DTEVBUl9USU1FT1VUIiwiY2xlYXJUaW1lb3V0IiwidXNlTmF0aXZlVGltZXJzIiwiaGFzQ09SUyIsImNvbmNhdCIsIlBBQ0tFVF9UWVBFUyIsIlBBQ0tFVF9UWVBFU19SRVZFUlNFIiwiRVJST1JfUEFDS0VUIiwiYmFzZTY0ZGVjb2RlciIsImRlY29kZUJhc2U2NFBhY2tldCIsImRlY29kZWQiLCJtYXBCaW5hcnkiLCJCbG9iIiwiZW5jb2RlZFBhY2tldCIsImNoYXJBdCIsIndpdGhOYXRpdmVCbG9iIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZW5jb2RlQmxvYkFzQmFzZTY0IiwiY2FsbGJhY2siLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsImNvbnRlbnQiLCJyZXN1bHQiLCJyZWFkQXNEYXRhVVJMIiwiaXNWaWV3IiwiYnVmZmVyIiwiU0VQQVJBVE9SIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZW5jb2RlZFBhY2tldHMiLCJjb3VudCIsImVuY29kZWRQYXlsb2FkIiwiZGVjb2RlZFBhY2tldCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiaXNBcnJheSIsImFyciIsInMiLCJtIiwiaCIsImQiLCJwbHVyYWwiLCJtc0FicyIsIm4iLCJpc1BsdXJhbCIsInJvdW5kIiwic3RyIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImxvbmciLCJmbXRTaG9ydCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwiVHlwZUVycm9yIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlIiwicGFydHMiLCJiIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMiIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJncm91cHMiLCJwcmVmaXgiLCJvcHRpb25hbCIsInJlcGVhdCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJmbGFncyIsImFycmF5VG9SZWdleHAiLCJ0b2tlbnNUb1JlZ0V4cCIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwib2Zmc2V0IiwibmV4dCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJwcmV0dHkiLCJ0b2tlbiIsInNlZ21lbnQiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJlbmQiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJ5IiwiYSIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIlN5bWJvbCIsImZvciIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwidHJpbSIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5IiwidWIiLCJtZW51aXRlbSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJpcyIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsInBlIiwicWUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJwYXNzaXZlIiwiTmIiLCJ4IiwidyIsInoiLCJ1IiwicSIsInQiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsIkFnIiwiQmciLCJDZyIsIkEiLCJDIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwic3RhdGUiLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJkb25lIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJjZWlsIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiSW5maW5pdHkiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImxvYWRlZCIsIl9fZXNNb2R1bGUiLCJSZWZlcmVuY2VFcnJvciIsIl9fcHJvdG9fXyIsImlzU2RrTG9hZGVkIiwiaXNQcm9jZXNzaW5nIiwicmVzcG9uc2VBcGkiLCJGQiIsImFwaSIsImxhbmd1YWdlIiwiZmllbGRzIiwiY2hlY2tMb2dpblN0YXRlIiwic2V0U3RhdGVJZk1vdW50ZWQiLCJhdXRoUmVzcG9uc2UiLCJvbkZhaWx1cmUiLCJjaGVja0xvZ2luQWZ0ZXJSZWZyZXNoIiwibG9naW4iLCJjbGljayIsInNldFN0YXRlIiwic2NvcGUiLCJhcHBJZCIsInJldHVyblNjb3BlcyIsInJlZGlyZWN0VXJpIiwiZGlzYWJsZU1vYmlsZVJlZGlyZWN0IiwiYXV0aFR5cGUiLCJjbGllbnRfaWQiLCJyZWRpcmVjdF91cmkiLCJyZXR1cm5fc2NvcGVzIiwicmVzcG9uc2VfdHlwZSIsImF1dGhfdHlwZSIsImlzTW9iaWxlIiwic2V0UHJvdG90eXBlT2YiLCJfaXNNb3VudGVkIiwiZ2V0RWxlbWVudEJ5SWQiLCJzZGtMb2FkZWQiLCJzZXRGYkFzeW5jSW5pdCIsImxvYWRTZGtBc3luY2hyb25vdXNseSIsImF1dG9Mb2FkIiwiZ2V0TG9naW5TdGF0dXMiLCJ4ZmJtbCIsImNvb2tpZSIsImZiQXN5bmNJbml0IiwiaXNSZWRpcmVjdGVkRnJvbUZiIiwic3RhbmRhbG9uZSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiX19hc3NpZ24iLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJyZWFjdF8xIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsInNwZWVkIiwiZmlsbCIsInN0cm9rZSIsInZpZXdCb3giLCJ0cmFuc2Zvcm0iLCJyeCIsImJlZ2luIiwiZHVyIiwidmFsdWVzIiwiY2FsY01vZGUiLCJyZXBlYXRDb3VudCIsImZpbGxSdWxlIiwiY3giLCJjeSIsIm92ZXJmbG93Iiwia2V5VGltZXMiLCJrZXlTcGxpbmVzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJUaHJlZURvdHMiLCJUYWlsU3BpbiIsIlNwaW5uaW5nQ2lyY2xlcyIsIlJpbmdzIiwiUHVmZiIsIk92YWwiLCJIZWFydHMiLCJHcmlkIiwiQ2lyY2xlcyIsIkJhcnMiLCJCYWxsVHJpYW5nbGUiLCJBdWRpbyIsImF1ZGlvXzEiLCJiYWxsX3RyaWFuZ2xlXzEiLCJiYXJzXzEiLCJjaXJjbGVzXzEiLCJncmlkXzEiLCJoZWFydHNfMSIsIm92YWxfMSIsInB1ZmZfMSIsInJpbmdzXzEiLCJzcGlubmluZ19jaXJjbGVzXzEiLCJ0YWlsX3NwaW5fMSIsInRocmVlX2RvdHNfMSIsIkxvYWRpbmdJY29ucyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwidG9BcnJheSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJyZWNvbnN0cnVjdFBhY2tldCIsImRlY29uc3RydWN0UGFja2V0IiwiaXNfYmluYXJ5XzEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJidWZmZXJzIiwiaXNCaW5hcnkiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsIm51bSIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrZXREYXRhIiwicGFjayIsImF0dGFjaG1lbnRzIiwiRGVjb2RlciIsIkVuY29kZXIiLCJQYWNrZXRUeXBlIiwiYmluYXJ5XzEiLCJFVkVOVCIsIkFDSyIsImhhc0JpbmFyeSIsImVuY29kZUFzU3RyaW5nIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsImVuY29kZUFzQmluYXJ5IiwibnNwIiwiZGVjb25zdHJ1Y3Rpb24iLCJkZWNvZGVTdHJpbmciLCJyZWNvbnN0cnVjdG9yIiwiQmluYXJ5UmVjb25zdHJ1Y3RvciIsInRha2VCaW5hcnlEYXRhIiwiYnVmIiwidHJ5UGFyc2UiLCJpc1BheWxvYWRWYWxpZCIsInN0YXRpYyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiQ09OTkVDVF9FUlJPUiIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJyZWNvblBhY2siLCJiaW5EYXRhIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwidG9KU09OIiwiYWxwaGFiZXQiLCJzZWVkIiwiZW5jb2RlZCIsImlvIiwiTWFuYWdlciIsInVybF8xIiwibWFuYWdlcl8xIiwibG9va3VwIiwiY2FjaGUiLCJtYW5hZ2VycyIsInBhcnNlZCIsInNhbWVOYW1lc3BhY2UiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInNvY2tldF9pb19wYXJzZXJfMSIsImNvbm5lY3QiLCJtYW5hZ2VyXzIiLCJzb2NrZXRfMSIsImVpbyIsInV0aWxfMSIsIm9uXzEiLCJ0eXBlZF9ldmVudHNfMSIsIlN0cmljdEV2ZW50RW1pdHRlciIsIm5zcHMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCJfcmVhZHlTdGF0ZSIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiZGVjb2RlciIsIl9hdXRvQ29ubmVjdCIsImF1dG9Db25uZWN0IiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsIl9yZWNvbm5lY3RpbmciLCJyZWNvbm5lY3QiLCJlbmdpbmUiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YkRlc3Ryb3kiLCJlcnJvclN1YiIsImVtaXRSZXNlcnZlZCIsInRpbWVyIiwib25waW5nIiwib25kYXRhIiwib25kZWNvZGVkIiwiX2Rlc3Ryb3kiLCJhY3RpdmUiLCJfY2xvc2UiLCJfcGFja2V0Iiwic3ViRGVzdHJveSIsImRpc2Nvbm5lY3QiLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJSRVNFUlZFRF9FVkVOVFMiLCJmcmVlemUiLCJjb25uZWN0X2Vycm9yIiwiZGlzY29ubmVjdGluZyIsIm5ld0xpc3RlbmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJpZHMiLCJhY2tzIiwiYXV0aCIsInN1YkV2ZW50cyIsIm9ucGFja2V0IiwiaXNUcmFuc3BvcnRXcml0YWJsZSIsInZvbGF0aWxlIiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwiZW1pdEV2ZW50IiwiX2FueUxpc3RlbmVycyIsInNlbnQiLCJlbWl0QnVmZmVyZWQiLCJvbkFueSIsInByZXBlbmRBbnkiLCJvZmZBbnkiLCJsaXN0ZW5lcnNBbnkiLCJsb2MiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsInByb3AiLCJSZWFjdFJlZHV4Q29udGV4dCIsImJhdGNoIiwiZ2V0QmF0Y2giLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJzdWJzY3JpcHRpb24iLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiYWRkTmVzdGVkU3ViIiwiZmlyc3QiLCJjbGVhciIsImlzU3Vic2NyaWJlZCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIm5vdGlmeU5lc3RlZFN1YnMiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiX3JlZiIsImNvbnRleHRWYWx1ZSIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfZXhjbHVkZWQiLCJfZXhjbHVkZWQyIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJXcmFwcGVkQ29tcG9uZW50Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsImRpZFN0b3JlQ29tZUZyb21Qcm9wcyIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsInNoYWxsb3dFcXVhbCIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIl9sb29wIiwiYWN0aW9uQ3JlYXRvciIsImJpbmRBY3Rpb25DcmVhdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwibmV4dFN0YXRlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiYXJnIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJzZWxlY3RvciIsImVxdWFsaXR5Rm4iLCJfdXNlUmVkdXhDb250ZXh0Iiwic2VsZWN0ZWRTdGF0ZSIsImNvbnRleHRTdWIiLCJmb3JjZVJlbmRlciIsImxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IiLCJsYXRlc3RTZWxlY3RvciIsImxhdGVzdFNlbGVjdGVkU3RhdGUiLCJzdG9yZVN0YXRlIiwibmV3U2VsZWN0ZWRTdGF0ZSIsIm5ld1N0b3JlU3RhdGUiLCJfbmV3U2VsZWN0ZWRTdGF0ZSIsInVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uIiwibmV3QmF0Y2giLCJ1c2VTZWxlY3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwibGlzdCIsInZhbHVlRXF1YWwiLCJldmVyeSIsIml0ZW0iLCJhVmFsdWUiLCJiVmFsdWUiLCJjb25kaXRpb24iLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwiZmlsdGVyIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiSGFzaENoYW5nZUV2ZW50JDEiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJfcHJvcHMiLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsImJhc2VuYW1lIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJ0cmFuc2l0aW9uTWFuYWdlciIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJsb2NhdGlvbnNBcmVFcXVhbCQkMSIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJoYW5kbGVQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJjcmVhdGVIcmVmIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJwcmV2SW5kZXgiLCJuZXh0UGF0aHMiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVyIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwiX3Byb3RvIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJvYmplY3RJcyIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwib25VcGRhdGUiLCJfcHJvdG8yIiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiaGlzdG9yeUNvbnRleHQiLCJSb3V0ZXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwicGFyYW1zIiwiaXNFeGFjdCIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiZ2VuZXJhdG9yIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNhY2hlJDEiLCJjYWNoZUNvdW50JDEiLCJtYXRjaFBhdGgiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwiY29tcGlsZVBhdGgkMSIsIlJvdXRlIiwiY29udGV4dCQxIiwiX3RoaXMkcHJvcHMiLCJpc0VtcHR5Q2hpbGRyZW4iLCJTd2l0Y2giLCJ1c2VIaXN0b3J5IiwidXNlUGFyYW1zIiwiSGFzaFJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiRjb21wb25lbnQiLCJpc0R1cGxpY2F0ZU5hdmlnYXRpb24iLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsInVzZSIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwicmVhY3RQcm9wc1JlZ2V4IiwiXyIsInN0eWxlZENvbXBvbmVudElkIiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJTQ19BVFRSIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJSRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkiLCJncm91cFNpemVzIiwiVWludDMyQXJyYXkiLCJpbmRleE9mR3JvdXAiLCJpbnNlcnRSdWxlcyIsImluc2VydFJ1bGUiLCJjbGVhckdyb3VwIiwiZGVsZXRlUnVsZSIsImdldEdyb3VwIiwiZ2V0UnVsZSIsInJlZ2lzdGVyTmFtZSIsImdldFRhZyIsIl9fd2VicGFja19ub25jZV9fIiwiY2hpbGROb2RlcyIsIiQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiY3NzUnVsZXMiLCJjc3NUZXh0Iiwibm9kZXMiLCJydWxlcyIsImlzU2VydmVyIiwidXNlQ1NTT01JbmplY3Rpb24iLCJncyIsInNlcnZlciIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiY2xlYXJOYW1lcyIsImNsZWFyUnVsZXMiLCJjbGVhclRhZyIsInN0YXRpY1J1bGVzSWQiLCJpc1N0YXRpYyIsImNvbXBvbmVudElkIiwiYmFzZUhhc2giLCJiYXNlU3R5bGUiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsInBsdWdpbnMiLCJzdHlsaXNQbHVnaW5zIiwiZGlzYWJsZUNTU09NSW5qZWN0aW9uIiwiZGlzYWJsZVZlbmRvclByZWZpeGVzIiwiZ2V0TmFtZSIsImlzQ3NzIiwidGhlbWUiLCJhdHRycyIsInBhcmVudENvbXBvbmVudElkIiwic2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb25lbnRTdHlsZSIsImZvbGRlZENvbXBvbmVudElkcyIsIiRhcyIsImFzIiwid2l0aENvbXBvbmVudCIsIl9mb2xkZWREZWZhdWx0UHJvcHMiLCJ3aXRoQ29uZmlnIiwiY3JlYXRlU3R5bGVzIiwicmVtb3ZlU3R5bGVzIiwicmVuZGVyU3R5bGVzIiwiX2VtaXRTaGVldENTUyIsImdldFN0eWxlVGFncyIsInNlYWxlZCIsImdldFN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2VhbCIsImNvbGxlY3RTdHlsZXMiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJkYXJrIiwibWlsZCIsIm1pbGRlciIsImxpZ2h0IiwibGlnaHRlciIsImJsdWUiLCJ3aGl0ZSIsInJlZCIsIkZsZXhDb250YWluZXIiLCJzdHlsZWQiLCJDaXJjbGVDb250YWluZXIiLCJGbGV4Q29sdW1uR3Jvd0VsZW1lbnRDZW50ZXIiLCJCaWdDb250YWluZXIiLCJubiIsInRuIiwiaXNGcm96ZW4iLCJybiIsImVuIiwiUHJveHkiLCJyZXZvY2FibGUiLCJyZXZva2UiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlbGV0ZVByb3BlcnR5IiwidW4iLCJwcm9kdWNlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJvcCIsImFuIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbCIsImVxdWFsaXR5Q2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJtZW1vaXplIiwibWVtb2l6ZU9wdGlvbnMiLCJjcmVhdGVTZWxlY3RvckNyZWF0b3IiLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiY29tcG9zZSIsImZ1bmNzIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX3NwcmVhZEFycmF5IiwiaWwiLCJfX2RlZlByb3AiLCJfX2dldE93blByb3BTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwiX19wcm9wSXNFbnVtIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfaSIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiTWlkZGxld2FyZUFycmF5IiwiX3N1cGVyIiwic3BlY2llcyIsInByZXBlbmQiLCJjcmVhdGVBY3Rpb24iLCJwcmVwYXJlQWN0aW9uIiwicHJlcGFyZWQiLCJleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayIsImJ1aWxkZXJDYWxsYmFjayIsImRlZmF1bHRDYXNlUmVkdWNlciIsImFjdGlvbnNNYXAiLCJhY3Rpb25NYXRjaGVycyIsImJ1aWxkZXIiLCJhZGRDYXNlIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJtYXRjaGVyIiwiYWRkRGVmYXVsdENhc2UiLCJjcmVhdGVTbGljZSIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXJzIiwiZXh0cmFSZWR1Y2VycyIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJyZWR1Y2VyTmFtZSIsImNhc2VSZWR1Y2VyIiwicHJlcGFyZUNhbGxiYWNrIiwibWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUiLCJwcmVwYXJlIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJmcm96ZW5Jbml0aWFsU3RhdGUiLCJjYXNlUmVkdWNlcnMiLCJjciIsImRyYWZ0IiwiY3JlYXRlUmVkdWNlciIsImFjdGlvbnMiLCJsb2FkaW5nU2xpY2UiLCJ0b2dnbGVMb2FkaW5nIiwiZmV0Y2hGZWVkIiwiZmV0Y2giLCJBdXRob3JpemF0aW9uIiwianNvbiIsInNlbmREYXRhIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImVudHJpZXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJtYW5hZ2VMaWtlcyIsInBvc3RJZCIsImRlbGV0ZVBvc3QiLCJ1c2VySWQiLCJtYW5hZ2VDb21tZW50TGlrZXMiLCJjb21tZW50SWQiLCJtYW5hZ2VOb3RpZmljYXRpb25zIiwibm90aUlkIiwiaGFuZGxlRnJpZW5kcyIsImZpZWxkIiwiY3VycklkIiwiZnJpZW5kSWQiLCJzZW5kZXIiLCJzZXNzaW9uU2xpY2UiLCJ3cml0ZVNlc3Npb24iLCJkZWxldGVTZXNzaW9uIiwic2F2ZVNlc3Npb24iLCJhZGRVc2VyR2VuZXJhbCIsInVzZXIiLCJfaWQiLCJlbElkIiwicmVtb3ZlVXNlckdlbmVyYWwiLCJlbCIsInNldEFsbFJlcXVlc3RzIiwiZnJpZW5kcyIsInNlbnRfcmVxdWVzdHMiLCJyZWNlaXZlZF9yZXF1ZXN0cyIsImFkZExpa2UiLCJSb3VuZGVkSW5wdXRCdXR0b24iLCJSb3VuZGVkSW5wdXRGaWVsZCIsIlJlZ3VsYXJCdXR0b24iLCJGb3JtRmxleENvbnRhaW5lciIsIlNxdWFyZWRJbnB1dCIsIlNxdWFyZWRUZXh0QXJlYSIsIkxvZ2luQm9keSIsIkJpZ0xvZ28iLCJCaWdCYWxsIiwic2Vzc2lvbiIsInJlc3BvbnNlIiwiYWNjZXNzVG9rZW4iLCJwcm9maWxlX3Bob3RvIiwiYWNjZXNzX3Rva2VuIiwiY2hlY2tUb2tlbiIsInBpY3R1cmUiLCJyZW5kZXJQcm9wcyIsInVzZXJuYW1lIiwiSW1hZ2VGb3JDb250YWluZXIiLCJTZXBhcmF0b3IiLCJTdHlsZWRSZWd1bGFyUCIsIlN0eWxlZEljb24iLCJQb3N0SW1hZ2UiLCJQb3N0TGluayIsImltYWdlIiwiQm9sZFJlZ3VsYXJMaW5rIiwiUG9zdEhlYWRlciIsImhlYWRpbmciLCJoYW5kbGVEb3RzIiwiUG9zdFdyYXBwZXIiLCJMaWtlc0NvbnRhaW5lciIsIlBvc3RCb2R5IiwiVXNlckNoYXRCdXR0b24iLCJjaGF0IiwiY3VyckNoYXQiLCJzZXRDdXJyZW50Q2hhdElkIiwic2V0UmVjaXBpZW50Iiwic2V0VXNlciIsInBhcnRpY2lwYW50cyIsImZ1bGxfbmFtZSIsIm1lc3NhZ2VzIiwiTWVzc2FnZUNvbnRhaW5lciIsIk1lc3NhZ2VCdWJibGUiLCJmb3JtYXR0ZWRfZGF0ZSIsImFsbFVzZXJzQ2hhdHMiLCJjaGF0Qm94IiwiY2hhdHJvb21zIiwicmVhbFRpbWUiLCJjdXJyZW50Q2hhdHJvb20iLCJzZXRDdXJyZW50Q2hhdHJvb20iLCJjdXJyZW50Q2hhdElkIiwicmVjaXBpZW50IiwiZmluZCIsInNjcm9sbCIsInNjcm9sbEhlaWdodCIsImJlaGF2aW9yIiwiQ2hhdE1lc3NhZ2VzIiwib25TdWJtaXQiLCJmaXJzdF9uYW1lIiwiaGlkZGVuIiwicmVxdWVzdFR5cGUiLCJzZXRSZXF1ZXN0VHlwZSIsIlJlcXVlc3RJdGVtIiwiYWN0aXZlRm9ybVNsaWNlIiwic2V0QWN0aXZlRm9ybSIsImN1cnJlbnRDb21tZW50U2xpY2UiLCJzZXRDdXJyZW50Q29tbWVudCIsImN1cnJlbnRQb3N0U2xpY2UiLCJzZXRDdXJyZW50UG9zdCIsImhhbmRsZUxpa2UiLCJsaWtlZCIsImNvbW1lbnQiLCJwb3N0Iiwic2V0Q29uZmlybSIsImF1dGhvciIsImRlbGV0ZUNvbW1lbnRzIiwiYWxpZ25JdGVtcyIsInNldExpa2VkIiwibGlrZXMiLCJudW1iZXJPZkxpa2VzIiwic2V0TnVtYmVyT2ZMaWtlcyIsImluY2x1ZGVzIiwiZm9ybWF0dGVkX2NyZWF0aW9uIiwiQ29tbWVudEFjdGlvbnMiLCJwcmV2U3RhdGUiLCJjb21tZW50cyIsIkNvbW1lbnRJdGVtIiwiaGFuZGxlQ29tbWVudCIsImhhbmRsZURlbGV0ZSIsIm51bWJlck9mQ29tbWVudHMiLCJzZXRDb21tZW50cyIsImN1cnJlbnRQb3N0IiwicG9zdERhdGEiLCJzZXRQb3N0RGF0YSIsImhpZ2hsaWdodCIsInVybF9mb3JtYXR0ZXIiLCJOdW1iZXJPZlBvc3RMaWtlcyIsIlBvc3RBY3Rpb25zIiwiQ29tbWVudFNlY3Rpb24iLCJXcml0ZUFDb21tZW50IiwiUG9zdCIsImN1cnJVc2VyIiwiaXNJbkZpZWxkIiwic2V0SXNJbkZpZWxkIiwiSGlnaGxpZ2h0ZXIiLCJIaWdobGlnaHRXcmFwcGVyIiwic2VudFF1ZXJ5IiwicmVnZXhGb3JRdWVyeSIsImRlYm91bmNlIiwic2V0RGVib3VuY2UiLCJmb3VuZFVzZXJzIiwic2V0Rm91bmRVc2VycyIsImZvdW5kUG9zdHMiLCJzZXRGb3VuZFBvc3RzIiwic2V0UXVlcnkiLCJvbkNoYW5nZSIsInRpbWVySWQiLCJwZXJmb3JtU2VhcmNoIiwicmVzdWx0cyIsInVzZXJzIiwicG9zdHMiLCJjcmVhdGVTZWFyY2giLCJVc2VyUmVzdWx0IiwiUG9zdFJlc3VsdCIsIm5vdGlmaWNhdGlvbiIsImljb24iLCJzZXRJY29uIiwibm90aWZpY2F0aW9ucyIsIk5vdGlmaWNhdGlvbkl0ZW0iLCJQcm9maWxlQWN0aW9ucyIsIkxvZ28iLCJCYXIiLCJNZW51Q29udGVudCIsIlNwYWNlciIsInVucmVhZE5vdGlmaWNhdGlvbnMiLCJuYXZCYXJSZWYiLCJzZXRIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJyZWxvYWRGZWVkIiwic2V0UmVsb2FkRmVlZCIsInNldFBvc3RzIiwic2Nyb2xsVG8iLCJTdGF0dXMiLCJ0ZXh0RGVjb3JhdGlvbiIsInJlbCIsIkxvYWRXcmFwcGVyIiwiRnVsbENvbnRGbGV4IiwibG9hZGluZyIsImFjdGl2ZUZvcm0iLCJkYXRhVHlwZSIsInNldERhdGFUeXBlIiwic2V0TWVzc2FnZU9uU3dpdGNoIiwiTG9nZ2VkQXNIZWFkZXIiLCJlbmNUeXBlIiwiY3VycmVudENvbW1lbnQiLCJsYXN0X25hbWUiLCJHZW5lcmFsT3B0aW9ucyIsIkVkaXRQcm9maWxlIiwicmVhbFRpbWVTbGljZSIsInNldEZpZWxkIiwic2V0VW5yZWFkTm90aWZpY2F0aW9ucyIsInJlYWQiLCJQcm9maWxlSGVhZGVyIiwiRnJpZW5kUmVxdWVzdHMiLCJzZXRQb3N0IiwiZGVsSWQiLCJIYW5kbGVSZWFsVGltZSIsIk5hdkJhciIsIkZvcm1zIiwiRmVlZCIsIkNoYXRyb29tIiwiTm90aWZpY2F0aW9ucyIsIlNlYXJjaCIsIlVzZXJQcm9maWxlIiwiU2luZ2xlUG9zdCIsIkxvYWRpbmciLCJHbG9iYWxTdHlsZXMiLCJMb2dpbiIsIlByb3RlY3RlZFJvdXRlcyIsInJvb3RSZWR1Y2VyIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJfZiIsIl9nIiwiZW5oYW5jZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsImZpbmFsTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImZpbmFsQ29tcG9zZSIsInRyYWNlIiwic3RvcmVFbmhhbmNlcnMiLCJSZWFjdERPTSIsIkFwcCJdLCJzb3VyY2VSb290IjoiIn0=